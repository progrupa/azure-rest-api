<?php
/**
 * JobsApi
 * PHP version 5
 *
 * @category Class
 * @package  Progrupa\Azure
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BatchService
 *
 * A client for issuing REST requests to the Azure Batch service.
 *
 * OpenAPI spec version: 2016-07-01.3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Progrupa\Azure\Api;

use \Progrupa\Azure\ApiClient;
use \Progrupa\Azure\ApiException;
use \Progrupa\Azure\Configuration;
use \Progrupa\Azure\ObjectSerializer;

/**
 * JobsApi Class Doc Comment
 *
 * @category Class
 * @package  Progrupa\Azure
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class JobsApi
{
    /**
     * API Client
     *
     * @var \Progrupa\Azure\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Progrupa\Azure\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Progrupa\Azure\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Progrupa\Azure\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Progrupa\Azure\ApiClient $apiClient set the API client
     *
     * @return JobsApi
     */
    public function setApiClient(\Progrupa\Azure\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation jobAdd
     *
     * Adds a job to the specified account.
     *
     * @param \Progrupa\Azure\Model\JobAddParameter $job The job to be added. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return void
     */
    public function jobAdd($job, $api_version = Version::NAME, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        list($response) = $this->jobAddWithHttpInfo($job, $api_version, $timeout, $client_request_id, $return_client_request_id, $ocp_date);
        return $response;
    }

    /**
     * Operation jobAddWithHttpInfo
     *
     * Adds a job to the specified account.
     *
     * @param \Progrupa\Azure\Model\JobAddParameter $job The job to be added. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function jobAddWithHttpInfo($job, $api_version = Version::NAME, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        // verify the required parameter 'job' is set
        if ($job === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job when calling jobAdd');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling jobAdd');
        }
        // parse inputs
        $resourcePath = "/jobs";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($job)) {
            $_tempBody = $job;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/jobs'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation jobDelete
     *
     * Deletes a job.
     *
     * @param string $job_id The ID of the job to delete. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $if_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag is an exact match as specified. (optional)
     * @param string $if_none_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag does not match the specified ETag. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return void
     */
    public function jobDelete($job_id, $api_version = Version::NAME, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $if_match = null, $if_none_match = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        list($response) = $this->jobDeleteWithHttpInfo($job_id, $api_version, $timeout, $client_request_id, $return_client_request_id, $ocp_date, $if_match, $if_none_match, $if_modified_since, $if_unmodified_since);
        return $response;
    }

    /**
     * Operation jobDeleteWithHttpInfo
     *
     * Deletes a job.
     *
     * @param string $job_id The ID of the job to delete. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $if_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag is an exact match as specified. (optional)
     * @param string $if_none_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag does not match the specified ETag. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function jobDeleteWithHttpInfo($job_id, $api_version = Version::NAME, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $if_match = null, $if_none_match = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling jobDelete');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling jobDelete');
        }
        // parse inputs
        $resourcePath = "/jobs/{jobId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_match);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_none_match);
        }
        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_modified_since);
        }
        // header params
        if ($if_unmodified_since !== null) {
            $headerParams['If-Unmodified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_unmodified_since);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobId" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/jobs/{jobId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation jobDisable
     *
     * Disables the specified job, preventing new tasks from running.
     *
     * @param string $job_id The ID of the job to disable. (required)
     * @param \Progrupa\Azure\Model\JobDisableParameter $job_disable_parameter The parameters for the request. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $if_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag is an exact match as specified. (optional)
     * @param string $if_none_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag does not match the specified ETag. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return void
     */
    public function jobDisable($job_id, $job_disable_parameter, $api_version = Version::NAME, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $if_match = null, $if_none_match = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        list($response) = $this->jobDisableWithHttpInfo($job_id, $job_disable_parameter, $api_version, $timeout, $client_request_id, $return_client_request_id, $ocp_date, $if_match, $if_none_match, $if_modified_since, $if_unmodified_since);
        return $response;
    }

    /**
     * Operation jobDisableWithHttpInfo
     *
     * Disables the specified job, preventing new tasks from running.
     *
     * @param string $job_id The ID of the job to disable. (required)
     * @param \Progrupa\Azure\Model\JobDisableParameter $job_disable_parameter The parameters for the request. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $if_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag is an exact match as specified. (optional)
     * @param string $if_none_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag does not match the specified ETag. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function jobDisableWithHttpInfo($job_id, $job_disable_parameter, $api_version = Version::NAME, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $if_match = null, $if_none_match = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling jobDisable');
        }
        // verify the required parameter 'job_disable_parameter' is set
        if ($job_disable_parameter === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_disable_parameter when calling jobDisable');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling jobDisable');
        }
        // parse inputs
        $resourcePath = "/jobs/{jobId}/disable";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_match);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_none_match);
        }
        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_modified_since);
        }
        // header params
        if ($if_unmodified_since !== null) {
            $headerParams['If-Unmodified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_unmodified_since);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobId" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($job_disable_parameter)) {
            $_tempBody = $job_disable_parameter;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/jobs/{jobId}/disable'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation jobEnable
     *
     * Enables the specified job, allowing new tasks to run.
     *
     * @param string $job_id The ID of the job to enable. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $if_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag is an exact match as specified. (optional)
     * @param string $if_none_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag does not match the specified ETag. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return void
     */
    public function jobEnable($job_id, $api_version = Version::NAME, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $if_match = null, $if_none_match = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        list($response) = $this->jobEnableWithHttpInfo($job_id, $api_version, $timeout, $client_request_id, $return_client_request_id, $ocp_date, $if_match, $if_none_match, $if_modified_since, $if_unmodified_since);
        return $response;
    }

    /**
     * Operation jobEnableWithHttpInfo
     *
     * Enables the specified job, allowing new tasks to run.
     *
     * @param string $job_id The ID of the job to enable. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $if_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag is an exact match as specified. (optional)
     * @param string $if_none_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag does not match the specified ETag. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function jobEnableWithHttpInfo($job_id, $api_version = Version::NAME, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $if_match = null, $if_none_match = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling jobEnable');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling jobEnable');
        }
        // parse inputs
        $resourcePath = "/jobs/{jobId}/enable";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_match);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_none_match);
        }
        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_modified_since);
        }
        // header params
        if ($if_unmodified_since !== null) {
            $headerParams['If-Unmodified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_unmodified_since);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobId" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/jobs/{jobId}/enable'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation jobGet
     *
     * Gets information about the specified job.
     *
     * @param string $job_id The ID of the job. (required)
     * @param string $api_version Client API Version. (required)
     * @param string $select An OData $select clause. (optional)
     * @param string $expand An OData $expand clause. (optional)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $if_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag is an exact match as specified. (optional)
     * @param string $if_none_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag does not match the specified ETag. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return \Progrupa\Azure\Model\CloudJob
     */
    public function jobGet($job_id, $api_version = Version::NAME, $select = null, $expand = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $if_match = null, $if_none_match = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        list($response) = $this->jobGetWithHttpInfo($job_id, $api_version, $select, $expand, $timeout, $client_request_id, $return_client_request_id, $ocp_date, $if_match, $if_none_match, $if_modified_since, $if_unmodified_since);
        return $response;
    }

    /**
     * Operation jobGetWithHttpInfo
     *
     * Gets information about the specified job.
     *
     * @param string $job_id The ID of the job. (required)
     * @param string $api_version Client API Version. (required)
     * @param string $select An OData $select clause. (optional)
     * @param string $expand An OData $expand clause. (optional)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $if_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag is an exact match as specified. (optional)
     * @param string $if_none_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag does not match the specified ETag. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of \Progrupa\Azure\Model\CloudJob, HTTP status code, HTTP response headers (array of strings)
     */
    public function jobGetWithHttpInfo($job_id, $api_version = Version::NAME, $select = null, $expand = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $if_match = null, $if_none_match = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling jobGet');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling jobGet');
        }
        // parse inputs
        $resourcePath = "/jobs/{jobId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($select !== null) {
            $queryParams['$select'] = $this->apiClient->getSerializer()->toQueryValue($select);
        }
        // query params
        if ($expand !== null) {
            $queryParams['$expand'] = $this->apiClient->getSerializer()->toQueryValue($expand);
        }
        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_match);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_none_match);
        }
        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_modified_since);
        }
        // header params
        if ($if_unmodified_since !== null) {
            $headerParams['If-Unmodified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_unmodified_since);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobId" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Progrupa\Azure\Model\CloudJob',
                '/jobs/{jobId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Progrupa\Azure\Model\CloudJob', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\CloudJob', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation jobGetAllJobsLifetimeStatistics
     *
     * Gets lifetime summary statistics for all of the jobs in the specified account.
     *
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return \Progrupa\Azure\Model\JobStatistics
     */
    public function jobGetAllJobsLifetimeStatistics($api_version = Version::NAME, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        list($response) = $this->jobGetAllJobsLifetimeStatisticsWithHttpInfo($api_version, $timeout, $client_request_id, $return_client_request_id, $ocp_date);
        return $response;
    }

    /**
     * Operation jobGetAllJobsLifetimeStatisticsWithHttpInfo
     *
     * Gets lifetime summary statistics for all of the jobs in the specified account.
     *
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of \Progrupa\Azure\Model\JobStatistics, HTTP status code, HTTP response headers (array of strings)
     */
    public function jobGetAllJobsLifetimeStatisticsWithHttpInfo($api_version = Version::NAME, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling jobGetAllJobsLifetimeStatistics');
        }
        // parse inputs
        $resourcePath = "/lifetimejobstats";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Progrupa\Azure\Model\JobStatistics',
                '/lifetimejobstats'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Progrupa\Azure\Model\JobStatistics', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\JobStatistics', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation jobList
     *
     * Lists all of the jobs in the specified account.
     *
     * @param string $api_version Client API Version. (required)
     * @param string $filter An OData $filter clause. (optional)
     * @param string $select An OData $select clause. (optional)
     * @param string $expand An OData $expand clause. (optional)
     * @param int $maxresults The maximum number of items to return in the response. A maximum of 1000 jobs can be returned. (optional, default to 1000)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return \Progrupa\Azure\Model\CloudJobListResult
     */
    public function jobList($api_version = Version::NAME, $filter = null, $select = null, $expand = null, $maxresults = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        list($response) = $this->jobListWithHttpInfo($api_version, $filter, $select, $expand, $maxresults, $timeout, $client_request_id, $return_client_request_id, $ocp_date);
        return $response;
    }

    /**
     * Operation jobListWithHttpInfo
     *
     * Lists all of the jobs in the specified account.
     *
     * @param string $api_version Client API Version. (required)
     * @param string $filter An OData $filter clause. (optional)
     * @param string $select An OData $select clause. (optional)
     * @param string $expand An OData $expand clause. (optional)
     * @param int $maxresults The maximum number of items to return in the response. A maximum of 1000 jobs can be returned. (optional, default to 1000)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of \Progrupa\Azure\Model\CloudJobListResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function jobListWithHttpInfo($api_version = Version::NAME, $filter = null, $select = null, $expand = null, $maxresults = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling jobList');
        }
        if (!is_null($maxresults) && ($maxresults > 1000)) {
            throw new \InvalidArgumentException('invalid value for "$maxresults" when calling JobsApi.jobList, must be smaller than or equal to 1000.');
        }
        if (!is_null($maxresults) && ($maxresults < 1)) {
            throw new \InvalidArgumentException('invalid value for "$maxresults" when calling JobsApi.jobList, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/jobs";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($filter !== null) {
            $queryParams['$filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // query params
        if ($select !== null) {
            $queryParams['$select'] = $this->apiClient->getSerializer()->toQueryValue($select);
        }
        // query params
        if ($expand !== null) {
            $queryParams['$expand'] = $this->apiClient->getSerializer()->toQueryValue($expand);
        }
        // query params
        if ($maxresults !== null) {
            $queryParams['maxresults'] = $this->apiClient->getSerializer()->toQueryValue($maxresults);
        }
        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Progrupa\Azure\Model\CloudJobListResult',
                '/jobs'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Progrupa\Azure\Model\CloudJobListResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\CloudJobListResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation jobListFromJobSchedule
     *
     * Lists the jobs that have been created under the specified job schedule.
     *
     * @param string $job_schedule_id The ID of the job schedule from which you want to get a list of jobs. (required)
     * @param string $api_version Client API Version. (required)
     * @param string $filter An OData $filter clause. (optional)
     * @param string $select An OData $select clause. (optional)
     * @param string $expand An OData $expand clause. (optional)
     * @param int $maxresults The maximum number of items to return in the response. A maximum of 1000 jobs can be returned. (optional, default to 1000)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return \Progrupa\Azure\Model\CloudJobListResult
     */
    public function jobListFromJobSchedule($job_schedule_id, $api_version = Version::NAME, $filter = null, $select = null, $expand = null, $maxresults = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        list($response) = $this->jobListFromJobScheduleWithHttpInfo($job_schedule_id, $api_version, $filter, $select, $expand, $maxresults, $timeout, $client_request_id, $return_client_request_id, $ocp_date);
        return $response;
    }

    /**
     * Operation jobListFromJobScheduleWithHttpInfo
     *
     * Lists the jobs that have been created under the specified job schedule.
     *
     * @param string $job_schedule_id The ID of the job schedule from which you want to get a list of jobs. (required)
     * @param string $api_version Client API Version. (required)
     * @param string $filter An OData $filter clause. (optional)
     * @param string $select An OData $select clause. (optional)
     * @param string $expand An OData $expand clause. (optional)
     * @param int $maxresults The maximum number of items to return in the response. A maximum of 1000 jobs can be returned. (optional, default to 1000)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of \Progrupa\Azure\Model\CloudJobListResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function jobListFromJobScheduleWithHttpInfo($job_schedule_id, $api_version = Version::NAME, $filter = null, $select = null, $expand = null, $maxresults = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        // verify the required parameter 'job_schedule_id' is set
        if ($job_schedule_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_schedule_id when calling jobListFromJobSchedule');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling jobListFromJobSchedule');
        }
        if (!is_null($maxresults) && ($maxresults > 1000)) {
            throw new \InvalidArgumentException('invalid value for "$maxresults" when calling JobsApi.jobListFromJobSchedule, must be smaller than or equal to 1000.');
        }
        if (!is_null($maxresults) && ($maxresults < 1)) {
            throw new \InvalidArgumentException('invalid value for "$maxresults" when calling JobsApi.jobListFromJobSchedule, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/jobschedules/{jobScheduleId}/jobs";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($filter !== null) {
            $queryParams['$filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // query params
        if ($select !== null) {
            $queryParams['$select'] = $this->apiClient->getSerializer()->toQueryValue($select);
        }
        // query params
        if ($expand !== null) {
            $queryParams['$expand'] = $this->apiClient->getSerializer()->toQueryValue($expand);
        }
        // query params
        if ($maxresults !== null) {
            $queryParams['maxresults'] = $this->apiClient->getSerializer()->toQueryValue($maxresults);
        }
        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // path params
        if ($job_schedule_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobScheduleId" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_schedule_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Progrupa\Azure\Model\CloudJobListResult',
                '/jobschedules/{jobScheduleId}/jobs'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Progrupa\Azure\Model\CloudJobListResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\CloudJobListResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation jobListPreparationAndReleaseTaskStatus
     *
     * Lists the execution status of the Job Preparation and Job Release task for the specified job across the compute nodes where the job has run.
     *
     * @param string $job_id The ID of the job. (required)
     * @param string $api_version Client API Version. (required)
     * @param string $filter An OData $filter clause. (optional)
     * @param string $select An OData $select clause. (optional)
     * @param int $maxresults The maximum number of items to return in the response. A maximum of 1000 tasks can be returned. (optional, default to 1000)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return \Progrupa\Azure\Model\CloudJobListPreparationAndReleaseTaskStatusResult
     */
    public function jobListPreparationAndReleaseTaskStatus($job_id, $api_version = Version::NAME, $filter = null, $select = null, $maxresults = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        list($response) = $this->jobListPreparationAndReleaseTaskStatusWithHttpInfo($job_id, $api_version, $filter, $select, $maxresults, $timeout, $client_request_id, $return_client_request_id, $ocp_date);
        return $response;
    }

    /**
     * Operation jobListPreparationAndReleaseTaskStatusWithHttpInfo
     *
     * Lists the execution status of the Job Preparation and Job Release task for the specified job across the compute nodes where the job has run.
     *
     * @param string $job_id The ID of the job. (required)
     * @param string $api_version Client API Version. (required)
     * @param string $filter An OData $filter clause. (optional)
     * @param string $select An OData $select clause. (optional)
     * @param int $maxresults The maximum number of items to return in the response. A maximum of 1000 tasks can be returned. (optional, default to 1000)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of \Progrupa\Azure\Model\CloudJobListPreparationAndReleaseTaskStatusResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function jobListPreparationAndReleaseTaskStatusWithHttpInfo($job_id, $api_version = Version::NAME, $filter = null, $select = null, $maxresults = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling jobListPreparationAndReleaseTaskStatus');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling jobListPreparationAndReleaseTaskStatus');
        }
        if (!is_null($maxresults) && ($maxresults > 1000)) {
            throw new \InvalidArgumentException('invalid value for "$maxresults" when calling JobsApi.jobListPreparationAndReleaseTaskStatus, must be smaller than or equal to 1000.');
        }
        if (!is_null($maxresults) && ($maxresults < 1)) {
            throw new \InvalidArgumentException('invalid value for "$maxresults" when calling JobsApi.jobListPreparationAndReleaseTaskStatus, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/jobs/{jobId}/jobpreparationandreleasetaskstatus";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($filter !== null) {
            $queryParams['$filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // query params
        if ($select !== null) {
            $queryParams['$select'] = $this->apiClient->getSerializer()->toQueryValue($select);
        }
        // query params
        if ($maxresults !== null) {
            $queryParams['maxresults'] = $this->apiClient->getSerializer()->toQueryValue($maxresults);
        }
        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobId" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Progrupa\Azure\Model\CloudJobListPreparationAndReleaseTaskStatusResult',
                '/jobs/{jobId}/jobpreparationandreleasetaskstatus'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Progrupa\Azure\Model\CloudJobListPreparationAndReleaseTaskStatusResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\CloudJobListPreparationAndReleaseTaskStatusResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation jobPatch
     *
     * Updates the properties of the specified job.
     *
     * @param string $job_id The ID of the job whose properties you want to update. (required)
     * @param \Progrupa\Azure\Model\JobPatchParameter $job_patch_parameter The parameters for the request. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $if_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag is an exact match as specified. (optional)
     * @param string $if_none_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag does not match the specified ETag. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return void
     */
    public function jobPatch($job_id, $job_patch_parameter, $api_version = Version::NAME, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $if_match = null, $if_none_match = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        list($response) = $this->jobPatchWithHttpInfo($job_id, $job_patch_parameter, $api_version, $timeout, $client_request_id, $return_client_request_id, $ocp_date, $if_match, $if_none_match, $if_modified_since, $if_unmodified_since);
        return $response;
    }

    /**
     * Operation jobPatchWithHttpInfo
     *
     * Updates the properties of the specified job.
     *
     * @param string $job_id The ID of the job whose properties you want to update. (required)
     * @param \Progrupa\Azure\Model\JobPatchParameter $job_patch_parameter The parameters for the request. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $if_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag is an exact match as specified. (optional)
     * @param string $if_none_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag does not match the specified ETag. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function jobPatchWithHttpInfo($job_id, $job_patch_parameter, $api_version = Version::NAME, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $if_match = null, $if_none_match = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling jobPatch');
        }
        // verify the required parameter 'job_patch_parameter' is set
        if ($job_patch_parameter === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_patch_parameter when calling jobPatch');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling jobPatch');
        }
        // parse inputs
        $resourcePath = "/jobs/{jobId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_match);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_none_match);
        }
        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_modified_since);
        }
        // header params
        if ($if_unmodified_since !== null) {
            $headerParams['If-Unmodified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_unmodified_since);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobId" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($job_patch_parameter)) {
            $_tempBody = $job_patch_parameter;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/jobs/{jobId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation jobTerminate
     *
     * Terminates the specified job, marking it as completed.
     *
     * @param string $job_id The ID of the job to terminate. (required)
     * @param string $api_version Client API Version. (required)
     * @param \Progrupa\Azure\Model\JobTerminateParameter $job_terminate_parameter The parameters for the request. (optional)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $if_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag is an exact match as specified. (optional)
     * @param string $if_none_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag does not match the specified ETag. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return void
     */
    public function jobTerminate($job_id, $api_version = Version::NAME, $job_terminate_parameter = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $if_match = null, $if_none_match = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        list($response) = $this->jobTerminateWithHttpInfo($job_id, $api_version, $job_terminate_parameter, $timeout, $client_request_id, $return_client_request_id, $ocp_date, $if_match, $if_none_match, $if_modified_since, $if_unmodified_since);
        return $response;
    }

    /**
     * Operation jobTerminateWithHttpInfo
     *
     * Terminates the specified job, marking it as completed.
     *
     * @param string $job_id The ID of the job to terminate. (required)
     * @param string $api_version Client API Version. (required)
     * @param \Progrupa\Azure\Model\JobTerminateParameter $job_terminate_parameter The parameters for the request. (optional)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $if_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag is an exact match as specified. (optional)
     * @param string $if_none_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag does not match the specified ETag. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function jobTerminateWithHttpInfo($job_id, $api_version = Version::NAME, $job_terminate_parameter = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $if_match = null, $if_none_match = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling jobTerminate');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling jobTerminate');
        }
        // parse inputs
        $resourcePath = "/jobs/{jobId}/terminate";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_match);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_none_match);
        }
        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_modified_since);
        }
        // header params
        if ($if_unmodified_since !== null) {
            $headerParams['If-Unmodified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_unmodified_since);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobId" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($job_terminate_parameter)) {
            $_tempBody = $job_terminate_parameter;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/jobs/{jobId}/terminate'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation jobUpdate
     *
     * Updates the properties of the specified job.
     *
     * @param string $job_id The ID of the job whose properties you want to update. (required)
     * @param \Progrupa\Azure\Model\JobUpdateParameter $job_update_parameter The parameters for the request. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $if_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag is an exact match as specified. (optional)
     * @param string $if_none_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag does not match the specified ETag. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return void
     */
    public function jobUpdate($job_id, $job_update_parameter, $api_version = Version::NAME, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $if_match = null, $if_none_match = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        list($response) = $this->jobUpdateWithHttpInfo($job_id, $job_update_parameter, $api_version, $timeout, $client_request_id, $return_client_request_id, $ocp_date, $if_match, $if_none_match, $if_modified_since, $if_unmodified_since);
        return $response;
    }

    /**
     * Operation jobUpdateWithHttpInfo
     *
     * Updates the properties of the specified job.
     *
     * @param string $job_id The ID of the job whose properties you want to update. (required)
     * @param \Progrupa\Azure\Model\JobUpdateParameter $job_update_parameter The parameters for the request. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $if_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag is an exact match as specified. (optional)
     * @param string $if_none_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag does not match the specified ETag. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function jobUpdateWithHttpInfo($job_id, $job_update_parameter, $api_version = Version::NAME, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $if_match = null, $if_none_match = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling jobUpdate');
        }
        // verify the required parameter 'job_update_parameter' is set
        if ($job_update_parameter === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_update_parameter when calling jobUpdate');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling jobUpdate');
        }
        // parse inputs
        $resourcePath = "/jobs/{jobId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_match);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_none_match);
        }
        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_modified_since);
        }
        // header params
        if ($if_unmodified_since !== null) {
            $headerParams['If-Unmodified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_unmodified_since);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobId" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($job_update_parameter)) {
            $_tempBody = $job_update_parameter;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/jobs/{jobId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
