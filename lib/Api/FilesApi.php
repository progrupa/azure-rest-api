<?php
/**
 * FilesApi
 * PHP version 5
 *
 * @category Class
 * @package  Progrupa\Azure
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BatchService
 *
 * A client for issuing REST requests to the Azure Batch service.
 *
 * OpenAPI spec version: 2016-07-01.3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Progrupa\Azure\Api;

use \Progrupa\Azure\ApiClient;
use \Progrupa\Azure\ApiException;
use \Progrupa\Azure\Configuration;
use \Progrupa\Azure\ObjectSerializer;

/**
 * FilesApi Class Doc Comment
 *
 * @category Class
 * @package  Progrupa\Azure
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FilesApi
{
    /**
     * API Client
     *
     * @var \Progrupa\Azure\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Progrupa\Azure\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Progrupa\Azure\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Progrupa\Azure\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Progrupa\Azure\ApiClient $apiClient set the API client
     *
     * @return FilesApi
     */
    public function setApiClient(\Progrupa\Azure\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation fileDeleteFromComputeNode
     *
     * Deletes the specified task file from the compute node.
     *
     * @param string $pool_id The ID of the pool that contains the compute node. (required)
     * @param string $node_id The ID of the compute node from which you want to delete the file. (required)
     * @param string $file_name The path to the file that you want to delete. (required)
     * @param string $api_version Client API Version. (required)
     * @param bool $recursive Whether to delete children of a directory. If the fileName parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. (optional)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return void
     */
    public function fileDeleteFromComputeNode($pool_id, $node_id, $file_name, $api_version = Version::NAME, $recursive = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        list($response) = $this->fileDeleteFromComputeNodeWithHttpInfo($pool_id, $node_id, $file_name, $api_version, $recursive, $timeout, $client_request_id, $return_client_request_id, $ocp_date);
        return $response;
    }

    /**
     * Operation fileDeleteFromComputeNodeWithHttpInfo
     *
     * Deletes the specified task file from the compute node.
     *
     * @param string $pool_id The ID of the pool that contains the compute node. (required)
     * @param string $node_id The ID of the compute node from which you want to delete the file. (required)
     * @param string $file_name The path to the file that you want to delete. (required)
     * @param string $api_version Client API Version. (required)
     * @param bool $recursive Whether to delete children of a directory. If the fileName parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. (optional)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function fileDeleteFromComputeNodeWithHttpInfo($pool_id, $node_id, $file_name, $api_version = Version::NAME, $recursive = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pool_id when calling fileDeleteFromComputeNode');
        }
        // verify the required parameter 'node_id' is set
        if ($node_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $node_id when calling fileDeleteFromComputeNode');
        }
        // verify the required parameter 'file_name' is set
        if ($file_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file_name when calling fileDeleteFromComputeNode');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling fileDeleteFromComputeNode');
        }
        // parse inputs
        $resourcePath = "/pools/{poolId}/nodes/{nodeId}/files/{fileName}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($recursive !== null) {
            $queryParams['recursive'] = $this->apiClient->getSerializer()->toQueryValue($recursive);
        }
        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                "{" . "poolId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pool_id),
                $resourcePath
            );
        }
        // path params
        if ($node_id !== null) {
            $resourcePath = str_replace(
                "{" . "nodeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($node_id),
                $resourcePath
            );
        }
        // path params
        if ($file_name !== null) {
            $resourcePath = str_replace(
                "{" . "fileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($file_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/pools/{poolId}/nodes/{nodeId}/files/{fileName}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fileDeleteFromTask
     *
     * Deletes the specified task file from the compute node where the task ran.
     *
     * @param string $job_id The ID of the job that contains the task. (required)
     * @param string $task_id The ID of the task whose file you want to delete. (required)
     * @param string $file_name The path to the task file that you want to delete. (required)
     * @param string $api_version Client API Version. (required)
     * @param bool $recursive Whether to delete children of a directory. If the fileName parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. (optional)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return void
     */
    public function fileDeleteFromTask($job_id, $task_id, $file_name, $api_version = Version::NAME, $recursive = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        list($response) = $this->fileDeleteFromTaskWithHttpInfo($job_id, $task_id, $file_name, $api_version, $recursive, $timeout, $client_request_id, $return_client_request_id, $ocp_date);
        return $response;
    }

    /**
     * Operation fileDeleteFromTaskWithHttpInfo
     *
     * Deletes the specified task file from the compute node where the task ran.
     *
     * @param string $job_id The ID of the job that contains the task. (required)
     * @param string $task_id The ID of the task whose file you want to delete. (required)
     * @param string $file_name The path to the task file that you want to delete. (required)
     * @param string $api_version Client API Version. (required)
     * @param bool $recursive Whether to delete children of a directory. If the fileName parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. (optional)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function fileDeleteFromTaskWithHttpInfo($job_id, $task_id, $file_name, $api_version = Version::NAME, $recursive = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling fileDeleteFromTask');
        }
        // verify the required parameter 'task_id' is set
        if ($task_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $task_id when calling fileDeleteFromTask');
        }
        // verify the required parameter 'file_name' is set
        if ($file_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file_name when calling fileDeleteFromTask');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling fileDeleteFromTask');
        }
        // parse inputs
        $resourcePath = "/jobs/{jobId}/tasks/{taskId}/files/{fileName}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($recursive !== null) {
            $queryParams['recursive'] = $this->apiClient->getSerializer()->toQueryValue($recursive);
        }
        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobId" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                "{" . "taskId" . "}",
                $this->apiClient->getSerializer()->toPathValue($task_id),
                $resourcePath
            );
        }
        // path params
        if ($file_name !== null) {
            $resourcePath = str_replace(
                "{" . "fileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($file_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/jobs/{jobId}/tasks/{taskId}/files/{fileName}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fileGetFromComputeNode
     *
     * 
     *
     * @param string $pool_id The ID of the pool that contains the compute node. (required)
     * @param string $node_id The ID of the compute node that contains the file. (required)
     * @param string $file_name The path to the task file that you want to get the content of. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $ocp_range The byte range to be retrieved. The default is to retrieve the entire file. The format is bytes&#x3D;startRange-endRange. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function fileGetFromComputeNode($pool_id, $node_id, $file_name, $api_version = Version::NAME, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $ocp_range = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        list($response) = $this->fileGetFromComputeNodeWithHttpInfo($pool_id, $node_id, $file_name, $api_version, $timeout, $client_request_id, $return_client_request_id, $ocp_date, $ocp_range, $if_modified_since, $if_unmodified_since);
        return $response;
    }

    /**
     * Operation fileGetFromComputeNodeWithHttpInfo
     *
     * 
     *
     * @param string $pool_id The ID of the pool that contains the compute node. (required)
     * @param string $node_id The ID of the compute node that contains the file. (required)
     * @param string $file_name The path to the task file that you want to get the content of. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $ocp_range The byte range to be retrieved. The default is to retrieve the entire file. The format is bytes&#x3D;startRange-endRange. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function fileGetFromComputeNodeWithHttpInfo($pool_id, $node_id, $file_name, $api_version = Version::NAME, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $ocp_range = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pool_id when calling fileGetFromComputeNode');
        }
        // verify the required parameter 'node_id' is set
        if ($node_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $node_id when calling fileGetFromComputeNode');
        }
        // verify the required parameter 'file_name' is set
        if ($file_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file_name when calling fileGetFromComputeNode');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling fileGetFromComputeNode');
        }
        // parse inputs
        $resourcePath = "/pools/{poolId}/nodes/{nodeId}/files/{fileName}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // header params
        if ($ocp_range !== null) {
            $headerParams['ocp-range'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_range);
        }
        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_modified_since);
        }
        // header params
        if ($if_unmodified_since !== null) {
            $headerParams['If-Unmodified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_unmodified_since);
        }
        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                "{" . "poolId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pool_id),
                $resourcePath
            );
        }
        // path params
        if ($node_id !== null) {
            $resourcePath = str_replace(
                "{" . "nodeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($node_id),
                $resourcePath
            );
        }
        // path params
        if ($file_name !== null) {
            $resourcePath = str_replace(
                "{" . "fileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($file_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/pools/{poolId}/nodes/{nodeId}/files/{fileName}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fileGetFromTask
     *
     * 
     *
     * @param string $job_id The ID of the job that contains the task. (required)
     * @param string $task_id The ID of the task whose file you want to retrieve. (required)
     * @param string $file_name The path to the task file that you want to get the content of. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $ocp_range The byte range to be retrieved. The default is to retrieve the entire file. The format is bytes&#x3D;startRange-endRange. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function fileGetFromTask($job_id, $task_id, $file_name, $api_version = Version::NAME, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $ocp_range = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        list($response) = $this->fileGetFromTaskWithHttpInfo($job_id, $task_id, $file_name, $api_version, $timeout, $client_request_id, $return_client_request_id, $ocp_date, $ocp_range, $if_modified_since, $if_unmodified_since);
        return $response;
    }

    /**
     * Operation fileGetFromTaskWithHttpInfo
     *
     * 
     *
     * @param string $job_id The ID of the job that contains the task. (required)
     * @param string $task_id The ID of the task whose file you want to retrieve. (required)
     * @param string $file_name The path to the task file that you want to get the content of. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $ocp_range The byte range to be retrieved. The default is to retrieve the entire file. The format is bytes&#x3D;startRange-endRange. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function fileGetFromTaskWithHttpInfo($job_id, $task_id, $file_name, $api_version = Version::NAME, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $ocp_range = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling fileGetFromTask');
        }
        // verify the required parameter 'task_id' is set
        if ($task_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $task_id when calling fileGetFromTask');
        }
        // verify the required parameter 'file_name' is set
        if ($file_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file_name when calling fileGetFromTask');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling fileGetFromTask');
        }
        // parse inputs
        $resourcePath = "/jobs/{jobId}/tasks/{taskId}/files/{fileName}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // header params
        if ($ocp_range !== null) {
            $headerParams['ocp-range'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_range);
        }
        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_modified_since);
        }
        // header params
        if ($if_unmodified_since !== null) {
            $headerParams['If-Unmodified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_unmodified_since);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobId" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                "{" . "taskId" . "}",
                $this->apiClient->getSerializer()->toPathValue($task_id),
                $resourcePath
            );
        }
        // path params
        if ($file_name !== null) {
            $resourcePath = str_replace(
                "{" . "fileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($file_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/jobs/{jobId}/tasks/{taskId}/files/{fileName}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fileGetNodeFilePropertiesFromComputeNode
     *
     * 
     *
     * @param string $pool_id The ID of the pool that contains the compute node. (required)
     * @param string $node_id The ID of the compute node that contains the file. (required)
     * @param string $file_name The path to the compute node file that you want to get the properties of. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return void
     */
    public function fileGetNodeFilePropertiesFromComputeNode($pool_id, $node_id, $file_name, $api_version = Version::NAME, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        list($response) = $this->fileGetNodeFilePropertiesFromComputeNodeWithHttpInfo($pool_id, $node_id, $file_name, $api_version, $timeout, $client_request_id, $return_client_request_id, $ocp_date, $if_modified_since, $if_unmodified_since);
        return $response;
    }

    /**
     * Operation fileGetNodeFilePropertiesFromComputeNodeWithHttpInfo
     *
     * 
     *
     * @param string $pool_id The ID of the pool that contains the compute node. (required)
     * @param string $node_id The ID of the compute node that contains the file. (required)
     * @param string $file_name The path to the compute node file that you want to get the properties of. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function fileGetNodeFilePropertiesFromComputeNodeWithHttpInfo($pool_id, $node_id, $file_name, $api_version = Version::NAME, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pool_id when calling fileGetNodeFilePropertiesFromComputeNode');
        }
        // verify the required parameter 'node_id' is set
        if ($node_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $node_id when calling fileGetNodeFilePropertiesFromComputeNode');
        }
        // verify the required parameter 'file_name' is set
        if ($file_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file_name when calling fileGetNodeFilePropertiesFromComputeNode');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling fileGetNodeFilePropertiesFromComputeNode');
        }
        // parse inputs
        $resourcePath = "/pools/{poolId}/nodes/{nodeId}/files/{fileName}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_modified_since);
        }
        // header params
        if ($if_unmodified_since !== null) {
            $headerParams['If-Unmodified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_unmodified_since);
        }
        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                "{" . "poolId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pool_id),
                $resourcePath
            );
        }
        // path params
        if ($node_id !== null) {
            $resourcePath = str_replace(
                "{" . "nodeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($node_id),
                $resourcePath
            );
        }
        // path params
        if ($file_name !== null) {
            $resourcePath = str_replace(
                "{" . "fileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($file_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/pools/{poolId}/nodes/{nodeId}/files/{fileName}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fileGetNodeFilePropertiesFromTask
     *
     * 
     *
     * @param string $job_id The ID of the job that contains the task. (required)
     * @param string $task_id The ID of the task whose file you want to get the properties of. (required)
     * @param string $file_name The path to the task file that you want to get the properties of. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return void
     */
    public function fileGetNodeFilePropertiesFromTask($job_id, $task_id, $file_name, $api_version = Version::NAME, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        list($response) = $this->fileGetNodeFilePropertiesFromTaskWithHttpInfo($job_id, $task_id, $file_name, $api_version, $timeout, $client_request_id, $return_client_request_id, $ocp_date, $if_modified_since, $if_unmodified_since);
        return $response;
    }

    /**
     * Operation fileGetNodeFilePropertiesFromTaskWithHttpInfo
     *
     * 
     *
     * @param string $job_id The ID of the job that contains the task. (required)
     * @param string $task_id The ID of the task whose file you want to get the properties of. (required)
     * @param string $file_name The path to the task file that you want to get the properties of. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function fileGetNodeFilePropertiesFromTaskWithHttpInfo($job_id, $task_id, $file_name, $api_version = Version::NAME, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling fileGetNodeFilePropertiesFromTask');
        }
        // verify the required parameter 'task_id' is set
        if ($task_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $task_id when calling fileGetNodeFilePropertiesFromTask');
        }
        // verify the required parameter 'file_name' is set
        if ($file_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file_name when calling fileGetNodeFilePropertiesFromTask');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling fileGetNodeFilePropertiesFromTask');
        }
        // parse inputs
        $resourcePath = "/jobs/{jobId}/tasks/{taskId}/files/{fileName}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_modified_since);
        }
        // header params
        if ($if_unmodified_since !== null) {
            $headerParams['If-Unmodified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_unmodified_since);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobId" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                "{" . "taskId" . "}",
                $this->apiClient->getSerializer()->toPathValue($task_id),
                $resourcePath
            );
        }
        // path params
        if ($file_name !== null) {
            $resourcePath = str_replace(
                "{" . "fileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($file_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/jobs/{jobId}/tasks/{taskId}/files/{fileName}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fileListFromComputeNode
     *
     * Lists all of the files in task directories on the specified compute node.
     *
     * @param string $pool_id The ID of the pool that contains the compute node. (required)
     * @param string $node_id The ID of the compute node whose files you want to list. (required)
     * @param string $api_version Client API Version. (required)
     * @param string $filter An OData $filter clause. (optional)
     * @param bool $recursive Whether to list children of a directory. (optional)
     * @param int $maxresults The maximum number of items to return in the response. A maximum of 1000 files can be returned. (optional, default to 1000)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return \Progrupa\Azure\Model\NodeFileListResult
     */
    public function fileListFromComputeNode($pool_id, $node_id, $api_version = Version::NAME, $filter = null, $recursive = null, $maxresults = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        list($response) = $this->fileListFromComputeNodeWithHttpInfo($pool_id, $node_id, $api_version, $filter, $recursive, $maxresults, $timeout, $client_request_id, $return_client_request_id, $ocp_date);
        return $response;
    }

    /**
     * Operation fileListFromComputeNodeWithHttpInfo
     *
     * Lists all of the files in task directories on the specified compute node.
     *
     * @param string $pool_id The ID of the pool that contains the compute node. (required)
     * @param string $node_id The ID of the compute node whose files you want to list. (required)
     * @param string $api_version Client API Version. (required)
     * @param string $filter An OData $filter clause. (optional)
     * @param bool $recursive Whether to list children of a directory. (optional)
     * @param int $maxresults The maximum number of items to return in the response. A maximum of 1000 files can be returned. (optional, default to 1000)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of \Progrupa\Azure\Model\NodeFileListResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function fileListFromComputeNodeWithHttpInfo($pool_id, $node_id, $api_version = Version::NAME, $filter = null, $recursive = null, $maxresults = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pool_id when calling fileListFromComputeNode');
        }
        // verify the required parameter 'node_id' is set
        if ($node_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $node_id when calling fileListFromComputeNode');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling fileListFromComputeNode');
        }
        if (!is_null($maxresults) && ($maxresults > 1000)) {
            throw new \InvalidArgumentException('invalid value for "$maxresults" when calling FilesApi.fileListFromComputeNode, must be smaller than or equal to 1000.');
        }
        if (!is_null($maxresults) && ($maxresults < 1)) {
            throw new \InvalidArgumentException('invalid value for "$maxresults" when calling FilesApi.fileListFromComputeNode, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/pools/{poolId}/nodes/{nodeId}/files";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($filter !== null) {
            $queryParams['$filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // query params
        if ($recursive !== null) {
            $queryParams['recursive'] = $this->apiClient->getSerializer()->toQueryValue($recursive);
        }
        // query params
        if ($maxresults !== null) {
            $queryParams['maxresults'] = $this->apiClient->getSerializer()->toQueryValue($maxresults);
        }
        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                "{" . "poolId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pool_id),
                $resourcePath
            );
        }
        // path params
        if ($node_id !== null) {
            $resourcePath = str_replace(
                "{" . "nodeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($node_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Progrupa\Azure\Model\NodeFileListResult',
                '/pools/{poolId}/nodes/{nodeId}/files'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Progrupa\Azure\Model\NodeFileListResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\NodeFileListResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fileListFromTask
     *
     * Lists the files in a task's directory on its compute node.
     *
     * @param string $job_id The ID of the job that contains the task. (required)
     * @param string $task_id The ID of the task whose files you want to list. (required)
     * @param string $api_version Client API Version. (required)
     * @param string $filter An OData $filter clause. (optional)
     * @param bool $recursive Whether to list children of a directory. This parameter can be used in combination with the filter parameter to list specific type of files. (optional)
     * @param int $maxresults The maximum number of items to return in the response. A maximum of 1000 files can be returned. (optional, default to 1000)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return \Progrupa\Azure\Model\NodeFileListResult
     */
    public function fileListFromTask($job_id, $task_id, $api_version = Version::NAME, $filter = null, $recursive = null, $maxresults = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        list($response) = $this->fileListFromTaskWithHttpInfo($job_id, $task_id, $api_version, $filter, $recursive, $maxresults, $timeout, $client_request_id, $return_client_request_id, $ocp_date);
        return $response;
    }

    /**
     * Operation fileListFromTaskWithHttpInfo
     *
     * Lists the files in a task's directory on its compute node.
     *
     * @param string $job_id The ID of the job that contains the task. (required)
     * @param string $task_id The ID of the task whose files you want to list. (required)
     * @param string $api_version Client API Version. (required)
     * @param string $filter An OData $filter clause. (optional)
     * @param bool $recursive Whether to list children of a directory. This parameter can be used in combination with the filter parameter to list specific type of files. (optional)
     * @param int $maxresults The maximum number of items to return in the response. A maximum of 1000 files can be returned. (optional, default to 1000)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of \Progrupa\Azure\Model\NodeFileListResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function fileListFromTaskWithHttpInfo($job_id, $task_id, $api_version = Version::NAME, $filter = null, $recursive = null, $maxresults = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling fileListFromTask');
        }
        // verify the required parameter 'task_id' is set
        if ($task_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $task_id when calling fileListFromTask');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling fileListFromTask');
        }
        if (!is_null($maxresults) && ($maxresults > 1000)) {
            throw new \InvalidArgumentException('invalid value for "$maxresults" when calling FilesApi.fileListFromTask, must be smaller than or equal to 1000.');
        }
        if (!is_null($maxresults) && ($maxresults < 1)) {
            throw new \InvalidArgumentException('invalid value for "$maxresults" when calling FilesApi.fileListFromTask, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/jobs/{jobId}/tasks/{taskId}/files";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($filter !== null) {
            $queryParams['$filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // query params
        if ($recursive !== null) {
            $queryParams['recursive'] = $this->apiClient->getSerializer()->toQueryValue($recursive);
        }
        // query params
        if ($maxresults !== null) {
            $queryParams['maxresults'] = $this->apiClient->getSerializer()->toQueryValue($maxresults);
        }
        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobId" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                "{" . "taskId" . "}",
                $this->apiClient->getSerializer()->toPathValue($task_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Progrupa\Azure\Model\NodeFileListResult',
                '/jobs/{jobId}/tasks/{taskId}/files'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Progrupa\Azure\Model\NodeFileListResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\NodeFileListResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
