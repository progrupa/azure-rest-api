<?php
/**
 * PoolsApi
 * PHP version 5
 *
 * @category Class
 * @package  Progrupa\Azure
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BatchService
 *
 * A client for issuing REST requests to the Azure Batch service.
 *
 * OpenAPI spec version: 2016-07-01.3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Progrupa\Azure\Api;

use \Progrupa\Azure\ApiClient;
use \Progrupa\Azure\ApiException;
use \Progrupa\Azure\Configuration;
use \Progrupa\Azure\ObjectSerializer;

/**
 * PoolsApi Class Doc Comment
 *
 * @category Class
 * @package  Progrupa\Azure
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PoolsApi
{
    /**
     * API Client
     *
     * @var \Progrupa\Azure\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Progrupa\Azure\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Progrupa\Azure\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Progrupa\Azure\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Progrupa\Azure\ApiClient $apiClient set the API client
     *
     * @return PoolsApi
     */
    public function setApiClient(\Progrupa\Azure\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation poolAdd
     *
     * Adds a pool to the specified account.
     *
     * @param \Progrupa\Azure\Model\PoolAddParameter $pool The pool to be added. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return void
     */
    public function poolAdd($pool, $api_version, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        list($response) = $this->poolAddWithHttpInfo($pool, $api_version, $timeout, $client_request_id, $return_client_request_id, $ocp_date);
        return $response;
    }

    /**
     * Operation poolAddWithHttpInfo
     *
     * Adds a pool to the specified account.
     *
     * @param \Progrupa\Azure\Model\PoolAddParameter $pool The pool to be added. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function poolAddWithHttpInfo($pool, $api_version, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        // verify the required parameter 'pool' is set
        if ($pool === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pool when calling poolAdd');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling poolAdd');
        }
        // parse inputs
        $resourcePath = "/pools";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($pool)) {
            $_tempBody = $pool;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/pools'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation poolDelete
     *
     * Deletes a pool from the specified account.
     *
     * @param string $pool_id The ID of the pool to delete. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $if_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag is an exact match as specified. (optional)
     * @param string $if_none_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag does not match the specified ETag. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return void
     */
    public function poolDelete($pool_id, $api_version, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $if_match = null, $if_none_match = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        list($response) = $this->poolDeleteWithHttpInfo($pool_id, $api_version, $timeout, $client_request_id, $return_client_request_id, $ocp_date, $if_match, $if_none_match, $if_modified_since, $if_unmodified_since);
        return $response;
    }

    /**
     * Operation poolDeleteWithHttpInfo
     *
     * Deletes a pool from the specified account.
     *
     * @param string $pool_id The ID of the pool to delete. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $if_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag is an exact match as specified. (optional)
     * @param string $if_none_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag does not match the specified ETag. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function poolDeleteWithHttpInfo($pool_id, $api_version, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $if_match = null, $if_none_match = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pool_id when calling poolDelete');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling poolDelete');
        }
        // parse inputs
        $resourcePath = "/pools/{poolId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_match);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_none_match);
        }
        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_modified_since);
        }
        // header params
        if ($if_unmodified_since !== null) {
            $headerParams['If-Unmodified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_unmodified_since);
        }
        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                "{" . "poolId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pool_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/pools/{poolId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation poolDisableAutoScale
     *
     * Disables automatic scaling for a pool.
     *
     * @param string $pool_id The ID of the pool on which to disable automatic scaling. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return void
     */
    public function poolDisableAutoScale($pool_id, $api_version, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        list($response) = $this->poolDisableAutoScaleWithHttpInfo($pool_id, $api_version, $timeout, $client_request_id, $return_client_request_id, $ocp_date);
        return $response;
    }

    /**
     * Operation poolDisableAutoScaleWithHttpInfo
     *
     * Disables automatic scaling for a pool.
     *
     * @param string $pool_id The ID of the pool on which to disable automatic scaling. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function poolDisableAutoScaleWithHttpInfo($pool_id, $api_version, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pool_id when calling poolDisableAutoScale');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling poolDisableAutoScale');
        }
        // parse inputs
        $resourcePath = "/pools/{poolId}/disableautoscale";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                "{" . "poolId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pool_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/pools/{poolId}/disableautoscale'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation poolEnableAutoScale
     *
     * Enables automatic scaling for a pool.
     *
     * @param string $pool_id The ID of the pool on which to enable automatic scaling. (required)
     * @param \Progrupa\Azure\Model\PoolEnableAutoScaleParameter $pool_enable_auto_scale_parameter The parameters for the request. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $if_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag is an exact match as specified. (optional)
     * @param string $if_none_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag does not match the specified ETag. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return void
     */
    public function poolEnableAutoScale($pool_id, $pool_enable_auto_scale_parameter, $api_version, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $if_match = null, $if_none_match = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        list($response) = $this->poolEnableAutoScaleWithHttpInfo($pool_id, $pool_enable_auto_scale_parameter, $api_version, $timeout, $client_request_id, $return_client_request_id, $ocp_date, $if_match, $if_none_match, $if_modified_since, $if_unmodified_since);
        return $response;
    }

    /**
     * Operation poolEnableAutoScaleWithHttpInfo
     *
     * Enables automatic scaling for a pool.
     *
     * @param string $pool_id The ID of the pool on which to enable automatic scaling. (required)
     * @param \Progrupa\Azure\Model\PoolEnableAutoScaleParameter $pool_enable_auto_scale_parameter The parameters for the request. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $if_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag is an exact match as specified. (optional)
     * @param string $if_none_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag does not match the specified ETag. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function poolEnableAutoScaleWithHttpInfo($pool_id, $pool_enable_auto_scale_parameter, $api_version, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $if_match = null, $if_none_match = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pool_id when calling poolEnableAutoScale');
        }
        // verify the required parameter 'pool_enable_auto_scale_parameter' is set
        if ($pool_enable_auto_scale_parameter === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pool_enable_auto_scale_parameter when calling poolEnableAutoScale');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling poolEnableAutoScale');
        }
        // parse inputs
        $resourcePath = "/pools/{poolId}/enableautoscale";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_match);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_none_match);
        }
        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_modified_since);
        }
        // header params
        if ($if_unmodified_since !== null) {
            $headerParams['If-Unmodified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_unmodified_since);
        }
        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                "{" . "poolId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pool_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($pool_enable_auto_scale_parameter)) {
            $_tempBody = $pool_enable_auto_scale_parameter;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/pools/{poolId}/enableautoscale'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation poolEvaluateAutoScale
     *
     * Gets the result of evaluating an automatic scaling formula on the pool.
     *
     * @param string $pool_id The ID of the pool on which to evaluate the automatic scaling formula. (required)
     * @param \Progrupa\Azure\Model\PoolEvaluateAutoScaleParameter $pool_evaluate_auto_scale_parameter The parameters for the request. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return \Progrupa\Azure\Model\AutoScaleRun
     */
    public function poolEvaluateAutoScale($pool_id, $pool_evaluate_auto_scale_parameter, $api_version, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        list($response) = $this->poolEvaluateAutoScaleWithHttpInfo($pool_id, $pool_evaluate_auto_scale_parameter, $api_version, $timeout, $client_request_id, $return_client_request_id, $ocp_date);
        return $response;
    }

    /**
     * Operation poolEvaluateAutoScaleWithHttpInfo
     *
     * Gets the result of evaluating an automatic scaling formula on the pool.
     *
     * @param string $pool_id The ID of the pool on which to evaluate the automatic scaling formula. (required)
     * @param \Progrupa\Azure\Model\PoolEvaluateAutoScaleParameter $pool_evaluate_auto_scale_parameter The parameters for the request. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of \Progrupa\Azure\Model\AutoScaleRun, HTTP status code, HTTP response headers (array of strings)
     */
    public function poolEvaluateAutoScaleWithHttpInfo($pool_id, $pool_evaluate_auto_scale_parameter, $api_version, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pool_id when calling poolEvaluateAutoScale');
        }
        // verify the required parameter 'pool_evaluate_auto_scale_parameter' is set
        if ($pool_evaluate_auto_scale_parameter === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pool_evaluate_auto_scale_parameter when calling poolEvaluateAutoScale');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling poolEvaluateAutoScale');
        }
        // parse inputs
        $resourcePath = "/pools/{poolId}/evaluateautoscale";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                "{" . "poolId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pool_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($pool_evaluate_auto_scale_parameter)) {
            $_tempBody = $pool_evaluate_auto_scale_parameter;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Progrupa\Azure\Model\AutoScaleRun',
                '/pools/{poolId}/evaluateautoscale'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Progrupa\Azure\Model\AutoScaleRun', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\AutoScaleRun', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation poolExists
     *
     * 
     *
     * @param string $pool_id The ID of the pool to get. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $if_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag is an exact match as specified. (optional)
     * @param string $if_none_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag does not match the specified ETag. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return void
     */
    public function poolExists($pool_id, $api_version, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $if_match = null, $if_none_match = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        list($response) = $this->poolExistsWithHttpInfo($pool_id, $api_version, $timeout, $client_request_id, $return_client_request_id, $ocp_date, $if_match, $if_none_match, $if_modified_since, $if_unmodified_since);
        return $response;
    }

    /**
     * Operation poolExistsWithHttpInfo
     *
     * 
     *
     * @param string $pool_id The ID of the pool to get. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $if_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag is an exact match as specified. (optional)
     * @param string $if_none_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag does not match the specified ETag. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function poolExistsWithHttpInfo($pool_id, $api_version, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $if_match = null, $if_none_match = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pool_id when calling poolExists');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling poolExists');
        }
        // parse inputs
        $resourcePath = "/pools/{poolId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_match);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_none_match);
        }
        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_modified_since);
        }
        // header params
        if ($if_unmodified_since !== null) {
            $headerParams['If-Unmodified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_unmodified_since);
        }
        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                "{" . "poolId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pool_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/pools/{poolId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation poolGet
     *
     * 
     *
     * @param string $pool_id The ID of the pool to get. (required)
     * @param string $api_version Client API Version. (required)
     * @param string $select An OData $select clause. (optional)
     * @param string $expand An OData $expand clause. (optional)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $if_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag is an exact match as specified. (optional)
     * @param string $if_none_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag does not match the specified ETag. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return \Progrupa\Azure\Model\CloudPool
     */
    public function poolGet($pool_id, $api_version, $select = null, $expand = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $if_match = null, $if_none_match = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        list($response) = $this->poolGetWithHttpInfo($pool_id, $api_version, $select, $expand, $timeout, $client_request_id, $return_client_request_id, $ocp_date, $if_match, $if_none_match, $if_modified_since, $if_unmodified_since);
        return $response;
    }

    /**
     * Operation poolGetWithHttpInfo
     *
     * 
     *
     * @param string $pool_id The ID of the pool to get. (required)
     * @param string $api_version Client API Version. (required)
     * @param string $select An OData $select clause. (optional)
     * @param string $expand An OData $expand clause. (optional)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $if_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag is an exact match as specified. (optional)
     * @param string $if_none_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag does not match the specified ETag. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of \Progrupa\Azure\Model\CloudPool, HTTP status code, HTTP response headers (array of strings)
     */
    public function poolGetWithHttpInfo($pool_id, $api_version, $select = null, $expand = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $if_match = null, $if_none_match = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pool_id when calling poolGet');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling poolGet');
        }
        // parse inputs
        $resourcePath = "/pools/{poolId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($select !== null) {
            $queryParams['$select'] = $this->apiClient->getSerializer()->toQueryValue($select);
        }
        // query params
        if ($expand !== null) {
            $queryParams['$expand'] = $this->apiClient->getSerializer()->toQueryValue($expand);
        }
        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_match);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_none_match);
        }
        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_modified_since);
        }
        // header params
        if ($if_unmodified_since !== null) {
            $headerParams['If-Unmodified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_unmodified_since);
        }
        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                "{" . "poolId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pool_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Progrupa\Azure\Model\CloudPool',
                '/pools/{poolId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Progrupa\Azure\Model\CloudPool', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\CloudPool', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation poolGetAllPoolsLifetimeStatistics
     *
     * Gets lifetime summary statistics for all of the pools in the specified account.
     *
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return \Progrupa\Azure\Model\PoolStatistics
     */
    public function poolGetAllPoolsLifetimeStatistics($api_version, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        list($response) = $this->poolGetAllPoolsLifetimeStatisticsWithHttpInfo($api_version, $timeout, $client_request_id, $return_client_request_id, $ocp_date);
        return $response;
    }

    /**
     * Operation poolGetAllPoolsLifetimeStatisticsWithHttpInfo
     *
     * Gets lifetime summary statistics for all of the pools in the specified account.
     *
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of \Progrupa\Azure\Model\PoolStatistics, HTTP status code, HTTP response headers (array of strings)
     */
    public function poolGetAllPoolsLifetimeStatisticsWithHttpInfo($api_version, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling poolGetAllPoolsLifetimeStatistics');
        }
        // parse inputs
        $resourcePath = "/lifetimepoolstats";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Progrupa\Azure\Model\PoolStatistics',
                '/lifetimepoolstats'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Progrupa\Azure\Model\PoolStatistics', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\PoolStatistics', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation poolList
     *
     * Lists all of the pools in the specified account.
     *
     * @param string $api_version Client API Version. (required)
     * @param string $filter An OData $filter clause. (optional)
     * @param string $select An OData $select clause. (optional)
     * @param string $expand An OData $expand clause. (optional)
     * @param int $maxresults The maximum number of items to return in the response. A maximum of 1000 pools can be returned. (optional, default to 1000)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return \Progrupa\Azure\Model\CloudPoolListResult
     */
    public function poolList($api_version, $filter = null, $select = null, $expand = null, $maxresults = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        list($response) = $this->poolListWithHttpInfo($api_version, $filter, $select, $expand, $maxresults, $timeout, $client_request_id, $return_client_request_id, $ocp_date);
        return $response;
    }

    /**
     * Operation poolListWithHttpInfo
     *
     * Lists all of the pools in the specified account.
     *
     * @param string $api_version Client API Version. (required)
     * @param string $filter An OData $filter clause. (optional)
     * @param string $select An OData $select clause. (optional)
     * @param string $expand An OData $expand clause. (optional)
     * @param int $maxresults The maximum number of items to return in the response. A maximum of 1000 pools can be returned. (optional, default to 1000)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of \Progrupa\Azure\Model\CloudPoolListResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function poolListWithHttpInfo($api_version, $filter = null, $select = null, $expand = null, $maxresults = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling poolList');
        }
        if (!is_null($maxresults) && ($maxresults > 1000)) {
            throw new \InvalidArgumentException('invalid value for "$maxresults" when calling PoolsApi.poolList, must be smaller than or equal to 1000.');
        }
        if (!is_null($maxresults) && ($maxresults < 1)) {
            throw new \InvalidArgumentException('invalid value for "$maxresults" when calling PoolsApi.poolList, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/pools";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($filter !== null) {
            $queryParams['$filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // query params
        if ($select !== null) {
            $queryParams['$select'] = $this->apiClient->getSerializer()->toQueryValue($select);
        }
        // query params
        if ($expand !== null) {
            $queryParams['$expand'] = $this->apiClient->getSerializer()->toQueryValue($expand);
        }
        // query params
        if ($maxresults !== null) {
            $queryParams['maxresults'] = $this->apiClient->getSerializer()->toQueryValue($maxresults);
        }
        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Progrupa\Azure\Model\CloudPoolListResult',
                '/pools'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Progrupa\Azure\Model\CloudPoolListResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\CloudPoolListResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation poolListPoolUsageMetrics
     *
     * Lists the usage metrics, aggregated by pool across individual time intervals, for the specified account.
     *
     * @param string $api_version Client API Version. (required)
     * @param \DateTime $starttime The earliest time from which to include metrics. This must be at least two and a half hours before the current time. If not specified this defaults to the start time of the last aggregation interval currently available. (optional)
     * @param \DateTime $endtime The latest time from which to include metrics. This must be at least two hours before the current time. If not specified this defaults to the end time of the last aggregation interval currently available. (optional)
     * @param string $filter An OData $filter clause. If this is not specified the response includes all pools that existed in the account in the time range of the returned aggregation intervals. (optional)
     * @param int $maxresults The maximum number of items to return in the response. A maximum of 1000 results will be returned. (optional, default to 1000)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return \Progrupa\Azure\Model\PoolListPoolUsageMetricsResult
     */
    public function poolListPoolUsageMetrics($api_version, $starttime = null, $endtime = null, $filter = null, $maxresults = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        list($response) = $this->poolListPoolUsageMetricsWithHttpInfo($api_version, $starttime, $endtime, $filter, $maxresults, $timeout, $client_request_id, $return_client_request_id, $ocp_date);
        return $response;
    }

    /**
     * Operation poolListPoolUsageMetricsWithHttpInfo
     *
     * Lists the usage metrics, aggregated by pool across individual time intervals, for the specified account.
     *
     * @param string $api_version Client API Version. (required)
     * @param \DateTime $starttime The earliest time from which to include metrics. This must be at least two and a half hours before the current time. If not specified this defaults to the start time of the last aggregation interval currently available. (optional)
     * @param \DateTime $endtime The latest time from which to include metrics. This must be at least two hours before the current time. If not specified this defaults to the end time of the last aggregation interval currently available. (optional)
     * @param string $filter An OData $filter clause. If this is not specified the response includes all pools that existed in the account in the time range of the returned aggregation intervals. (optional)
     * @param int $maxresults The maximum number of items to return in the response. A maximum of 1000 results will be returned. (optional, default to 1000)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of \Progrupa\Azure\Model\PoolListPoolUsageMetricsResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function poolListPoolUsageMetricsWithHttpInfo($api_version, $starttime = null, $endtime = null, $filter = null, $maxresults = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling poolListPoolUsageMetrics');
        }
        if (!is_null($maxresults) && ($maxresults > 1000)) {
            throw new \InvalidArgumentException('invalid value for "$maxresults" when calling PoolsApi.poolListPoolUsageMetrics, must be smaller than or equal to 1000.');
        }
        if (!is_null($maxresults) && ($maxresults < 1)) {
            throw new \InvalidArgumentException('invalid value for "$maxresults" when calling PoolsApi.poolListPoolUsageMetrics, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/poolusagemetrics";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($starttime !== null) {
            $queryParams['starttime'] = $this->apiClient->getSerializer()->toQueryValue($starttime);
        }
        // query params
        if ($endtime !== null) {
            $queryParams['endtime'] = $this->apiClient->getSerializer()->toQueryValue($endtime);
        }
        // query params
        if ($filter !== null) {
            $queryParams['$filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // query params
        if ($maxresults !== null) {
            $queryParams['maxresults'] = $this->apiClient->getSerializer()->toQueryValue($maxresults);
        }
        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Progrupa\Azure\Model\PoolListPoolUsageMetricsResult',
                '/poolusagemetrics'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Progrupa\Azure\Model\PoolListPoolUsageMetricsResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\PoolListPoolUsageMetricsResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation poolPatch
     *
     * Updates the properties of the specified pool.
     *
     * @param string $pool_id The ID of the pool to update. (required)
     * @param \Progrupa\Azure\Model\PoolPatchParameter $pool_patch_parameter The parameters for the request. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $if_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag is an exact match as specified. (optional)
     * @param string $if_none_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag does not match the specified ETag. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return void
     */
    public function poolPatch($pool_id, $pool_patch_parameter, $api_version, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $if_match = null, $if_none_match = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        list($response) = $this->poolPatchWithHttpInfo($pool_id, $pool_patch_parameter, $api_version, $timeout, $client_request_id, $return_client_request_id, $ocp_date, $if_match, $if_none_match, $if_modified_since, $if_unmodified_since);
        return $response;
    }

    /**
     * Operation poolPatchWithHttpInfo
     *
     * Updates the properties of the specified pool.
     *
     * @param string $pool_id The ID of the pool to update. (required)
     * @param \Progrupa\Azure\Model\PoolPatchParameter $pool_patch_parameter The parameters for the request. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $if_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag is an exact match as specified. (optional)
     * @param string $if_none_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag does not match the specified ETag. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function poolPatchWithHttpInfo($pool_id, $pool_patch_parameter, $api_version, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $if_match = null, $if_none_match = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pool_id when calling poolPatch');
        }
        // verify the required parameter 'pool_patch_parameter' is set
        if ($pool_patch_parameter === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pool_patch_parameter when calling poolPatch');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling poolPatch');
        }
        // parse inputs
        $resourcePath = "/pools/{poolId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_match);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_none_match);
        }
        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_modified_since);
        }
        // header params
        if ($if_unmodified_since !== null) {
            $headerParams['If-Unmodified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_unmodified_since);
        }
        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                "{" . "poolId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pool_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($pool_patch_parameter)) {
            $_tempBody = $pool_patch_parameter;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/pools/{poolId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation poolResize
     *
     * Changes the number of compute nodes that are assigned to a pool.
     *
     * @param string $pool_id The ID of the pool to resize. (required)
     * @param \Progrupa\Azure\Model\PoolResizeParameter $pool_resize_parameter The parameters for the request. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $if_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag is an exact match as specified. (optional)
     * @param string $if_none_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag does not match the specified ETag. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return void
     */
    public function poolResize($pool_id, $pool_resize_parameter, $api_version, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $if_match = null, $if_none_match = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        list($response) = $this->poolResizeWithHttpInfo($pool_id, $pool_resize_parameter, $api_version, $timeout, $client_request_id, $return_client_request_id, $ocp_date, $if_match, $if_none_match, $if_modified_since, $if_unmodified_since);
        return $response;
    }

    /**
     * Operation poolResizeWithHttpInfo
     *
     * Changes the number of compute nodes that are assigned to a pool.
     *
     * @param string $pool_id The ID of the pool to resize. (required)
     * @param \Progrupa\Azure\Model\PoolResizeParameter $pool_resize_parameter The parameters for the request. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $if_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag is an exact match as specified. (optional)
     * @param string $if_none_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag does not match the specified ETag. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function poolResizeWithHttpInfo($pool_id, $pool_resize_parameter, $api_version, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $if_match = null, $if_none_match = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pool_id when calling poolResize');
        }
        // verify the required parameter 'pool_resize_parameter' is set
        if ($pool_resize_parameter === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pool_resize_parameter when calling poolResize');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling poolResize');
        }
        // parse inputs
        $resourcePath = "/pools/{poolId}/resize";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_match);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_none_match);
        }
        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_modified_since);
        }
        // header params
        if ($if_unmodified_since !== null) {
            $headerParams['If-Unmodified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_unmodified_since);
        }
        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                "{" . "poolId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pool_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($pool_resize_parameter)) {
            $_tempBody = $pool_resize_parameter;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/pools/{poolId}/resize'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation poolStopResize
     *
     * Stops an ongoing resize operation on the pool.
     *
     * @param string $pool_id The ID of the pool whose resizing you want to stop. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $if_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag is an exact match as specified. (optional)
     * @param string $if_none_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag does not match the specified ETag. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return void
     */
    public function poolStopResize($pool_id, $api_version, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $if_match = null, $if_none_match = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        list($response) = $this->poolStopResizeWithHttpInfo($pool_id, $api_version, $timeout, $client_request_id, $return_client_request_id, $ocp_date, $if_match, $if_none_match, $if_modified_since, $if_unmodified_since);
        return $response;
    }

    /**
     * Operation poolStopResizeWithHttpInfo
     *
     * Stops an ongoing resize operation on the pool.
     *
     * @param string $pool_id The ID of the pool whose resizing you want to stop. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $if_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag is an exact match as specified. (optional)
     * @param string $if_none_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag does not match the specified ETag. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function poolStopResizeWithHttpInfo($pool_id, $api_version, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $if_match = null, $if_none_match = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pool_id when calling poolStopResize');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling poolStopResize');
        }
        // parse inputs
        $resourcePath = "/pools/{poolId}/stopresize";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_match);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_none_match);
        }
        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_modified_since);
        }
        // header params
        if ($if_unmodified_since !== null) {
            $headerParams['If-Unmodified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_unmodified_since);
        }
        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                "{" . "poolId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pool_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/pools/{poolId}/stopresize'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation poolUpdateProperties
     *
     * Updates the properties of the specified pool.
     *
     * @param string $pool_id The ID of the pool to update. (required)
     * @param \Progrupa\Azure\Model\PoolUpdatePropertiesParameter $pool_update_properties_parameter The parameters for the request. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return void
     */
    public function poolUpdateProperties($pool_id, $pool_update_properties_parameter, $api_version, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        list($response) = $this->poolUpdatePropertiesWithHttpInfo($pool_id, $pool_update_properties_parameter, $api_version, $timeout, $client_request_id, $return_client_request_id, $ocp_date);
        return $response;
    }

    /**
     * Operation poolUpdatePropertiesWithHttpInfo
     *
     * Updates the properties of the specified pool.
     *
     * @param string $pool_id The ID of the pool to update. (required)
     * @param \Progrupa\Azure\Model\PoolUpdatePropertiesParameter $pool_update_properties_parameter The parameters for the request. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function poolUpdatePropertiesWithHttpInfo($pool_id, $pool_update_properties_parameter, $api_version, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pool_id when calling poolUpdateProperties');
        }
        // verify the required parameter 'pool_update_properties_parameter' is set
        if ($pool_update_properties_parameter === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pool_update_properties_parameter when calling poolUpdateProperties');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling poolUpdateProperties');
        }
        // parse inputs
        $resourcePath = "/pools/{poolId}/updateproperties";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                "{" . "poolId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pool_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($pool_update_properties_parameter)) {
            $_tempBody = $pool_update_properties_parameter;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/pools/{poolId}/updateproperties'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation poolUpgradeOS
     *
     * Upgrades the operating system of the specified pool.
     *
     * @param string $pool_id The ID of the pool to upgrade. (required)
     * @param \Progrupa\Azure\Model\PoolUpgradeOSParameter $pool_upgrade_os_parameter The parameters for the request. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $if_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag is an exact match as specified. (optional)
     * @param string $if_none_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag does not match the specified ETag. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return void
     */
    public function poolUpgradeOS($pool_id, $pool_upgrade_os_parameter, $api_version, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $if_match = null, $if_none_match = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        list($response) = $this->poolUpgradeOSWithHttpInfo($pool_id, $pool_upgrade_os_parameter, $api_version, $timeout, $client_request_id, $return_client_request_id, $ocp_date, $if_match, $if_none_match, $if_modified_since, $if_unmodified_since);
        return $response;
    }

    /**
     * Operation poolUpgradeOSWithHttpInfo
     *
     * Upgrades the operating system of the specified pool.
     *
     * @param string $pool_id The ID of the pool to upgrade. (required)
     * @param \Progrupa\Azure\Model\PoolUpgradeOSParameter $pool_upgrade_os_parameter The parameters for the request. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $if_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag is an exact match as specified. (optional)
     * @param string $if_none_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag does not match the specified ETag. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function poolUpgradeOSWithHttpInfo($pool_id, $pool_upgrade_os_parameter, $api_version, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $if_match = null, $if_none_match = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pool_id when calling poolUpgradeOS');
        }
        // verify the required parameter 'pool_upgrade_os_parameter' is set
        if ($pool_upgrade_os_parameter === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pool_upgrade_os_parameter when calling poolUpgradeOS');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling poolUpgradeOS');
        }
        // parse inputs
        $resourcePath = "/pools/{poolId}/upgradeos";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_match);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_none_match);
        }
        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_modified_since);
        }
        // header params
        if ($if_unmodified_since !== null) {
            $headerParams['If-Unmodified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_unmodified_since);
        }
        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                "{" . "poolId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pool_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($pool_upgrade_os_parameter)) {
            $_tempBody = $pool_upgrade_os_parameter;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/pools/{poolId}/upgradeos'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
