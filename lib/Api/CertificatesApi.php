<?php
/**
 * CertificatesApi
 * PHP version 5
 *
 * @category Class
 * @package  Progrupa\Azure
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BatchService
 *
 * A client for issuing REST requests to the Azure Batch service.
 *
 * OpenAPI spec version: 2016-07-01.3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Progrupa\Azure\Api;

use \Progrupa\Azure\ApiClient;
use \Progrupa\Azure\ApiException;
use \Progrupa\Azure\Configuration;
use \Progrupa\Azure\ObjectSerializer;

/**
 * CertificatesApi Class Doc Comment
 *
 * @category Class
 * @package  Progrupa\Azure
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CertificatesApi
{
    /**
     * API Client
     *
     * @var \Progrupa\Azure\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Progrupa\Azure\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Progrupa\Azure\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Progrupa\Azure\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Progrupa\Azure\ApiClient $apiClient set the API client
     *
     * @return CertificatesApi
     */
    public function setApiClient(\Progrupa\Azure\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation certificateAdd
     *
     * Adds a certificate to the specified account.
     *
     * @param \Progrupa\Azure\Model\CertificateAddParameter $certificate The certificate to be added. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return void
     */
    public function certificateAdd($certificate, $api_version, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        list($response) = $this->certificateAddWithHttpInfo($certificate, $api_version, $timeout, $client_request_id, $return_client_request_id, $ocp_date);
        return $response;
    }

    /**
     * Operation certificateAddWithHttpInfo
     *
     * Adds a certificate to the specified account.
     *
     * @param \Progrupa\Azure\Model\CertificateAddParameter $certificate The certificate to be added. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function certificateAddWithHttpInfo($certificate, $api_version, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        // verify the required parameter 'certificate' is set
        if ($certificate === null) {
            throw new \InvalidArgumentException('Missing the required parameter $certificate when calling certificateAdd');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling certificateAdd');
        }
        // parse inputs
        $resourcePath = "/certificates";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($certificate)) {
            $_tempBody = $certificate;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/certificates'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation certificateCancelDeletion
     *
     * Cancels a failed deletion of a certificate from the specified account.
     *
     * @param string $thumbprint_algorithm The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
     * @param string $thumbprint The thumbprint of the certificate being deleted. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return void
     */
    public function certificateCancelDeletion($thumbprint_algorithm, $thumbprint, $api_version, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        list($response) = $this->certificateCancelDeletionWithHttpInfo($thumbprint_algorithm, $thumbprint, $api_version, $timeout, $client_request_id, $return_client_request_id, $ocp_date);
        return $response;
    }

    /**
     * Operation certificateCancelDeletionWithHttpInfo
     *
     * Cancels a failed deletion of a certificate from the specified account.
     *
     * @param string $thumbprint_algorithm The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
     * @param string $thumbprint The thumbprint of the certificate being deleted. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function certificateCancelDeletionWithHttpInfo($thumbprint_algorithm, $thumbprint, $api_version, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        // verify the required parameter 'thumbprint_algorithm' is set
        if ($thumbprint_algorithm === null) {
            throw new \InvalidArgumentException('Missing the required parameter $thumbprint_algorithm when calling certificateCancelDeletion');
        }
        // verify the required parameter 'thumbprint' is set
        if ($thumbprint === null) {
            throw new \InvalidArgumentException('Missing the required parameter $thumbprint when calling certificateCancelDeletion');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling certificateCancelDeletion');
        }
        // parse inputs
        $resourcePath = "/certificates(thumbprintAlgorithm&#x3D;{thumbprintAlgorithm},thumbprint&#x3D;{thumbprint})/canceldelete";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // path params
        if ($thumbprint_algorithm !== null) {
            $resourcePath = str_replace(
                "{" . "thumbprintAlgorithm" . "}",
                $this->apiClient->getSerializer()->toPathValue($thumbprint_algorithm),
                $resourcePath
            );
        }
        // path params
        if ($thumbprint !== null) {
            $resourcePath = str_replace(
                "{" . "thumbprint" . "}",
                $this->apiClient->getSerializer()->toPathValue($thumbprint),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/certificates(thumbprintAlgorithm&#x3D;{thumbprintAlgorithm},thumbprint&#x3D;{thumbprint})/canceldelete'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation certificateDelete
     *
     * Deletes a certificate from the specified account.
     *
     * @param string $thumbprint_algorithm The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
     * @param string $thumbprint The thumbprint of the certificate to be deleted. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return void
     */
    public function certificateDelete($thumbprint_algorithm, $thumbprint, $api_version, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        list($response) = $this->certificateDeleteWithHttpInfo($thumbprint_algorithm, $thumbprint, $api_version, $timeout, $client_request_id, $return_client_request_id, $ocp_date);
        return $response;
    }

    /**
     * Operation certificateDeleteWithHttpInfo
     *
     * Deletes a certificate from the specified account.
     *
     * @param string $thumbprint_algorithm The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
     * @param string $thumbprint The thumbprint of the certificate to be deleted. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function certificateDeleteWithHttpInfo($thumbprint_algorithm, $thumbprint, $api_version, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        // verify the required parameter 'thumbprint_algorithm' is set
        if ($thumbprint_algorithm === null) {
            throw new \InvalidArgumentException('Missing the required parameter $thumbprint_algorithm when calling certificateDelete');
        }
        // verify the required parameter 'thumbprint' is set
        if ($thumbprint === null) {
            throw new \InvalidArgumentException('Missing the required parameter $thumbprint when calling certificateDelete');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling certificateDelete');
        }
        // parse inputs
        $resourcePath = "/certificates(thumbprintAlgorithm&#x3D;{thumbprintAlgorithm},thumbprint&#x3D;{thumbprint})";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // path params
        if ($thumbprint_algorithm !== null) {
            $resourcePath = str_replace(
                "{" . "thumbprintAlgorithm" . "}",
                $this->apiClient->getSerializer()->toPathValue($thumbprint_algorithm),
                $resourcePath
            );
        }
        // path params
        if ($thumbprint !== null) {
            $resourcePath = str_replace(
                "{" . "thumbprint" . "}",
                $this->apiClient->getSerializer()->toPathValue($thumbprint),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/certificates(thumbprintAlgorithm&#x3D;{thumbprintAlgorithm},thumbprint&#x3D;{thumbprint})'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation certificateGet
     *
     * 
     *
     * @param string $thumbprint_algorithm The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
     * @param string $thumbprint The thumbprint of the certificate to get. (required)
     * @param string $api_version Client API Version. (required)
     * @param string $select An OData $select clause. (optional)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return \Progrupa\Azure\Model\Certificate
     */
    public function certificateGet($thumbprint_algorithm, $thumbprint, $api_version, $select = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        list($response) = $this->certificateGetWithHttpInfo($thumbprint_algorithm, $thumbprint, $api_version, $select, $timeout, $client_request_id, $return_client_request_id, $ocp_date);
        return $response;
    }

    /**
     * Operation certificateGetWithHttpInfo
     *
     * 
     *
     * @param string $thumbprint_algorithm The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
     * @param string $thumbprint The thumbprint of the certificate to get. (required)
     * @param string $api_version Client API Version. (required)
     * @param string $select An OData $select clause. (optional)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of \Progrupa\Azure\Model\Certificate, HTTP status code, HTTP response headers (array of strings)
     */
    public function certificateGetWithHttpInfo($thumbprint_algorithm, $thumbprint, $api_version, $select = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        // verify the required parameter 'thumbprint_algorithm' is set
        if ($thumbprint_algorithm === null) {
            throw new \InvalidArgumentException('Missing the required parameter $thumbprint_algorithm when calling certificateGet');
        }
        // verify the required parameter 'thumbprint' is set
        if ($thumbprint === null) {
            throw new \InvalidArgumentException('Missing the required parameter $thumbprint when calling certificateGet');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling certificateGet');
        }
        // parse inputs
        $resourcePath = "/certificates(thumbprintAlgorithm&#x3D;{thumbprintAlgorithm},thumbprint&#x3D;{thumbprint})";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($select !== null) {
            $queryParams['$select'] = $this->apiClient->getSerializer()->toQueryValue($select);
        }
        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // path params
        if ($thumbprint_algorithm !== null) {
            $resourcePath = str_replace(
                "{" . "thumbprintAlgorithm" . "}",
                $this->apiClient->getSerializer()->toPathValue($thumbprint_algorithm),
                $resourcePath
            );
        }
        // path params
        if ($thumbprint !== null) {
            $resourcePath = str_replace(
                "{" . "thumbprint" . "}",
                $this->apiClient->getSerializer()->toPathValue($thumbprint),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Progrupa\Azure\Model\Certificate',
                '/certificates(thumbprintAlgorithm&#x3D;{thumbprintAlgorithm},thumbprint&#x3D;{thumbprint})'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Progrupa\Azure\Model\Certificate', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\Certificate', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation certificateList
     *
     * Lists all of the certificates that have been added to the specified account.
     *
     * @param string $api_version Client API Version. (required)
     * @param string $filter An OData $filter clause. (optional)
     * @param string $select An OData $select clause. (optional)
     * @param int $maxresults The maximum number of items to return in the response. A maximum of 1000 certificates can be returned. (optional, default to 1000)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return \Progrupa\Azure\Model\CertificateListResult
     */
    public function certificateList($api_version, $filter = null, $select = null, $maxresults = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        list($response) = $this->certificateListWithHttpInfo($api_version, $filter, $select, $maxresults, $timeout, $client_request_id, $return_client_request_id, $ocp_date);
        return $response;
    }

    /**
     * Operation certificateListWithHttpInfo
     *
     * Lists all of the certificates that have been added to the specified account.
     *
     * @param string $api_version Client API Version. (required)
     * @param string $filter An OData $filter clause. (optional)
     * @param string $select An OData $select clause. (optional)
     * @param int $maxresults The maximum number of items to return in the response. A maximum of 1000 certificates can be returned. (optional, default to 1000)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of \Progrupa\Azure\Model\CertificateListResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function certificateListWithHttpInfo($api_version, $filter = null, $select = null, $maxresults = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling certificateList');
        }
        if (!is_null($maxresults) && ($maxresults > 1000)) {
            throw new \InvalidArgumentException('invalid value for "$maxresults" when calling CertificatesApi.certificateList, must be smaller than or equal to 1000.');
        }
        if (!is_null($maxresults) && ($maxresults < 1)) {
            throw new \InvalidArgumentException('invalid value for "$maxresults" when calling CertificatesApi.certificateList, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/certificates";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($filter !== null) {
            $queryParams['$filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // query params
        if ($select !== null) {
            $queryParams['$select'] = $this->apiClient->getSerializer()->toQueryValue($select);
        }
        // query params
        if ($maxresults !== null) {
            $queryParams['maxresults'] = $this->apiClient->getSerializer()->toQueryValue($maxresults);
        }
        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Progrupa\Azure\Model\CertificateListResult',
                '/certificates'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Progrupa\Azure\Model\CertificateListResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\CertificateListResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
