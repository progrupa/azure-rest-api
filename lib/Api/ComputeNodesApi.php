<?php
/**
 * ComputeNodesApi
 * PHP version 5
 *
 * @category Class
 * @package  Progrupa\Azure
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BatchService
 *
 * A client for issuing REST requests to the Azure Batch service.
 *
 * OpenAPI spec version: 2016-07-01.3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Progrupa\Azure\Api;

use \Progrupa\Azure\ApiClient;
use \Progrupa\Azure\ApiException;
use \Progrupa\Azure\Configuration;
use \Progrupa\Azure\ObjectSerializer;

/**
 * ComputeNodesApi Class Doc Comment
 *
 * @category Class
 * @package  Progrupa\Azure
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ComputeNodesApi
{
    /**
     * API Client
     *
     * @var \Progrupa\Azure\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Progrupa\Azure\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Progrupa\Azure\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Progrupa\Azure\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Progrupa\Azure\ApiClient $apiClient set the API client
     *
     * @return ComputeNodesApi
     */
    public function setApiClient(\Progrupa\Azure\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation computeNodeAddUser
     *
     * Adds a user account to the specified compute node.
     *
     * @param string $pool_id The ID of the pool that contains the compute node. (required)
     * @param string $node_id The ID of the machine on which you want to create a user account. (required)
     * @param \Progrupa\Azure\Model\ComputeNodeUser $user The user account to be created. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return void
     */
    public function computeNodeAddUser($pool_id, $node_id, $user, $api_version = Version::NAME, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        list($response) = $this->computeNodeAddUserWithHttpInfo($pool_id, $node_id, $user, $api_version, $timeout, $client_request_id, $return_client_request_id, $ocp_date);
        return $response;
    }

    /**
     * Operation computeNodeAddUserWithHttpInfo
     *
     * Adds a user account to the specified compute node.
     *
     * @param string $pool_id The ID of the pool that contains the compute node. (required)
     * @param string $node_id The ID of the machine on which you want to create a user account. (required)
     * @param \Progrupa\Azure\Model\ComputeNodeUser $user The user account to be created. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function computeNodeAddUserWithHttpInfo($pool_id, $node_id, $user, $api_version = Version::NAME, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pool_id when calling computeNodeAddUser');
        }
        // verify the required parameter 'node_id' is set
        if ($node_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $node_id when calling computeNodeAddUser');
        }
        // verify the required parameter 'user' is set
        if ($user === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user when calling computeNodeAddUser');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling computeNodeAddUser');
        }
        // parse inputs
        $resourcePath = "/pools/{poolId}/nodes/{nodeId}/users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                "{" . "poolId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pool_id),
                $resourcePath
            );
        }
        // path params
        if ($node_id !== null) {
            $resourcePath = str_replace(
                "{" . "nodeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($node_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($user)) {
            $_tempBody = $user;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/pools/{poolId}/nodes/{nodeId}/users'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation computeNodeDeleteUser
     *
     * Deletes a user account from the specified compute node.
     *
     * @param string $pool_id The ID of the pool that contains the compute node. (required)
     * @param string $node_id The ID of the machine on which you want to delete a user account. (required)
     * @param string $user_name The name of the user account to delete. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return void
     */
    public function computeNodeDeleteUser($pool_id, $node_id, $user_name, $api_version = Version::NAME, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        list($response) = $this->computeNodeDeleteUserWithHttpInfo($pool_id, $node_id, $user_name, $api_version, $timeout, $client_request_id, $return_client_request_id, $ocp_date);
        return $response;
    }

    /**
     * Operation computeNodeDeleteUserWithHttpInfo
     *
     * Deletes a user account from the specified compute node.
     *
     * @param string $pool_id The ID of the pool that contains the compute node. (required)
     * @param string $node_id The ID of the machine on which you want to delete a user account. (required)
     * @param string $user_name The name of the user account to delete. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function computeNodeDeleteUserWithHttpInfo($pool_id, $node_id, $user_name, $api_version = Version::NAME, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pool_id when calling computeNodeDeleteUser');
        }
        // verify the required parameter 'node_id' is set
        if ($node_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $node_id when calling computeNodeDeleteUser');
        }
        // verify the required parameter 'user_name' is set
        if ($user_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_name when calling computeNodeDeleteUser');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling computeNodeDeleteUser');
        }
        // parse inputs
        $resourcePath = "/pools/{poolId}/nodes/{nodeId}/users/{userName}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                "{" . "poolId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pool_id),
                $resourcePath
            );
        }
        // path params
        if ($node_id !== null) {
            $resourcePath = str_replace(
                "{" . "nodeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($node_id),
                $resourcePath
            );
        }
        // path params
        if ($user_name !== null) {
            $resourcePath = str_replace(
                "{" . "userName" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/pools/{poolId}/nodes/{nodeId}/users/{userName}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation computeNodeDisableScheduling
     *
     * Disables task scheduling on the specified compute node.
     *
     * @param string $pool_id The ID of the pool that contains the compute node. (required)
     * @param string $node_id The ID of the compute node on which you want to disable task scheduling. (required)
     * @param string $api_version Client API Version. (required)
     * @param \Progrupa\Azure\Model\NodeDisableSchedulingParameter $node_disable_scheduling_parameter The parameters for the request. (optional)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return void
     */
    public function computeNodeDisableScheduling($pool_id, $node_id, $api_version = Version::NAME, $node_disable_scheduling_parameter = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        list($response) = $this->computeNodeDisableSchedulingWithHttpInfo($pool_id, $node_id, $api_version, $node_disable_scheduling_parameter, $timeout, $client_request_id, $return_client_request_id, $ocp_date);
        return $response;
    }

    /**
     * Operation computeNodeDisableSchedulingWithHttpInfo
     *
     * Disables task scheduling on the specified compute node.
     *
     * @param string $pool_id The ID of the pool that contains the compute node. (required)
     * @param string $node_id The ID of the compute node on which you want to disable task scheduling. (required)
     * @param string $api_version Client API Version. (required)
     * @param \Progrupa\Azure\Model\NodeDisableSchedulingParameter $node_disable_scheduling_parameter The parameters for the request. (optional)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function computeNodeDisableSchedulingWithHttpInfo($pool_id, $node_id, $api_version = Version::NAME, $node_disable_scheduling_parameter = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pool_id when calling computeNodeDisableScheduling');
        }
        // verify the required parameter 'node_id' is set
        if ($node_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $node_id when calling computeNodeDisableScheduling');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling computeNodeDisableScheduling');
        }
        // parse inputs
        $resourcePath = "/pools/{poolId}/nodes/{nodeId}/disablescheduling";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                "{" . "poolId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pool_id),
                $resourcePath
            );
        }
        // path params
        if ($node_id !== null) {
            $resourcePath = str_replace(
                "{" . "nodeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($node_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($node_disable_scheduling_parameter)) {
            $_tempBody = $node_disable_scheduling_parameter;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/pools/{poolId}/nodes/{nodeId}/disablescheduling'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation computeNodeEnableScheduling
     *
     * Enables task scheduling on the specified compute node.
     *
     * @param string $pool_id The ID of the pool that contains the compute node. (required)
     * @param string $node_id The ID of the compute node on which you want to enable task scheduling. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return void
     */
    public function computeNodeEnableScheduling($pool_id, $node_id, $api_version = Version::NAME, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        list($response) = $this->computeNodeEnableSchedulingWithHttpInfo($pool_id, $node_id, $api_version, $timeout, $client_request_id, $return_client_request_id, $ocp_date);
        return $response;
    }

    /**
     * Operation computeNodeEnableSchedulingWithHttpInfo
     *
     * Enables task scheduling on the specified compute node.
     *
     * @param string $pool_id The ID of the pool that contains the compute node. (required)
     * @param string $node_id The ID of the compute node on which you want to enable task scheduling. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function computeNodeEnableSchedulingWithHttpInfo($pool_id, $node_id, $api_version = Version::NAME, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pool_id when calling computeNodeEnableScheduling');
        }
        // verify the required parameter 'node_id' is set
        if ($node_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $node_id when calling computeNodeEnableScheduling');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling computeNodeEnableScheduling');
        }
        // parse inputs
        $resourcePath = "/pools/{poolId}/nodes/{nodeId}/enablescheduling";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                "{" . "poolId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pool_id),
                $resourcePath
            );
        }
        // path params
        if ($node_id !== null) {
            $resourcePath = str_replace(
                "{" . "nodeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($node_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/pools/{poolId}/nodes/{nodeId}/enablescheduling'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation computeNodeGet
     *
     * Gets information about the specified compute node.
     *
     * @param string $pool_id The ID of the pool that contains the compute node. (required)
     * @param string $node_id The ID of the compute node that you want to get information about. (required)
     * @param string $api_version Client API Version. (required)
     * @param string $select An OData $select clause. (optional)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return \Progrupa\Azure\Model\ComputeNode
     */
    public function computeNodeGet($pool_id, $node_id, $api_version = Version::NAME, $select = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        list($response) = $this->computeNodeGetWithHttpInfo($pool_id, $node_id, $api_version, $select, $timeout, $client_request_id, $return_client_request_id, $ocp_date);
        return $response;
    }

    /**
     * Operation computeNodeGetWithHttpInfo
     *
     * Gets information about the specified compute node.
     *
     * @param string $pool_id The ID of the pool that contains the compute node. (required)
     * @param string $node_id The ID of the compute node that you want to get information about. (required)
     * @param string $api_version Client API Version. (required)
     * @param string $select An OData $select clause. (optional)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of \Progrupa\Azure\Model\ComputeNode, HTTP status code, HTTP response headers (array of strings)
     */
    public function computeNodeGetWithHttpInfo($pool_id, $node_id, $api_version = Version::NAME, $select = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pool_id when calling computeNodeGet');
        }
        // verify the required parameter 'node_id' is set
        if ($node_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $node_id when calling computeNodeGet');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling computeNodeGet');
        }
        // parse inputs
        $resourcePath = "/pools/{poolId}/nodes/{nodeId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($select !== null) {
            $queryParams['$select'] = $this->apiClient->getSerializer()->toQueryValue($select);
        }
        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                "{" . "poolId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pool_id),
                $resourcePath
            );
        }
        // path params
        if ($node_id !== null) {
            $resourcePath = str_replace(
                "{" . "nodeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($node_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Progrupa\Azure\Model\ComputeNode',
                '/pools/{poolId}/nodes/{nodeId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Progrupa\Azure\Model\ComputeNode', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\ComputeNode', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation computeNodeGetRemoteDesktop
     *
     * Gets the Remote Desktop Protocol file for the specified compute node.
     *
     * @param string $pool_id The ID of the pool that contains the compute node. (required)
     * @param string $node_id The ID of the compute node for which you want to get the Remote Desktop Protocol file. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function computeNodeGetRemoteDesktop($pool_id, $node_id, $api_version = Version::NAME, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        list($response) = $this->computeNodeGetRemoteDesktopWithHttpInfo($pool_id, $node_id, $api_version, $timeout, $client_request_id, $return_client_request_id, $ocp_date);
        return $response;
    }

    /**
     * Operation computeNodeGetRemoteDesktopWithHttpInfo
     *
     * Gets the Remote Desktop Protocol file for the specified compute node.
     *
     * @param string $pool_id The ID of the pool that contains the compute node. (required)
     * @param string $node_id The ID of the compute node for which you want to get the Remote Desktop Protocol file. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function computeNodeGetRemoteDesktopWithHttpInfo($pool_id, $node_id, $api_version = Version::NAME, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pool_id when calling computeNodeGetRemoteDesktop');
        }
        // verify the required parameter 'node_id' is set
        if ($node_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $node_id when calling computeNodeGetRemoteDesktop');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling computeNodeGetRemoteDesktop');
        }
        // parse inputs
        $resourcePath = "/pools/{poolId}/nodes/{nodeId}/rdp";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                "{" . "poolId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pool_id),
                $resourcePath
            );
        }
        // path params
        if ($node_id !== null) {
            $resourcePath = str_replace(
                "{" . "nodeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($node_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/pools/{poolId}/nodes/{nodeId}/rdp'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation computeNodeGetRemoteLoginSettings
     *
     * Gets the settings required for remote login to a compute node.
     *
     * @param string $pool_id The ID of the pool that contains the compute node. (required)
     * @param string $node_id The ID of the compute node for which to obtain the remote login settings. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return \Progrupa\Azure\Model\ComputeNodeGetRemoteLoginSettingsResult
     */
    public function computeNodeGetRemoteLoginSettings($pool_id, $node_id, $api_version = Version::NAME, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        list($response) = $this->computeNodeGetRemoteLoginSettingsWithHttpInfo($pool_id, $node_id, $api_version, $timeout, $client_request_id, $return_client_request_id, $ocp_date);
        return $response;
    }

    /**
     * Operation computeNodeGetRemoteLoginSettingsWithHttpInfo
     *
     * Gets the settings required for remote login to a compute node.
     *
     * @param string $pool_id The ID of the pool that contains the compute node. (required)
     * @param string $node_id The ID of the compute node for which to obtain the remote login settings. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of \Progrupa\Azure\Model\ComputeNodeGetRemoteLoginSettingsResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function computeNodeGetRemoteLoginSettingsWithHttpInfo($pool_id, $node_id, $api_version = Version::NAME, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pool_id when calling computeNodeGetRemoteLoginSettings');
        }
        // verify the required parameter 'node_id' is set
        if ($node_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $node_id when calling computeNodeGetRemoteLoginSettings');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling computeNodeGetRemoteLoginSettings');
        }
        // parse inputs
        $resourcePath = "/pools/{poolId}/nodes/{nodeId}/remoteloginsettings";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                "{" . "poolId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pool_id),
                $resourcePath
            );
        }
        // path params
        if ($node_id !== null) {
            $resourcePath = str_replace(
                "{" . "nodeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($node_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Progrupa\Azure\Model\ComputeNodeGetRemoteLoginSettingsResult',
                '/pools/{poolId}/nodes/{nodeId}/remoteloginsettings'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Progrupa\Azure\Model\ComputeNodeGetRemoteLoginSettingsResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\ComputeNodeGetRemoteLoginSettingsResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation computeNodeList
     *
     * Lists the compute nodes in the specified pool.
     *
     * @param string $pool_id The ID of the pool from which you want to list nodes. (required)
     * @param string $api_version Client API Version. (required)
     * @param string $filter An OData $filter clause.. (optional)
     * @param string $select An OData $select clause. (optional)
     * @param int $maxresults The maximum number of items to return in the response. A maximum of 1000 nodes can be returned. (optional, default to 1000)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return \Progrupa\Azure\Model\ComputeNodeListResult
     */
    public function computeNodeList($pool_id, $api_version = Version::NAME, $filter = null, $select = null, $maxresults = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        list($response) = $this->computeNodeListWithHttpInfo($pool_id, $api_version, $filter, $select, $maxresults, $timeout, $client_request_id, $return_client_request_id, $ocp_date);
        return $response;
    }

    /**
     * Operation computeNodeListWithHttpInfo
     *
     * Lists the compute nodes in the specified pool.
     *
     * @param string $pool_id The ID of the pool from which you want to list nodes. (required)
     * @param string $api_version Client API Version. (required)
     * @param string $filter An OData $filter clause.. (optional)
     * @param string $select An OData $select clause. (optional)
     * @param int $maxresults The maximum number of items to return in the response. A maximum of 1000 nodes can be returned. (optional, default to 1000)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of \Progrupa\Azure\Model\ComputeNodeListResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function computeNodeListWithHttpInfo($pool_id, $api_version = Version::NAME, $filter = null, $select = null, $maxresults = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pool_id when calling computeNodeList');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling computeNodeList');
        }
        if (!is_null($maxresults) && ($maxresults > 1000)) {
            throw new \InvalidArgumentException('invalid value for "$maxresults" when calling ComputeNodesApi.computeNodeList, must be smaller than or equal to 1000.');
        }
        if (!is_null($maxresults) && ($maxresults < 1)) {
            throw new \InvalidArgumentException('invalid value for "$maxresults" when calling ComputeNodesApi.computeNodeList, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/pools/{poolId}/nodes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($filter !== null) {
            $queryParams['$filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // query params
        if ($select !== null) {
            $queryParams['$select'] = $this->apiClient->getSerializer()->toQueryValue($select);
        }
        // query params
        if ($maxresults !== null) {
            $queryParams['maxresults'] = $this->apiClient->getSerializer()->toQueryValue($maxresults);
        }
        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                "{" . "poolId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pool_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Progrupa\Azure\Model\ComputeNodeListResult',
                '/pools/{poolId}/nodes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Progrupa\Azure\Model\ComputeNodeListResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\ComputeNodeListResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation computeNodeReboot
     *
     * Restarts the specified compute node.
     *
     * @param string $pool_id The ID of the pool that contains the compute node. (required)
     * @param string $node_id The ID of the compute node that you want to restart. (required)
     * @param string $api_version Client API Version. (required)
     * @param \Progrupa\Azure\Model\NodeRebootParameter $node_reboot_parameter The parameters for the request. (optional)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return void
     */
    public function computeNodeReboot($pool_id, $node_id, $api_version = Version::NAME, $node_reboot_parameter = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        list($response) = $this->computeNodeRebootWithHttpInfo($pool_id, $node_id, $api_version, $node_reboot_parameter, $timeout, $client_request_id, $return_client_request_id, $ocp_date);
        return $response;
    }

    /**
     * Operation computeNodeRebootWithHttpInfo
     *
     * Restarts the specified compute node.
     *
     * @param string $pool_id The ID of the pool that contains the compute node. (required)
     * @param string $node_id The ID of the compute node that you want to restart. (required)
     * @param string $api_version Client API Version. (required)
     * @param \Progrupa\Azure\Model\NodeRebootParameter $node_reboot_parameter The parameters for the request. (optional)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function computeNodeRebootWithHttpInfo($pool_id, $node_id, $api_version = Version::NAME, $node_reboot_parameter = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pool_id when calling computeNodeReboot');
        }
        // verify the required parameter 'node_id' is set
        if ($node_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $node_id when calling computeNodeReboot');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling computeNodeReboot');
        }
        // parse inputs
        $resourcePath = "/pools/{poolId}/nodes/{nodeId}/reboot";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                "{" . "poolId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pool_id),
                $resourcePath
            );
        }
        // path params
        if ($node_id !== null) {
            $resourcePath = str_replace(
                "{" . "nodeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($node_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($node_reboot_parameter)) {
            $_tempBody = $node_reboot_parameter;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/pools/{poolId}/nodes/{nodeId}/reboot'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation computeNodeReimage
     *
     * Reinstalls the operating system on the specified compute node.
     *
     * @param string $pool_id The ID of the pool that contains the compute node. (required)
     * @param string $node_id The ID of the compute node that you want to restart. (required)
     * @param string $api_version Client API Version. (required)
     * @param \Progrupa\Azure\Model\NodeReimageParameter $node_reimage_parameter The parameters for the request. (optional)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return void
     */
    public function computeNodeReimage($pool_id, $node_id, $api_version = Version::NAME, $node_reimage_parameter = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        list($response) = $this->computeNodeReimageWithHttpInfo($pool_id, $node_id, $api_version, $node_reimage_parameter, $timeout, $client_request_id, $return_client_request_id, $ocp_date);
        return $response;
    }

    /**
     * Operation computeNodeReimageWithHttpInfo
     *
     * Reinstalls the operating system on the specified compute node.
     *
     * @param string $pool_id The ID of the pool that contains the compute node. (required)
     * @param string $node_id The ID of the compute node that you want to restart. (required)
     * @param string $api_version Client API Version. (required)
     * @param \Progrupa\Azure\Model\NodeReimageParameter $node_reimage_parameter The parameters for the request. (optional)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function computeNodeReimageWithHttpInfo($pool_id, $node_id, $api_version = Version::NAME, $node_reimage_parameter = null, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pool_id when calling computeNodeReimage');
        }
        // verify the required parameter 'node_id' is set
        if ($node_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $node_id when calling computeNodeReimage');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling computeNodeReimage');
        }
        // parse inputs
        $resourcePath = "/pools/{poolId}/nodes/{nodeId}/reimage";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                "{" . "poolId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pool_id),
                $resourcePath
            );
        }
        // path params
        if ($node_id !== null) {
            $resourcePath = str_replace(
                "{" . "nodeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($node_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($node_reimage_parameter)) {
            $_tempBody = $node_reimage_parameter;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/pools/{poolId}/nodes/{nodeId}/reimage'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation computeNodeUpdateUser
     *
     * Updates the password or expiration time of a user account on the specified compute node.
     *
     * @param string $pool_id The ID of the pool that contains the compute node. (required)
     * @param string $node_id The ID of the machine on which you want to update a user account. (required)
     * @param string $user_name The name of the user account to update. (required)
     * @param \Progrupa\Azure\Model\NodeUpdateUserParameter $node_update_user_parameter The parameters for the request. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return void
     */
    public function computeNodeUpdateUser($pool_id, $node_id, $user_name, $node_update_user_parameter, $api_version = Version::NAME, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        list($response) = $this->computeNodeUpdateUserWithHttpInfo($pool_id, $node_id, $user_name, $node_update_user_parameter, $api_version, $timeout, $client_request_id, $return_client_request_id, $ocp_date);
        return $response;
    }

    /**
     * Operation computeNodeUpdateUserWithHttpInfo
     *
     * Updates the password or expiration time of a user account on the specified compute node.
     *
     * @param string $pool_id The ID of the pool that contains the compute node. (required)
     * @param string $node_id The ID of the machine on which you want to update a user account. (required)
     * @param string $user_name The name of the user account to update. (required)
     * @param \Progrupa\Azure\Model\NodeUpdateUserParameter $node_update_user_parameter The parameters for the request. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function computeNodeUpdateUserWithHttpInfo($pool_id, $node_id, $user_name, $node_update_user_parameter, $api_version = Version::NAME, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pool_id when calling computeNodeUpdateUser');
        }
        // verify the required parameter 'node_id' is set
        if ($node_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $node_id when calling computeNodeUpdateUser');
        }
        // verify the required parameter 'user_name' is set
        if ($user_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_name when calling computeNodeUpdateUser');
        }
        // verify the required parameter 'node_update_user_parameter' is set
        if ($node_update_user_parameter === null) {
            throw new \InvalidArgumentException('Missing the required parameter $node_update_user_parameter when calling computeNodeUpdateUser');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling computeNodeUpdateUser');
        }
        // parse inputs
        $resourcePath = "/pools/{poolId}/nodes/{nodeId}/users/{userName}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                "{" . "poolId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pool_id),
                $resourcePath
            );
        }
        // path params
        if ($node_id !== null) {
            $resourcePath = str_replace(
                "{" . "nodeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($node_id),
                $resourcePath
            );
        }
        // path params
        if ($user_name !== null) {
            $resourcePath = str_replace(
                "{" . "userName" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($node_update_user_parameter)) {
            $_tempBody = $node_update_user_parameter;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/pools/{poolId}/nodes/{nodeId}/users/{userName}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation poolRemoveNodes
     *
     * Removes compute nodes from the specified pool.
     *
     * @param string $pool_id The ID of the pool from which you want to remove nodes. (required)
     * @param \Progrupa\Azure\Model\NodeRemoveParameter $node_remove_parameter The parameters for the request. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $if_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag is an exact match as specified. (optional)
     * @param string $if_none_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag does not match the specified ETag. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return void
     */
    public function poolRemoveNodes($pool_id, $node_remove_parameter, $api_version = Version::NAME, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $if_match = null, $if_none_match = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        list($response) = $this->poolRemoveNodesWithHttpInfo($pool_id, $node_remove_parameter, $api_version, $timeout, $client_request_id, $return_client_request_id, $ocp_date, $if_match, $if_none_match, $if_modified_since, $if_unmodified_since);
        return $response;
    }

    /**
     * Operation poolRemoveNodesWithHttpInfo
     *
     * Removes compute nodes from the specified pool.
     *
     * @param string $pool_id The ID of the pool from which you want to remove nodes. (required)
     * @param \Progrupa\Azure\Model\NodeRemoveParameter $node_remove_parameter The parameters for the request. (required)
     * @param string $api_version Client API Version. (required)
     * @param int $timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param string $client_request_id The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param bool $return_client_request_id Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param string $ocp_date The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param string $if_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag is an exact match as specified. (optional)
     * @param string $if_none_match An ETag is specified. Specify this header to perform the operation only if the resource&#39;s ETag does not match the specified ETag. (optional)
     * @param string $if_modified_since Specify this header to perform the operation only if the resource has been modified since the specified date/time. (optional)
     * @param string $if_unmodified_since Specify this header to perform the operation only if the resource has not been modified since the specified date/time. (optional)
     * @throws \Progrupa\Azure\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function poolRemoveNodesWithHttpInfo($pool_id, $node_remove_parameter, $api_version = Version::NAME, $timeout = null, $client_request_id = null, $return_client_request_id = null, $ocp_date = null, $if_match = null, $if_none_match = null, $if_modified_since = null, $if_unmodified_since = null)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pool_id when calling poolRemoveNodes');
        }
        // verify the required parameter 'node_remove_parameter' is set
        if ($node_remove_parameter === null) {
            throw new \InvalidArgumentException('Missing the required parameter $node_remove_parameter when calling poolRemoveNodes');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling poolRemoveNodes');
        }
        // parse inputs
        $resourcePath = "/pools/{poolId}/removenodes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; odata=minimalmetadata']);

        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = $this->apiClient->getSerializer()->toQueryValue($timeout);
        }
        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // header params
        if ($client_request_id !== null) {
            $headerParams['client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($client_request_id);
        }
        // header params
        if ($return_client_request_id !== null) {
            $headerParams['return-client-request-id'] = $this->apiClient->getSerializer()->toHeaderValue($return_client_request_id);
        }
        // header params
        if ($ocp_date !== null) {
            $headerParams['ocp-date'] = $this->apiClient->getSerializer()->toHeaderValue($ocp_date);
        }
        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_match);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_none_match);
        }
        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_modified_since);
        }
        // header params
        if ($if_unmodified_since !== null) {
            $headerParams['If-Unmodified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_unmodified_since);
        }
        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                "{" . "poolId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pool_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($node_remove_parameter)) {
            $_tempBody = $node_remove_parameter;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/pools/{poolId}/removenodes'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Progrupa\Azure\Model\BatchError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
