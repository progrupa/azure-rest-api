<?php
/**
 * CloudPool
 *
 * PHP version 5
 *
 * @category Class
 * @package  Progrupa\Azure
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BatchService
 *
 * A client for issuing REST requests to the Azure Batch service.
 *
 * OpenAPI spec version: 2016-07-01.3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Progrupa\Azure\Model;

use \ArrayAccess;

/**
 * CloudPool Class Doc Comment
 *
 * @category    Class
 * @package     Progrupa\Azure
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CloudPool implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CloudPool';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'display_name' => 'string',
        'url' => 'string',
        'e_tag' => 'string',
        'last_modified' => '\DateTime',
        'creation_time' => '\DateTime',
        'state' => 'string',
        'state_transition_time' => '\DateTime',
        'allocation_state' => 'string',
        'allocation_state_transition_time' => '\DateTime',
        'vm_size' => 'string',
        'cloud_service_configuration' => '\Progrupa\Azure\Model\CloudServiceConfiguration',
        'virtual_machine_configuration' => '\Progrupa\Azure\Model\VirtualMachineConfiguration',
        'resize_timeout' => 'string',
        'resize_error' => '\Progrupa\Azure\Model\ResizeError',
        'current_dedicated' => 'int',
        'target_dedicated' => 'int',
        'enable_auto_scale' => 'bool',
        'auto_scale_formula' => 'string',
        'auto_scale_evaluation_interval' => 'string',
        'auto_scale_run' => '\Progrupa\Azure\Model\AutoScaleRun',
        'enable_inter_node_communication' => 'bool',
        'network_configuration' => '\Progrupa\Azure\Model\NetworkConfiguration',
        'start_task' => '\Progrupa\Azure\Model\StartTask',
        'certificate_references' => '\Progrupa\Azure\Model\CertificateReference[]',
        'application_package_references' => '\Progrupa\Azure\Model\ApplicationPackageReference[]',
        'max_tasks_per_node' => 'int',
        'task_scheduling_policy' => '\Progrupa\Azure\Model\TaskSchedulingPolicy',
        'metadata' => '\Progrupa\Azure\Model\MetadataItem[]',
        'stats' => '\Progrupa\Azure\Model\PoolStatistics'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'display_name' => 'displayName',
        'url' => 'url',
        'e_tag' => 'eTag',
        'last_modified' => 'lastModified',
        'creation_time' => 'creationTime',
        'state' => 'state',
        'state_transition_time' => 'stateTransitionTime',
        'allocation_state' => 'allocationState',
        'allocation_state_transition_time' => 'allocationStateTransitionTime',
        'vm_size' => 'vmSize',
        'cloud_service_configuration' => 'cloudServiceConfiguration',
        'virtual_machine_configuration' => 'virtualMachineConfiguration',
        'resize_timeout' => 'resizeTimeout',
        'resize_error' => 'resizeError',
        'current_dedicated' => 'currentDedicated',
        'target_dedicated' => 'targetDedicated',
        'enable_auto_scale' => 'enableAutoScale',
        'auto_scale_formula' => 'autoScaleFormula',
        'auto_scale_evaluation_interval' => 'autoScaleEvaluationInterval',
        'auto_scale_run' => 'autoScaleRun',
        'enable_inter_node_communication' => 'enableInterNodeCommunication',
        'network_configuration' => 'networkConfiguration',
        'start_task' => 'startTask',
        'certificate_references' => 'certificateReferences',
        'application_package_references' => 'applicationPackageReferences',
        'max_tasks_per_node' => 'maxTasksPerNode',
        'task_scheduling_policy' => 'taskSchedulingPolicy',
        'metadata' => 'metadata',
        'stats' => 'stats'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'display_name' => 'setDisplayName',
        'url' => 'setUrl',
        'e_tag' => 'setETag',
        'last_modified' => 'setLastModified',
        'creation_time' => 'setCreationTime',
        'state' => 'setState',
        'state_transition_time' => 'setStateTransitionTime',
        'allocation_state' => 'setAllocationState',
        'allocation_state_transition_time' => 'setAllocationStateTransitionTime',
        'vm_size' => 'setVmSize',
        'cloud_service_configuration' => 'setCloudServiceConfiguration',
        'virtual_machine_configuration' => 'setVirtualMachineConfiguration',
        'resize_timeout' => 'setResizeTimeout',
        'resize_error' => 'setResizeError',
        'current_dedicated' => 'setCurrentDedicated',
        'target_dedicated' => 'setTargetDedicated',
        'enable_auto_scale' => 'setEnableAutoScale',
        'auto_scale_formula' => 'setAutoScaleFormula',
        'auto_scale_evaluation_interval' => 'setAutoScaleEvaluationInterval',
        'auto_scale_run' => 'setAutoScaleRun',
        'enable_inter_node_communication' => 'setEnableInterNodeCommunication',
        'network_configuration' => 'setNetworkConfiguration',
        'start_task' => 'setStartTask',
        'certificate_references' => 'setCertificateReferences',
        'application_package_references' => 'setApplicationPackageReferences',
        'max_tasks_per_node' => 'setMaxTasksPerNode',
        'task_scheduling_policy' => 'setTaskSchedulingPolicy',
        'metadata' => 'setMetadata',
        'stats' => 'setStats'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'display_name' => 'getDisplayName',
        'url' => 'getUrl',
        'e_tag' => 'getETag',
        'last_modified' => 'getLastModified',
        'creation_time' => 'getCreationTime',
        'state' => 'getState',
        'state_transition_time' => 'getStateTransitionTime',
        'allocation_state' => 'getAllocationState',
        'allocation_state_transition_time' => 'getAllocationStateTransitionTime',
        'vm_size' => 'getVmSize',
        'cloud_service_configuration' => 'getCloudServiceConfiguration',
        'virtual_machine_configuration' => 'getVirtualMachineConfiguration',
        'resize_timeout' => 'getResizeTimeout',
        'resize_error' => 'getResizeError',
        'current_dedicated' => 'getCurrentDedicated',
        'target_dedicated' => 'getTargetDedicated',
        'enable_auto_scale' => 'getEnableAutoScale',
        'auto_scale_formula' => 'getAutoScaleFormula',
        'auto_scale_evaluation_interval' => 'getAutoScaleEvaluationInterval',
        'auto_scale_run' => 'getAutoScaleRun',
        'enable_inter_node_communication' => 'getEnableInterNodeCommunication',
        'network_configuration' => 'getNetworkConfiguration',
        'start_task' => 'getStartTask',
        'certificate_references' => 'getCertificateReferences',
        'application_package_references' => 'getApplicationPackageReferences',
        'max_tasks_per_node' => 'getMaxTasksPerNode',
        'task_scheduling_policy' => 'getTaskSchedulingPolicy',
        'metadata' => 'getMetadata',
        'stats' => 'getStats'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const STATE_ACTIVE = 'active';
    const STATE_DELETING = 'deleting';
    const STATE_UPGRADING = 'upgrading';
    const ALLOCATION_STATE_STEADY = 'steady';
    const ALLOCATION_STATE_RESIZING = 'resizing';
    const ALLOCATION_STATE_STOPPING = 'stopping';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_ACTIVE,
            self::STATE_DELETING,
            self::STATE_UPGRADING,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getAllocationStateAllowableValues()
    {
        return [
            self::ALLOCATION_STATE_STEADY,
            self::ALLOCATION_STATE_RESIZING,
            self::ALLOCATION_STATE_STOPPING,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['e_tag'] = isset($data['e_tag']) ? $data['e_tag'] : null;
        $this->container['last_modified'] = isset($data['last_modified']) ? $data['last_modified'] : null;
        $this->container['creation_time'] = isset($data['creation_time']) ? $data['creation_time'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['state_transition_time'] = isset($data['state_transition_time']) ? $data['state_transition_time'] : null;
        $this->container['allocation_state'] = isset($data['allocation_state']) ? $data['allocation_state'] : null;
        $this->container['allocation_state_transition_time'] = isset($data['allocation_state_transition_time']) ? $data['allocation_state_transition_time'] : null;
        $this->container['vm_size'] = isset($data['vm_size']) ? $data['vm_size'] : null;
        $this->container['cloud_service_configuration'] = isset($data['cloud_service_configuration']) ? $data['cloud_service_configuration'] : null;
        $this->container['virtual_machine_configuration'] = isset($data['virtual_machine_configuration']) ? $data['virtual_machine_configuration'] : null;
        $this->container['resize_timeout'] = isset($data['resize_timeout']) ? $data['resize_timeout'] : null;
        $this->container['resize_error'] = isset($data['resize_error']) ? $data['resize_error'] : null;
        $this->container['current_dedicated'] = isset($data['current_dedicated']) ? $data['current_dedicated'] : null;
        $this->container['target_dedicated'] = isset($data['target_dedicated']) ? $data['target_dedicated'] : null;
        $this->container['enable_auto_scale'] = isset($data['enable_auto_scale']) ? $data['enable_auto_scale'] : null;
        $this->container['auto_scale_formula'] = isset($data['auto_scale_formula']) ? $data['auto_scale_formula'] : null;
        $this->container['auto_scale_evaluation_interval'] = isset($data['auto_scale_evaluation_interval']) ? $data['auto_scale_evaluation_interval'] : null;
        $this->container['auto_scale_run'] = isset($data['auto_scale_run']) ? $data['auto_scale_run'] : null;
        $this->container['enable_inter_node_communication'] = isset($data['enable_inter_node_communication']) ? $data['enable_inter_node_communication'] : null;
        $this->container['network_configuration'] = isset($data['network_configuration']) ? $data['network_configuration'] : null;
        $this->container['start_task'] = isset($data['start_task']) ? $data['start_task'] : null;
        $this->container['certificate_references'] = isset($data['certificate_references']) ? $data['certificate_references'] : null;
        $this->container['application_package_references'] = isset($data['application_package_references']) ? $data['application_package_references'] : null;
        $this->container['max_tasks_per_node'] = isset($data['max_tasks_per_node']) ? $data['max_tasks_per_node'] : null;
        $this->container['task_scheduling_policy'] = isset($data['task_scheduling_policy']) ? $data['task_scheduling_policy'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['stats'] = isset($data['stats']) ? $data['stats'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["active", "deleting", "upgrading"];
        if (!in_array($this->container['state'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'state', must be one of 'active', 'deleting', 'upgrading'.";
        }

        $allowed_values = ["steady", "resizing", "stopping"];
        if (!in_array($this->container['allocation_state'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'allocation_state', must be one of 'steady', 'resizing', 'stopping'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["active", "deleting", "upgrading"];
        if (!in_array($this->container['state'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["steady", "resizing", "stopping"];
        if (!in_array($this->container['allocation_state'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. It is common to use a GUID for the id.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets display_name
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     * @param string $display_name The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets url
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     * @param string $url
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets e_tag
     * @return string
     */
    public function getETag()
    {
        return $this->container['e_tag'];
    }

    /**
     * Sets e_tag
     * @param string $e_tag This is an opaque string. You can use it to detect whether the pool has changed between requests. In particular, you can be pass the ETag when updating a pool to specify that your changes should take effect only if nobody else has modified the pool in the meantime.
     * @return $this
     */
    public function setETag($e_tag)
    {
        $this->container['e_tag'] = $e_tag;

        return $this;
    }

    /**
     * Gets last_modified
     * @return \DateTime
     */
    public function getLastModified()
    {
        return $this->container['last_modified'];
    }

    /**
     * Sets last_modified
     * @param \DateTime $last_modified This is the last time at which the pool level data, such as the targetDedicated or enableAutoscale settings, changed. It does not factor in node-level changes such as a compute node changing state.
     * @return $this
     */
    public function setLastModified($last_modified)
    {
        $this->container['last_modified'] = $last_modified;

        return $this;
    }

    /**
     * Gets creation_time
     * @return \DateTime
     */
    public function getCreationTime()
    {
        return $this->container['creation_time'];
    }

    /**
     * Sets creation_time
     * @param \DateTime $creation_time
     * @return $this
     */
    public function setCreationTime($creation_time)
    {
        $this->container['creation_time'] = $creation_time;

        return $this;
    }

    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param string $state Possible values are: active – The pool is available to run tasks subject to the availability of compute nodes. deleting – The user has requested that the pool be deleted, but the delete operation has not yet completed. upgrading – The user has requested that the operating system of the pool's nodes be upgraded, but the upgrade operation has not yet completed (that is, some nodes in the pool have not yet been upgraded). While upgrading, the pool may be able to run tasks (with reduced capacity) but this is not guaranteed.
     * @return $this
     */
    public function setState($state)
    {
        $allowed_values = array('active', 'deleting', 'upgrading');
        if (!is_null($state) && (!in_array($state, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'state', must be one of 'active', 'deleting', 'upgrading'");
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets state_transition_time
     * @return \DateTime
     */
    public function getStateTransitionTime()
    {
        return $this->container['state_transition_time'];
    }

    /**
     * Sets state_transition_time
     * @param \DateTime $state_transition_time
     * @return $this
     */
    public function setStateTransitionTime($state_transition_time)
    {
        $this->container['state_transition_time'] = $state_transition_time;

        return $this;
    }

    /**
     * Gets allocation_state
     * @return string
     */
    public function getAllocationState()
    {
        return $this->container['allocation_state'];
    }

    /**
     * Sets allocation_state
     * @param string $allocation_state Possible values are: steady – The pool is not resizing. There are no changes to the number of nodes in the pool in progress. A pool enters this state when it is created and when no operations are being performed on the pool to change the number of dedicated nodes. resizing - The pool is resizing; that is, compute nodes are being added to or removed from the pool. stopping - The pool was resizing, but the user has requested that the resize be stopped, but the stop request has not yet been completed.
     * @return $this
     */
    public function setAllocationState($allocation_state)
    {
        $allowed_values = array('steady', 'resizing', 'stopping');
        if (!is_null($allocation_state) && (!in_array($allocation_state, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'allocation_state', must be one of 'steady', 'resizing', 'stopping'");
        }
        $this->container['allocation_state'] = $allocation_state;

        return $this;
    }

    /**
     * Gets allocation_state_transition_time
     * @return \DateTime
     */
    public function getAllocationStateTransitionTime()
    {
        return $this->container['allocation_state_transition_time'];
    }

    /**
     * Sets allocation_state_transition_time
     * @param \DateTime $allocation_state_transition_time
     * @return $this
     */
    public function setAllocationStateTransitionTime($allocation_state_transition_time)
    {
        $this->container['allocation_state_transition_time'] = $allocation_state_transition_time;

        return $this;
    }

    /**
     * Gets vm_size
     * @return string
     */
    public function getVmSize()
    {
        return $this->container['vm_size'];
    }

    /**
     * Sets vm_size
     * @param string $vm_size For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (http://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports all Cloud Services VM sizes except ExtraSmall. For information about available VM sizes for pools using images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
     * @return $this
     */
    public function setVmSize($vm_size)
    {
        $this->container['vm_size'] = $vm_size;

        return $this;
    }

    /**
     * Gets cloud_service_configuration
     * @return \Progrupa\Azure\Model\CloudServiceConfiguration
     */
    public function getCloudServiceConfiguration()
    {
        return $this->container['cloud_service_configuration'];
    }

    /**
     * Sets cloud_service_configuration
     * @param \Progrupa\Azure\Model\CloudServiceConfiguration $cloud_service_configuration This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified.
     * @return $this
     */
    public function setCloudServiceConfiguration($cloud_service_configuration)
    {
        $this->container['cloud_service_configuration'] = $cloud_service_configuration;

        return $this;
    }

    /**
     * Gets virtual_machine_configuration
     * @return \Progrupa\Azure\Model\VirtualMachineConfiguration
     */
    public function getVirtualMachineConfiguration()
    {
        return $this->container['virtual_machine_configuration'];
    }

    /**
     * Sets virtual_machine_configuration
     * @param \Progrupa\Azure\Model\VirtualMachineConfiguration $virtual_machine_configuration This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified.
     * @return $this
     */
    public function setVirtualMachineConfiguration($virtual_machine_configuration)
    {
        $this->container['virtual_machine_configuration'] = $virtual_machine_configuration;

        return $this;
    }

    /**
     * Gets resize_timeout
     * @return string
     */
    public function getResizeTimeout()
    {
        return $this->container['resize_timeout'];
    }

    /**
     * Sets resize_timeout
     * @param string $resize_timeout This is the timeout for the most recent resize operation. (The initial sizing when the pool is created counts as a resize.) The default value is 15 minutes.
     * @return $this
     */
    public function setResizeTimeout($resize_timeout)
    {
        $this->container['resize_timeout'] = $resize_timeout;

        return $this;
    }

    /**
     * Gets resize_error
     * @return \Progrupa\Azure\Model\ResizeError
     */
    public function getResizeError()
    {
        return $this->container['resize_error'];
    }

    /**
     * Sets resize_error
     * @param \Progrupa\Azure\Model\ResizeError $resize_error This property is set only if an error occurred during the last pool resize, and only when the pool allocationState is Steady.
     * @return $this
     */
    public function setResizeError($resize_error)
    {
        $this->container['resize_error'] = $resize_error;

        return $this;
    }

    /**
     * Gets current_dedicated
     * @return int
     */
    public function getCurrentDedicated()
    {
        return $this->container['current_dedicated'];
    }

    /**
     * Sets current_dedicated
     * @param int $current_dedicated
     * @return $this
     */
    public function setCurrentDedicated($current_dedicated)
    {
        $this->container['current_dedicated'] = $current_dedicated;

        return $this;
    }

    /**
     * Gets target_dedicated
     * @return int
     */
    public function getTargetDedicated()
    {
        return $this->container['target_dedicated'];
    }

    /**
     * Sets target_dedicated
     * @param int $target_dedicated This property is not set if enableAutoScale is true. It is required if enableAutoScale is false.
     * @return $this
     */
    public function setTargetDedicated($target_dedicated)
    {
        $this->container['target_dedicated'] = $target_dedicated;

        return $this;
    }

    /**
     * Gets enable_auto_scale
     * @return bool
     */
    public function getEnableAutoScale()
    {
        return $this->container['enable_auto_scale'];
    }

    /**
     * Sets enable_auto_scale
     * @param bool $enable_auto_scale If true, the autoScaleFormula property must be set. If false, the targetDedicated property must be set.
     * @return $this
     */
    public function setEnableAutoScale($enable_auto_scale)
    {
        $this->container['enable_auto_scale'] = $enable_auto_scale;

        return $this;
    }

    /**
     * Gets auto_scale_formula
     * @return string
     */
    public function getAutoScaleFormula()
    {
        return $this->container['auto_scale_formula'];
    }

    /**
     * Sets auto_scale_formula
     * @param string $auto_scale_formula This property is set only if the pool automatically scales, i.e. enableAutoScale is true.
     * @return $this
     */
    public function setAutoScaleFormula($auto_scale_formula)
    {
        $this->container['auto_scale_formula'] = $auto_scale_formula;

        return $this;
    }

    /**
     * Gets auto_scale_evaluation_interval
     * @return string
     */
    public function getAutoScaleEvaluationInterval()
    {
        return $this->container['auto_scale_evaluation_interval'];
    }

    /**
     * Sets auto_scale_evaluation_interval
     * @param string $auto_scale_evaluation_interval This property is set only if the pool automatically scales, i.e. enableAutoScale is true.
     * @return $this
     */
    public function setAutoScaleEvaluationInterval($auto_scale_evaluation_interval)
    {
        $this->container['auto_scale_evaluation_interval'] = $auto_scale_evaluation_interval;

        return $this;
    }

    /**
     * Gets auto_scale_run
     * @return \Progrupa\Azure\Model\AutoScaleRun
     */
    public function getAutoScaleRun()
    {
        return $this->container['auto_scale_run'];
    }

    /**
     * Sets auto_scale_run
     * @param \Progrupa\Azure\Model\AutoScaleRun $auto_scale_run This property is set only if the pool automatically scales, i.e. enableAutoScale is true.
     * @return $this
     */
    public function setAutoScaleRun($auto_scale_run)
    {
        $this->container['auto_scale_run'] = $auto_scale_run;

        return $this;
    }

    /**
     * Gets enable_inter_node_communication
     * @return bool
     */
    public function getEnableInterNodeCommunication()
    {
        return $this->container['enable_inter_node_communication'];
    }

    /**
     * Sets enable_inter_node_communication
     * @param bool $enable_inter_node_communication This imposes restrictions on which nodes can be assigned to the pool. Specifying this value can reduce the chance of the requested number of nodes to be allocated in the pool.
     * @return $this
     */
    public function setEnableInterNodeCommunication($enable_inter_node_communication)
    {
        $this->container['enable_inter_node_communication'] = $enable_inter_node_communication;

        return $this;
    }

    /**
     * Gets network_configuration
     * @return \Progrupa\Azure\Model\NetworkConfiguration
     */
    public function getNetworkConfiguration()
    {
        return $this->container['network_configuration'];
    }

    /**
     * Sets network_configuration
     * @param \Progrupa\Azure\Model\NetworkConfiguration $network_configuration
     * @return $this
     */
    public function setNetworkConfiguration($network_configuration)
    {
        $this->container['network_configuration'] = $network_configuration;

        return $this;
    }

    /**
     * Gets start_task
     * @return \Progrupa\Azure\Model\StartTask
     */
    public function getStartTask()
    {
        return $this->container['start_task'];
    }

    /**
     * Sets start_task
     * @param \Progrupa\Azure\Model\StartTask $start_task
     * @return $this
     */
    public function setStartTask($start_task)
    {
        $this->container['start_task'] = $start_task;

        return $this;
    }

    /**
     * Gets certificate_references
     * @return \Progrupa\Azure\Model\CertificateReference[]
     */
    public function getCertificateReferences()
    {
        return $this->container['certificate_references'];
    }

    /**
     * Sets certificate_references
     * @param \Progrupa\Azure\Model\CertificateReference[] $certificate_references For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of remoteuser, a certs directory is created in the user's home directory (e.g., /home/<user-name>/certs) where certificates are placed.
     * @return $this
     */
    public function setCertificateReferences($certificate_references)
    {
        $this->container['certificate_references'] = $certificate_references;

        return $this;
    }

    /**
     * Gets application_package_references
     * @return \Progrupa\Azure\Model\ApplicationPackageReference[]
     */
    public function getApplicationPackageReferences()
    {
        return $this->container['application_package_references'];
    }

    /**
     * Sets application_package_references
     * @param \Progrupa\Azure\Model\ApplicationPackageReference[] $application_package_references
     * @return $this
     */
    public function setApplicationPackageReferences($application_package_references)
    {
        $this->container['application_package_references'] = $application_package_references;

        return $this;
    }

    /**
     * Gets max_tasks_per_node
     * @return int
     */
    public function getMaxTasksPerNode()
    {
        return $this->container['max_tasks_per_node'];
    }

    /**
     * Sets max_tasks_per_node
     * @param int $max_tasks_per_node
     * @return $this
     */
    public function setMaxTasksPerNode($max_tasks_per_node)
    {
        $this->container['max_tasks_per_node'] = $max_tasks_per_node;

        return $this;
    }

    /**
     * Gets task_scheduling_policy
     * @return \Progrupa\Azure\Model\TaskSchedulingPolicy
     */
    public function getTaskSchedulingPolicy()
    {
        return $this->container['task_scheduling_policy'];
    }

    /**
     * Sets task_scheduling_policy
     * @param \Progrupa\Azure\Model\TaskSchedulingPolicy $task_scheduling_policy
     * @return $this
     */
    public function setTaskSchedulingPolicy($task_scheduling_policy)
    {
        $this->container['task_scheduling_policy'] = $task_scheduling_policy;

        return $this;
    }

    /**
     * Gets metadata
     * @return \Progrupa\Azure\Model\MetadataItem[]
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     * @param \Progrupa\Azure\Model\MetadataItem[] $metadata
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets stats
     * @return \Progrupa\Azure\Model\PoolStatistics
     */
    public function getStats()
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     * @param \Progrupa\Azure\Model\PoolStatistics $stats
     * @return $this
     */
    public function setStats($stats)
    {
        $this->container['stats'] = $stats;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this));
    }
}


