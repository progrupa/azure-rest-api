<?php
/**
 * PoolUsageMetrics
 *
 * PHP version 5
 *
 * @category Class
 * @package  Progrupa\Azure
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BatchService
 *
 * A client for issuing REST requests to the Azure Batch service.
 *
 * OpenAPI spec version: 2016-07-01.3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Progrupa\Azure\Model;

use \ArrayAccess;

/**
 * PoolUsageMetrics Class Doc Comment
 *
 * @category    Class
 * @package     Progrupa\Azure
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PoolUsageMetrics implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PoolUsageMetrics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'pool_id' => 'string',
        'start_time' => '\DateTime',
        'end_time' => '\DateTime',
        'vm_size' => 'string',
        'total_core_hours' => 'double',
        'data_ingress_gi_b' => 'double',
        'data_egress_gi_b' => 'double'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'pool_id' => 'poolId',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'vm_size' => 'vmSize',
        'total_core_hours' => 'totalCoreHours',
        'data_ingress_gi_b' => 'dataIngressGiB',
        'data_egress_gi_b' => 'dataEgressGiB'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'pool_id' => 'setPoolId',
        'start_time' => 'setStartTime',
        'end_time' => 'setEndTime',
        'vm_size' => 'setVmSize',
        'total_core_hours' => 'setTotalCoreHours',
        'data_ingress_gi_b' => 'setDataIngressGiB',
        'data_egress_gi_b' => 'setDataEgressGiB'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'pool_id' => 'getPoolId',
        'start_time' => 'getStartTime',
        'end_time' => 'getEndTime',
        'vm_size' => 'getVmSize',
        'total_core_hours' => 'getTotalCoreHours',
        'data_ingress_gi_b' => 'getDataIngressGiB',
        'data_egress_gi_b' => 'getDataEgressGiB'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['pool_id'] = isset($data['pool_id']) ? $data['pool_id'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['end_time'] = isset($data['end_time']) ? $data['end_time'] : null;
        $this->container['vm_size'] = isset($data['vm_size']) ? $data['vm_size'] : null;
        $this->container['total_core_hours'] = isset($data['total_core_hours']) ? $data['total_core_hours'] : null;
        $this->container['data_ingress_gi_b'] = isset($data['data_ingress_gi_b']) ? $data['data_ingress_gi_b'] : null;
        $this->container['data_egress_gi_b'] = isset($data['data_egress_gi_b']) ? $data['data_egress_gi_b'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['pool_id'] === null) {
            $invalid_properties[] = "'pool_id' can't be null";
        }
        if ($this->container['start_time'] === null) {
            $invalid_properties[] = "'start_time' can't be null";
        }
        if ($this->container['end_time'] === null) {
            $invalid_properties[] = "'end_time' can't be null";
        }
        if ($this->container['vm_size'] === null) {
            $invalid_properties[] = "'vm_size' can't be null";
        }
        if ($this->container['total_core_hours'] === null) {
            $invalid_properties[] = "'total_core_hours' can't be null";
        }
        if ($this->container['data_ingress_gi_b'] === null) {
            $invalid_properties[] = "'data_ingress_gi_b' can't be null";
        }
        if ($this->container['data_egress_gi_b'] === null) {
            $invalid_properties[] = "'data_egress_gi_b' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['pool_id'] === null) {
            return false;
        }
        if ($this->container['start_time'] === null) {
            return false;
        }
        if ($this->container['end_time'] === null) {
            return false;
        }
        if ($this->container['vm_size'] === null) {
            return false;
        }
        if ($this->container['total_core_hours'] === null) {
            return false;
        }
        if ($this->container['data_ingress_gi_b'] === null) {
            return false;
        }
        if ($this->container['data_egress_gi_b'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets pool_id
     * @return string
     */
    public function getPoolId()
    {
        return $this->container['pool_id'];
    }

    /**
     * Sets pool_id
     * @param string $pool_id
     * @return $this
     */
    public function setPoolId($pool_id)
    {
        $this->container['pool_id'] = $pool_id;

        return $this;
    }

    /**
     * Gets start_time
     * @return \DateTime
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     * @param \DateTime $start_time
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets end_time
     * @return \DateTime
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     * @param \DateTime $end_time
     * @return $this
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets vm_size
     * @return string
     */
    public function getVmSize()
    {
        return $this->container['vm_size'];
    }

    /**
     * Sets vm_size
     * @param string $vm_size For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (http://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports all Cloud Services VM sizes except ExtraSmall. For information about available VM sizes for pools using images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
     * @return $this
     */
    public function setVmSize($vm_size)
    {
        $this->container['vm_size'] = $vm_size;

        return $this;
    }

    /**
     * Gets total_core_hours
     * @return double
     */
    public function getTotalCoreHours()
    {
        return $this->container['total_core_hours'];
    }

    /**
     * Sets total_core_hours
     * @param double $total_core_hours
     * @return $this
     */
    public function setTotalCoreHours($total_core_hours)
    {
        $this->container['total_core_hours'] = $total_core_hours;

        return $this;
    }

    /**
     * Gets data_ingress_gi_b
     * @return double
     */
    public function getDataIngressGiB()
    {
        return $this->container['data_ingress_gi_b'];
    }

    /**
     * Sets data_ingress_gi_b
     * @param double $data_ingress_gi_b
     * @return $this
     */
    public function setDataIngressGiB($data_ingress_gi_b)
    {
        $this->container['data_ingress_gi_b'] = $data_ingress_gi_b;

        return $this;
    }

    /**
     * Gets data_egress_gi_b
     * @return double
     */
    public function getDataEgressGiB()
    {
        return $this->container['data_egress_gi_b'];
    }

    /**
     * Sets data_egress_gi_b
     * @param double $data_egress_gi_b
     * @return $this
     */
    public function setDataEgressGiB($data_egress_gi_b)
    {
        $this->container['data_egress_gi_b'] = $data_egress_gi_b;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this));
    }
}


