<?php
/**
 * NodeAgentSku
 *
 * PHP version 5
 *
 * @category Class
 * @package  Progrupa\Azure
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BatchService
 *
 * A client for issuing REST requests to the Azure Batch service.
 *
 * OpenAPI spec version: 2016-07-01.3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Progrupa\Azure\Model;

use \ArrayAccess;

/**
 * NodeAgentSku Class Doc Comment
 *
 * @category    Class
 * @description The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems.
 * @package     Progrupa\Azure
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class NodeAgentSku implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'NodeAgentSku';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'verified_image_references' => '\Progrupa\Azure\Model\ImageReference[]',
        'os_type' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'verified_image_references' => 'verifiedImageReferences',
        'os_type' => 'osType'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'verified_image_references' => 'setVerifiedImageReferences',
        'os_type' => 'setOsType'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'verified_image_references' => 'getVerifiedImageReferences',
        'os_type' => 'getOsType'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const OS_TYPE_LINUX = 'linux';
    const OS_TYPE_WINDOWS = 'windows';
    const OS_TYPE_UNMAPPED = 'unmapped';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getOsTypeAllowableValues()
    {
        return [
            self::OS_TYPE_LINUX,
            self::OS_TYPE_WINDOWS,
            self::OS_TYPE_UNMAPPED,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['verified_image_references'] = isset($data['verified_image_references']) ? $data['verified_image_references'] : null;
        $this->container['os_type'] = isset($data['os_type']) ? $data['os_type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["linux", "windows", "unmapped"];
        if (!in_array($this->container['os_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'os_type', must be one of 'linux', 'windows', 'unmapped'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["linux", "windows", "unmapped"];
        if (!in_array($this->container['os_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets verified_image_references
     * @return \Progrupa\Azure\Model\ImageReference[]
     */
    public function getVerifiedImageReferences()
    {
        return $this->container['verified_image_references'];
    }

    /**
     * Sets verified_image_references
     * @param \Progrupa\Azure\Model\ImageReference[] $verified_image_references This collection is not exhaustive (the node agent may be compatible with other images).
     * @return $this
     */
    public function setVerifiedImageReferences($verified_image_references)
    {
        $this->container['verified_image_references'] = $verified_image_references;

        return $this;
    }

    /**
     * Gets os_type
     * @return string
     */
    public function getOsType()
    {
        return $this->container['os_type'];
    }

    /**
     * Sets os_type
     * @param string $os_type
     * @return $this
     */
    public function setOsType($os_type)
    {
        $allowed_values = array('linux', 'windows', 'unmapped');
        if (!is_null($os_type) && (!in_array($os_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'os_type', must be one of 'linux', 'windows', 'unmapped'");
        }
        $this->container['os_type'] = $os_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this));
    }
}


