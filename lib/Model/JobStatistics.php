<?php
/**
 * JobStatistics
 *
 * PHP version 5
 *
 * @category Class
 * @package  Progrupa\Azure
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BatchService
 *
 * A client for issuing REST requests to the Azure Batch service.
 *
 * OpenAPI spec version: 2016-07-01.3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Progrupa\Azure\Model;

use \ArrayAccess;

/**
 * JobStatistics Class Doc Comment
 *
 * @category    Class
 * @package     Progrupa\Azure
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class JobStatistics implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'JobStatistics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'start_time' => '\DateTime',
        'last_update_time' => '\DateTime',
        'user_cpu_time' => 'string',
        'kernel_cpu_time' => 'string',
        'wall_clock_time' => 'string',
        'read_i_ops' => 'int',
        'write_i_ops' => 'int',
        'read_io_gi_b' => 'double',
        'write_io_gi_b' => 'double',
        'num_succeeded_tasks' => 'int',
        'num_failed_tasks' => 'int',
        'num_task_retries' => 'int',
        'wait_time' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'start_time' => 'startTime',
        'last_update_time' => 'lastUpdateTime',
        'user_cpu_time' => 'userCPUTime',
        'kernel_cpu_time' => 'kernelCPUTime',
        'wall_clock_time' => 'wallClockTime',
        'read_i_ops' => 'readIOps',
        'write_i_ops' => 'writeIOps',
        'read_io_gi_b' => 'readIOGiB',
        'write_io_gi_b' => 'writeIOGiB',
        'num_succeeded_tasks' => 'numSucceededTasks',
        'num_failed_tasks' => 'numFailedTasks',
        'num_task_retries' => 'numTaskRetries',
        'wait_time' => 'waitTime'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'start_time' => 'setStartTime',
        'last_update_time' => 'setLastUpdateTime',
        'user_cpu_time' => 'setUserCpuTime',
        'kernel_cpu_time' => 'setKernelCpuTime',
        'wall_clock_time' => 'setWallClockTime',
        'read_i_ops' => 'setReadIOps',
        'write_i_ops' => 'setWriteIOps',
        'read_io_gi_b' => 'setReadIoGiB',
        'write_io_gi_b' => 'setWriteIoGiB',
        'num_succeeded_tasks' => 'setNumSucceededTasks',
        'num_failed_tasks' => 'setNumFailedTasks',
        'num_task_retries' => 'setNumTaskRetries',
        'wait_time' => 'setWaitTime'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'start_time' => 'getStartTime',
        'last_update_time' => 'getLastUpdateTime',
        'user_cpu_time' => 'getUserCpuTime',
        'kernel_cpu_time' => 'getKernelCpuTime',
        'wall_clock_time' => 'getWallClockTime',
        'read_i_ops' => 'getReadIOps',
        'write_i_ops' => 'getWriteIOps',
        'read_io_gi_b' => 'getReadIoGiB',
        'write_io_gi_b' => 'getWriteIoGiB',
        'num_succeeded_tasks' => 'getNumSucceededTasks',
        'num_failed_tasks' => 'getNumFailedTasks',
        'num_task_retries' => 'getNumTaskRetries',
        'wait_time' => 'getWaitTime'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['last_update_time'] = isset($data['last_update_time']) ? $data['last_update_time'] : null;
        $this->container['user_cpu_time'] = isset($data['user_cpu_time']) ? $data['user_cpu_time'] : null;
        $this->container['kernel_cpu_time'] = isset($data['kernel_cpu_time']) ? $data['kernel_cpu_time'] : null;
        $this->container['wall_clock_time'] = isset($data['wall_clock_time']) ? $data['wall_clock_time'] : null;
        $this->container['read_i_ops'] = isset($data['read_i_ops']) ? $data['read_i_ops'] : null;
        $this->container['write_i_ops'] = isset($data['write_i_ops']) ? $data['write_i_ops'] : null;
        $this->container['read_io_gi_b'] = isset($data['read_io_gi_b']) ? $data['read_io_gi_b'] : null;
        $this->container['write_io_gi_b'] = isset($data['write_io_gi_b']) ? $data['write_io_gi_b'] : null;
        $this->container['num_succeeded_tasks'] = isset($data['num_succeeded_tasks']) ? $data['num_succeeded_tasks'] : null;
        $this->container['num_failed_tasks'] = isset($data['num_failed_tasks']) ? $data['num_failed_tasks'] : null;
        $this->container['num_task_retries'] = isset($data['num_task_retries']) ? $data['num_task_retries'] : null;
        $this->container['wait_time'] = isset($data['wait_time']) ? $data['wait_time'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['url'] === null) {
            $invalid_properties[] = "'url' can't be null";
        }
        if ($this->container['start_time'] === null) {
            $invalid_properties[] = "'start_time' can't be null";
        }
        if ($this->container['last_update_time'] === null) {
            $invalid_properties[] = "'last_update_time' can't be null";
        }
        if ($this->container['user_cpu_time'] === null) {
            $invalid_properties[] = "'user_cpu_time' can't be null";
        }
        if ($this->container['kernel_cpu_time'] === null) {
            $invalid_properties[] = "'kernel_cpu_time' can't be null";
        }
        if ($this->container['wall_clock_time'] === null) {
            $invalid_properties[] = "'wall_clock_time' can't be null";
        }
        if ($this->container['read_i_ops'] === null) {
            $invalid_properties[] = "'read_i_ops' can't be null";
        }
        if ($this->container['write_i_ops'] === null) {
            $invalid_properties[] = "'write_i_ops' can't be null";
        }
        if ($this->container['read_io_gi_b'] === null) {
            $invalid_properties[] = "'read_io_gi_b' can't be null";
        }
        if ($this->container['write_io_gi_b'] === null) {
            $invalid_properties[] = "'write_io_gi_b' can't be null";
        }
        if ($this->container['num_succeeded_tasks'] === null) {
            $invalid_properties[] = "'num_succeeded_tasks' can't be null";
        }
        if ($this->container['num_failed_tasks'] === null) {
            $invalid_properties[] = "'num_failed_tasks' can't be null";
        }
        if ($this->container['num_task_retries'] === null) {
            $invalid_properties[] = "'num_task_retries' can't be null";
        }
        if ($this->container['wait_time'] === null) {
            $invalid_properties[] = "'wait_time' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['url'] === null) {
            return false;
        }
        if ($this->container['start_time'] === null) {
            return false;
        }
        if ($this->container['last_update_time'] === null) {
            return false;
        }
        if ($this->container['user_cpu_time'] === null) {
            return false;
        }
        if ($this->container['kernel_cpu_time'] === null) {
            return false;
        }
        if ($this->container['wall_clock_time'] === null) {
            return false;
        }
        if ($this->container['read_i_ops'] === null) {
            return false;
        }
        if ($this->container['write_i_ops'] === null) {
            return false;
        }
        if ($this->container['read_io_gi_b'] === null) {
            return false;
        }
        if ($this->container['write_io_gi_b'] === null) {
            return false;
        }
        if ($this->container['num_succeeded_tasks'] === null) {
            return false;
        }
        if ($this->container['num_failed_tasks'] === null) {
            return false;
        }
        if ($this->container['num_task_retries'] === null) {
            return false;
        }
        if ($this->container['wait_time'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets url
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     * @param string $url
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets start_time
     * @return \DateTime
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     * @param \DateTime $start_time
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets last_update_time
     * @return \DateTime
     */
    public function getLastUpdateTime()
    {
        return $this->container['last_update_time'];
    }

    /**
     * Sets last_update_time
     * @param \DateTime $last_update_time
     * @return $this
     */
    public function setLastUpdateTime($last_update_time)
    {
        $this->container['last_update_time'] = $last_update_time;

        return $this;
    }

    /**
     * Gets user_cpu_time
     * @return string
     */
    public function getUserCpuTime()
    {
        return $this->container['user_cpu_time'];
    }

    /**
     * Sets user_cpu_time
     * @param string $user_cpu_time
     * @return $this
     */
    public function setUserCpuTime($user_cpu_time)
    {
        $this->container['user_cpu_time'] = $user_cpu_time;

        return $this;
    }

    /**
     * Gets kernel_cpu_time
     * @return string
     */
    public function getKernelCpuTime()
    {
        return $this->container['kernel_cpu_time'];
    }

    /**
     * Sets kernel_cpu_time
     * @param string $kernel_cpu_time
     * @return $this
     */
    public function setKernelCpuTime($kernel_cpu_time)
    {
        $this->container['kernel_cpu_time'] = $kernel_cpu_time;

        return $this;
    }

    /**
     * Gets wall_clock_time
     * @return string
     */
    public function getWallClockTime()
    {
        return $this->container['wall_clock_time'];
    }

    /**
     * Sets wall_clock_time
     * @param string $wall_clock_time
     * @return $this
     */
    public function setWallClockTime($wall_clock_time)
    {
        $this->container['wall_clock_time'] = $wall_clock_time;

        return $this;
    }

    /**
     * Gets read_i_ops
     * @return int
     */
    public function getReadIOps()
    {
        return $this->container['read_i_ops'];
    }

    /**
     * Sets read_i_ops
     * @param int $read_i_ops
     * @return $this
     */
    public function setReadIOps($read_i_ops)
    {
        $this->container['read_i_ops'] = $read_i_ops;

        return $this;
    }

    /**
     * Gets write_i_ops
     * @return int
     */
    public function getWriteIOps()
    {
        return $this->container['write_i_ops'];
    }

    /**
     * Sets write_i_ops
     * @param int $write_i_ops
     * @return $this
     */
    public function setWriteIOps($write_i_ops)
    {
        $this->container['write_i_ops'] = $write_i_ops;

        return $this;
    }

    /**
     * Gets read_io_gi_b
     * @return double
     */
    public function getReadIoGiB()
    {
        return $this->container['read_io_gi_b'];
    }

    /**
     * Sets read_io_gi_b
     * @param double $read_io_gi_b
     * @return $this
     */
    public function setReadIoGiB($read_io_gi_b)
    {
        $this->container['read_io_gi_b'] = $read_io_gi_b;

        return $this;
    }

    /**
     * Gets write_io_gi_b
     * @return double
     */
    public function getWriteIoGiB()
    {
        return $this->container['write_io_gi_b'];
    }

    /**
     * Sets write_io_gi_b
     * @param double $write_io_gi_b
     * @return $this
     */
    public function setWriteIoGiB($write_io_gi_b)
    {
        $this->container['write_io_gi_b'] = $write_io_gi_b;

        return $this;
    }

    /**
     * Gets num_succeeded_tasks
     * @return int
     */
    public function getNumSucceededTasks()
    {
        return $this->container['num_succeeded_tasks'];
    }

    /**
     * Sets num_succeeded_tasks
     * @param int $num_succeeded_tasks A task completes successfully if it returns exit code 0.
     * @return $this
     */
    public function setNumSucceededTasks($num_succeeded_tasks)
    {
        $this->container['num_succeeded_tasks'] = $num_succeeded_tasks;

        return $this;
    }

    /**
     * Gets num_failed_tasks
     * @return int
     */
    public function getNumFailedTasks()
    {
        return $this->container['num_failed_tasks'];
    }

    /**
     * Sets num_failed_tasks
     * @param int $num_failed_tasks A task fails if it exhausts its maximum retry count without returning exit code 0.
     * @return $this
     */
    public function setNumFailedTasks($num_failed_tasks)
    {
        $this->container['num_failed_tasks'] = $num_failed_tasks;

        return $this;
    }

    /**
     * Gets num_task_retries
     * @return int
     */
    public function getNumTaskRetries()
    {
        return $this->container['num_task_retries'];
    }

    /**
     * Sets num_task_retries
     * @param int $num_task_retries
     * @return $this
     */
    public function setNumTaskRetries($num_task_retries)
    {
        $this->container['num_task_retries'] = $num_task_retries;

        return $this;
    }

    /**
     * Gets wait_time
     * @return string
     */
    public function getWaitTime()
    {
        return $this->container['wait_time'];
    }

    /**
     * Sets wait_time
     * @param string $wait_time The wait time for a task is defined as the elapsed time between the creation of the task and the start of task execution. (If the task is retried due to failures, the wait time is the time to the most recent task execution.) This value is only reported in the account lifetime statistics; it is not included in the job statistics.
     * @return $this
     */
    public function setWaitTime($wait_time)
    {
        $this->container['wait_time'] = $wait_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this));
    }
}


