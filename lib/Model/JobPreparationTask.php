<?php
/**
 * JobPreparationTask
 *
 * PHP version 5
 *
 * @category Class
 * @package  Progrupa\Azure
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BatchService
 *
 * A client for issuing REST requests to the Azure Batch service.
 *
 * OpenAPI spec version: 2016-07-01.3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Progrupa\Azure\Model;

use \ArrayAccess;

/**
 * JobPreparationTask Class Doc Comment
 *
 * @category    Class
 * @package     Progrupa\Azure
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class JobPreparationTask implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'JobPreparationTask';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'command_line' => 'string',
        'resource_files' => '\Progrupa\Azure\Model\ResourceFile[]',
        'environment_settings' => '\Progrupa\Azure\Model\EnvironmentSetting[]',
        'constraints' => '\Progrupa\Azure\Model\TaskConstraints',
        'wait_for_success' => 'bool',
        'run_elevated' => 'bool',
        'rerun_on_node_reboot_after_success' => 'bool'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'command_line' => 'commandLine',
        'resource_files' => 'resourceFiles',
        'environment_settings' => 'environmentSettings',
        'constraints' => 'constraints',
        'wait_for_success' => 'waitForSuccess',
        'run_elevated' => 'runElevated',
        'rerun_on_node_reboot_after_success' => 'rerunOnNodeRebootAfterSuccess'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'command_line' => 'setCommandLine',
        'resource_files' => 'setResourceFiles',
        'environment_settings' => 'setEnvironmentSettings',
        'constraints' => 'setConstraints',
        'wait_for_success' => 'setWaitForSuccess',
        'run_elevated' => 'setRunElevated',
        'rerun_on_node_reboot_after_success' => 'setRerunOnNodeRebootAfterSuccess'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'command_line' => 'getCommandLine',
        'resource_files' => 'getResourceFiles',
        'environment_settings' => 'getEnvironmentSettings',
        'constraints' => 'getConstraints',
        'wait_for_success' => 'getWaitForSuccess',
        'run_elevated' => 'getRunElevated',
        'rerun_on_node_reboot_after_success' => 'getRerunOnNodeRebootAfterSuccess'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['command_line'] = isset($data['command_line']) ? $data['command_line'] : null;
        $this->container['resource_files'] = isset($data['resource_files']) ? $data['resource_files'] : null;
        $this->container['environment_settings'] = isset($data['environment_settings']) ? $data['environment_settings'] : null;
        $this->container['constraints'] = isset($data['constraints']) ? $data['constraints'] : null;
        $this->container['wait_for_success'] = isset($data['wait_for_success']) ? $data['wait_for_success'] : null;
        $this->container['run_elevated'] = isset($data['run_elevated']) ? $data['run_elevated'] : null;
        $this->container['rerun_on_node_reboot_after_success'] = isset($data['rerun_on_node_reboot_after_success']) ? $data['rerun_on_node_reboot_after_success'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['command_line'] === null) {
            $invalid_properties[] = "'command_line' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['command_line'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property, the Batch service assigns a default value of 'jobpreparation'. No other task in the job can have the same id as the Job Preparation task. If you try to submit a task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobPreparationTask; if you are calling the REST API directly, the HTTP status code is 409 (Conflict).
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets command_line
     * @return string
     */
    public function getCommandLine()
    {
        return $this->container['command_line'];
    }

    /**
     * Sets command_line
     * @param string $command_line The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux.
     * @return $this
     */
    public function setCommandLine($command_line)
    {
        $this->container['command_line'] = $command_line;

        return $this;
    }

    /**
     * Gets resource_files
     * @return \Progrupa\Azure\Model\ResourceFile[]
     */
    public function getResourceFiles()
    {
        return $this->container['resource_files'];
    }

    /**
     * Sets resource_files
     * @param \Progrupa\Azure\Model\ResourceFile[] $resource_files Files listed under this element are located in the task's working directory.
     * @return $this
     */
    public function setResourceFiles($resource_files)
    {
        $this->container['resource_files'] = $resource_files;

        return $this;
    }

    /**
     * Gets environment_settings
     * @return \Progrupa\Azure\Model\EnvironmentSetting[]
     */
    public function getEnvironmentSettings()
    {
        return $this->container['environment_settings'];
    }

    /**
     * Sets environment_settings
     * @param \Progrupa\Azure\Model\EnvironmentSetting[] $environment_settings
     * @return $this
     */
    public function setEnvironmentSettings($environment_settings)
    {
        $this->container['environment_settings'] = $environment_settings;

        return $this;
    }

    /**
     * Gets constraints
     * @return \Progrupa\Azure\Model\TaskConstraints
     */
    public function getConstraints()
    {
        return $this->container['constraints'];
    }

    /**
     * Sets constraints
     * @param \Progrupa\Azure\Model\TaskConstraints $constraints
     * @return $this
     */
    public function setConstraints($constraints)
    {
        $this->container['constraints'] = $constraints;

        return $this;
    }

    /**
     * Gets wait_for_success
     * @return bool
     */
    public function getWaitForSuccess()
    {
        return $this->container['wait_for_success'];
    }

    /**
     * Sets wait_for_success
     * @param bool $wait_for_success If true and the Job Preparation task fails on a compute node, the Batch service retries the Job Preparation task up to its maximum retry count (as specified in the constraints element). If the task has still not completed successfully after all retries, then the Batch service will not schedule tasks of the job to the compute node. The compute node remains active and eligible to run tasks of other jobs. If false, the Batch service will not wait for the Job Preparation task to complete. In this case, other tasks of the job can start executing on the compute node while the Job Preparation task is still running; and even if the Job Preparation task fails, new tasks will continue to be scheduled on the node. The default value is true.
     * @return $this
     */
    public function setWaitForSuccess($wait_for_success)
    {
        $this->container['wait_for_success'] = $wait_for_success;

        return $this;
    }

    /**
     * Gets run_elevated
     * @return bool
     */
    public function getRunElevated()
    {
        return $this->container['run_elevated'];
    }

    /**
     * Sets run_elevated
     * @param bool $run_elevated
     * @return $this
     */
    public function setRunElevated($run_elevated)
    {
        $this->container['run_elevated'] = $run_elevated;

        return $this;
    }

    /**
     * Gets rerun_on_node_reboot_after_success
     * @return bool
     */
    public function getRerunOnNodeRebootAfterSuccess()
    {
        return $this->container['rerun_on_node_reboot_after_success'];
    }

    /**
     * Sets rerun_on_node_reboot_after_success
     * @param bool $rerun_on_node_reboot_after_success The Job Preparation task is always rerun if a compute node is reimaged, or if the Job Preparation task did not complete (e.g. because the reboot occurred while the task was running). Therefore, you should always write a Job Preparation task to be idempotent and to behave correctly if run multiple times. The default value is true.
     * @return $this
     */
    public function setRerunOnNodeRebootAfterSuccess($rerun_on_node_reboot_after_success)
    {
        $this->container['rerun_on_node_reboot_after_success'] = $rerun_on_node_reboot_after_success;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this));
    }
}


