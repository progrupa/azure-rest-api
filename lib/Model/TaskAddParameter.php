<?php
/**
 * TaskAddParameter
 *
 * PHP version 5
 *
 * @category Class
 * @package  Progrupa\Azure
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BatchService
 *
 * A client for issuing REST requests to the Azure Batch service.
 *
 * OpenAPI spec version: 2016-07-01.3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Progrupa\Azure\Model;

use \ArrayAccess;

/**
 * TaskAddParameter Class Doc Comment
 *
 * @category    Class
 * @package     Progrupa\Azure
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TaskAddParameter implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'TaskAddParameter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'display_name' => 'string',
        'command_line' => 'string',
        'exit_conditions' => '\Progrupa\Azure\Model\ExitConditions',
        'resource_files' => '\Progrupa\Azure\Model\ResourceFile[]',
        'environment_settings' => '\Progrupa\Azure\Model\EnvironmentSetting[]',
        'affinity_info' => '\Progrupa\Azure\Model\AffinityInformation',
        'constraints' => '\Progrupa\Azure\Model\TaskConstraints',
        'run_elevated' => 'bool',
        'multi_instance_settings' => '\Progrupa\Azure\Model\MultiInstanceSettings',
        'depends_on' => '\Progrupa\Azure\Model\TaskDependencies',
        'application_package_references' => '\Progrupa\Azure\Model\ApplicationPackageReference[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'display_name' => 'displayName',
        'command_line' => 'commandLine',
        'exit_conditions' => 'exitConditions',
        'resource_files' => 'resourceFiles',
        'environment_settings' => 'environmentSettings',
        'affinity_info' => 'affinityInfo',
        'constraints' => 'constraints',
        'run_elevated' => 'runElevated',
        'multi_instance_settings' => 'multiInstanceSettings',
        'depends_on' => 'dependsOn',
        'application_package_references' => 'applicationPackageReferences'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'display_name' => 'setDisplayName',
        'command_line' => 'setCommandLine',
        'exit_conditions' => 'setExitConditions',
        'resource_files' => 'setResourceFiles',
        'environment_settings' => 'setEnvironmentSettings',
        'affinity_info' => 'setAffinityInfo',
        'constraints' => 'setConstraints',
        'run_elevated' => 'setRunElevated',
        'multi_instance_settings' => 'setMultiInstanceSettings',
        'depends_on' => 'setDependsOn',
        'application_package_references' => 'setApplicationPackageReferences'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'display_name' => 'getDisplayName',
        'command_line' => 'getCommandLine',
        'exit_conditions' => 'getExitConditions',
        'resource_files' => 'getResourceFiles',
        'environment_settings' => 'getEnvironmentSettings',
        'affinity_info' => 'getAffinityInfo',
        'constraints' => 'getConstraints',
        'run_elevated' => 'getRunElevated',
        'multi_instance_settings' => 'getMultiInstanceSettings',
        'depends_on' => 'getDependsOn',
        'application_package_references' => 'getApplicationPackageReferences'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['command_line'] = isset($data['command_line']) ? $data['command_line'] : null;
        $this->container['exit_conditions'] = isset($data['exit_conditions']) ? $data['exit_conditions'] : null;
        $this->container['resource_files'] = isset($data['resource_files']) ? $data['resource_files'] : null;
        $this->container['environment_settings'] = isset($data['environment_settings']) ? $data['environment_settings'] : null;
        $this->container['affinity_info'] = isset($data['affinity_info']) ? $data['affinity_info'] : null;
        $this->container['constraints'] = isset($data['constraints']) ? $data['constraints'] : null;
        $this->container['run_elevated'] = isset($data['run_elevated']) ? $data['run_elevated'] : null;
        $this->container['multi_instance_settings'] = isset($data['multi_instance_settings']) ? $data['multi_instance_settings'] : null;
        $this->container['depends_on'] = isset($data['depends_on']) ? $data['depends_on'] : null;
        $this->container['application_package_references'] = isset($data['application_package_references']) ? $data['application_package_references'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['command_line'] === null) {
            $invalid_properties[] = "'command_line' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['command_line'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within a job that differ only by case).
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets display_name
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     * @param string $display_name The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets command_line
     * @return string
     */
    public function getCommandLine()
    {
        return $this->container['command_line'];
    }

    /**
     * Sets command_line
     * @param string $command_line For multi-instance tasks, the command line is executed as the primary task, after the primary task and all subtasks have finished executing the coordination command line. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux.
     * @return $this
     */
    public function setCommandLine($command_line)
    {
        $this->container['command_line'] = $command_line;

        return $this;
    }

    /**
     * Gets exit_conditions
     * @return \Progrupa\Azure\Model\ExitConditions
     */
    public function getExitConditions()
    {
        return $this->container['exit_conditions'];
    }

    /**
     * Sets exit_conditions
     * @param \Progrupa\Azure\Model\ExitConditions $exit_conditions How the Batch service should respond when the task completes.
     * @return $this
     */
    public function setExitConditions($exit_conditions)
    {
        $this->container['exit_conditions'] = $exit_conditions;

        return $this;
    }

    /**
     * Gets resource_files
     * @return \Progrupa\Azure\Model\ResourceFile[]
     */
    public function getResourceFiles()
    {
        return $this->container['resource_files'];
    }

    /**
     * Sets resource_files
     * @param \Progrupa\Azure\Model\ResourceFile[] $resource_files For multi-instance tasks, the resource files will only be downloaded to the compute node on which the primary task is executed.
     * @return $this
     */
    public function setResourceFiles($resource_files)
    {
        $this->container['resource_files'] = $resource_files;

        return $this;
    }

    /**
     * Gets environment_settings
     * @return \Progrupa\Azure\Model\EnvironmentSetting[]
     */
    public function getEnvironmentSettings()
    {
        return $this->container['environment_settings'];
    }

    /**
     * Sets environment_settings
     * @param \Progrupa\Azure\Model\EnvironmentSetting[] $environment_settings
     * @return $this
     */
    public function setEnvironmentSettings($environment_settings)
    {
        $this->container['environment_settings'] = $environment_settings;

        return $this;
    }

    /**
     * Gets affinity_info
     * @return \Progrupa\Azure\Model\AffinityInformation
     */
    public function getAffinityInfo()
    {
        return $this->container['affinity_info'];
    }

    /**
     * Sets affinity_info
     * @param \Progrupa\Azure\Model\AffinityInformation $affinity_info
     * @return $this
     */
    public function setAffinityInfo($affinity_info)
    {
        $this->container['affinity_info'] = $affinity_info;

        return $this;
    }

    /**
     * Gets constraints
     * @return \Progrupa\Azure\Model\TaskConstraints
     */
    public function getConstraints()
    {
        return $this->container['constraints'];
    }

    /**
     * Sets constraints
     * @param \Progrupa\Azure\Model\TaskConstraints $constraints If you do not specify constraints, the maxTaskRetryCount is the maxTaskRetryCount specified for the job, and the maxWallClockTime and retentionTime are infinite.
     * @return $this
     */
    public function setConstraints($constraints)
    {
        $this->container['constraints'] = $constraints;

        return $this;
    }

    /**
     * Gets run_elevated
     * @return bool
     */
    public function getRunElevated()
    {
        return $this->container['run_elevated'];
    }

    /**
     * Sets run_elevated
     * @param bool $run_elevated The default value is false.
     * @return $this
     */
    public function setRunElevated($run_elevated)
    {
        $this->container['run_elevated'] = $run_elevated;

        return $this;
    }

    /**
     * Gets multi_instance_settings
     * @return \Progrupa\Azure\Model\MultiInstanceSettings
     */
    public function getMultiInstanceSettings()
    {
        return $this->container['multi_instance_settings'];
    }

    /**
     * Sets multi_instance_settings
     * @param \Progrupa\Azure\Model\MultiInstanceSettings $multi_instance_settings
     * @return $this
     */
    public function setMultiInstanceSettings($multi_instance_settings)
    {
        $this->container['multi_instance_settings'] = $multi_instance_settings;

        return $this;
    }

    /**
     * Gets depends_on
     * @return \Progrupa\Azure\Model\TaskDependencies
     */
    public function getDependsOn()
    {
        return $this->container['depends_on'];
    }

    /**
     * Sets depends_on
     * @param \Progrupa\Azure\Model\TaskDependencies $depends_on The task will not be scheduled until all depended-on tasks have completed successfully. (If any depended-on tasks fail and exhaust their retry counts, the task will never be scheduled.) If the job does not have usesTaskDependencies set to true, and this element is present, the request fails with error code TaskDependenciesNotSpecifiedOnJob.
     * @return $this
     */
    public function setDependsOn($depends_on)
    {
        $this->container['depends_on'] = $depends_on;

        return $this;
    }

    /**
     * Gets application_package_references
     * @return \Progrupa\Azure\Model\ApplicationPackageReference[]
     */
    public function getApplicationPackageReferences()
    {
        return $this->container['application_package_references'];
    }

    /**
     * Sets application_package_references
     * @param \Progrupa\Azure\Model\ApplicationPackageReference[] $application_package_references
     * @return $this
     */
    public function setApplicationPackageReferences($application_package_references)
    {
        $this->container['application_package_references'] = $application_package_references;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this));
    }
}


