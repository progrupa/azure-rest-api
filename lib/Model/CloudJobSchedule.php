<?php
/**
 * CloudJobSchedule
 *
 * PHP version 5
 *
 * @category Class
 * @package  Progrupa\Azure
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BatchService
 *
 * A client for issuing REST requests to the Azure Batch service.
 *
 * OpenAPI spec version: 2016-07-01.3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Progrupa\Azure\Model;

use \ArrayAccess;

/**
 * CloudJobSchedule Class Doc Comment
 *
 * @category    Class
 * @package     Progrupa\Azure
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CloudJobSchedule implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CloudJobSchedule';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'display_name' => 'string',
        'url' => 'string',
        'e_tag' => 'string',
        'last_modified' => '\DateTime',
        'creation_time' => '\DateTime',
        'state' => 'string',
        'state_transition_time' => '\DateTime',
        'previous_state' => 'string',
        'previous_state_transition_time' => '\DateTime',
        'schedule' => '\Progrupa\Azure\Model\Schedule',
        'job_specification' => '\Progrupa\Azure\Model\JobSpecification',
        'execution_info' => '\Progrupa\Azure\Model\JobScheduleExecutionInformation',
        'metadata' => '\Progrupa\Azure\Model\MetadataItem[]',
        'stats' => '\Progrupa\Azure\Model\JobScheduleStatistics'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'display_name' => 'displayName',
        'url' => 'url',
        'e_tag' => 'eTag',
        'last_modified' => 'lastModified',
        'creation_time' => 'creationTime',
        'state' => 'state',
        'state_transition_time' => 'stateTransitionTime',
        'previous_state' => 'previousState',
        'previous_state_transition_time' => 'previousStateTransitionTime',
        'schedule' => 'schedule',
        'job_specification' => 'jobSpecification',
        'execution_info' => 'executionInfo',
        'metadata' => 'metadata',
        'stats' => 'stats'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'display_name' => 'setDisplayName',
        'url' => 'setUrl',
        'e_tag' => 'setETag',
        'last_modified' => 'setLastModified',
        'creation_time' => 'setCreationTime',
        'state' => 'setState',
        'state_transition_time' => 'setStateTransitionTime',
        'previous_state' => 'setPreviousState',
        'previous_state_transition_time' => 'setPreviousStateTransitionTime',
        'schedule' => 'setSchedule',
        'job_specification' => 'setJobSpecification',
        'execution_info' => 'setExecutionInfo',
        'metadata' => 'setMetadata',
        'stats' => 'setStats'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'display_name' => 'getDisplayName',
        'url' => 'getUrl',
        'e_tag' => 'getETag',
        'last_modified' => 'getLastModified',
        'creation_time' => 'getCreationTime',
        'state' => 'getState',
        'state_transition_time' => 'getStateTransitionTime',
        'previous_state' => 'getPreviousState',
        'previous_state_transition_time' => 'getPreviousStateTransitionTime',
        'schedule' => 'getSchedule',
        'job_specification' => 'getJobSpecification',
        'execution_info' => 'getExecutionInfo',
        'metadata' => 'getMetadata',
        'stats' => 'getStats'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const STATE_ACTIVE = 'active';
    const STATE_COMPLETED = 'completed';
    const STATE_DISABLED = 'disabled';
    const STATE_TERMINATING = 'terminating';
    const STATE_DELETING = 'deleting';
    const PREVIOUS_STATE_ACTIVE = 'active';
    const PREVIOUS_STATE_COMPLETED = 'completed';
    const PREVIOUS_STATE_DISABLED = 'disabled';
    const PREVIOUS_STATE_TERMINATING = 'terminating';
    const PREVIOUS_STATE_DELETING = 'deleting';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_ACTIVE,
            self::STATE_COMPLETED,
            self::STATE_DISABLED,
            self::STATE_TERMINATING,
            self::STATE_DELETING,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPreviousStateAllowableValues()
    {
        return [
            self::PREVIOUS_STATE_ACTIVE,
            self::PREVIOUS_STATE_COMPLETED,
            self::PREVIOUS_STATE_DISABLED,
            self::PREVIOUS_STATE_TERMINATING,
            self::PREVIOUS_STATE_DELETING,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['e_tag'] = isset($data['e_tag']) ? $data['e_tag'] : null;
        $this->container['last_modified'] = isset($data['last_modified']) ? $data['last_modified'] : null;
        $this->container['creation_time'] = isset($data['creation_time']) ? $data['creation_time'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['state_transition_time'] = isset($data['state_transition_time']) ? $data['state_transition_time'] : null;
        $this->container['previous_state'] = isset($data['previous_state']) ? $data['previous_state'] : null;
        $this->container['previous_state_transition_time'] = isset($data['previous_state_transition_time']) ? $data['previous_state_transition_time'] : null;
        $this->container['schedule'] = isset($data['schedule']) ? $data['schedule'] : null;
        $this->container['job_specification'] = isset($data['job_specification']) ? $data['job_specification'] : null;
        $this->container['execution_info'] = isset($data['execution_info']) ? $data['execution_info'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['stats'] = isset($data['stats']) ? $data['stats'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["active", "completed", "disabled", "terminating", "deleting"];
        if (!in_array($this->container['state'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'state', must be one of 'active', 'completed', 'disabled', 'terminating', 'deleting'.";
        }

        $allowed_values = ["active", "completed", "disabled", "terminating", "deleting"];
        if (!in_array($this->container['previous_state'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'previous_state', must be one of 'active', 'completed', 'disabled', 'terminating', 'deleting'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["active", "completed", "disabled", "terminating", "deleting"];
        if (!in_array($this->container['state'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["active", "completed", "disabled", "terminating", "deleting"];
        if (!in_array($this->container['previous_state'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id It is common to use a GUID for the id.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets display_name
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     * @param string $display_name
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets url
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     * @param string $url
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets e_tag
     * @return string
     */
    public function getETag()
    {
        return $this->container['e_tag'];
    }

    /**
     * Sets e_tag
     * @param string $e_tag This is an opaque string. You can use it to detect whether the job schedule has changed between requests. In particular, you can be pass the ETag with an Update Job Schedule request to specify that your changes should take effect only if nobody else has modified the schedule in the meantime.
     * @return $this
     */
    public function setETag($e_tag)
    {
        $this->container['e_tag'] = $e_tag;

        return $this;
    }

    /**
     * Gets last_modified
     * @return \DateTime
     */
    public function getLastModified()
    {
        return $this->container['last_modified'];
    }

    /**
     * Sets last_modified
     * @param \DateTime $last_modified This is the last time at which the schedule level data, such as the job specification or recurrence information, changed. It does not factor in job-level changes such as new jobs being created or jobs changing state.
     * @return $this
     */
    public function setLastModified($last_modified)
    {
        $this->container['last_modified'] = $last_modified;

        return $this;
    }

    /**
     * Gets creation_time
     * @return \DateTime
     */
    public function getCreationTime()
    {
        return $this->container['creation_time'];
    }

    /**
     * Sets creation_time
     * @param \DateTime $creation_time
     * @return $this
     */
    public function setCreationTime($creation_time)
    {
        $this->container['creation_time'] = $creation_time;

        return $this;
    }

    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param string $state
     * @return $this
     */
    public function setState($state)
    {
        $allowed_values = array('active', 'completed', 'disabled', 'terminating', 'deleting');
        if (!is_null($state) && (!in_array($state, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'state', must be one of 'active', 'completed', 'disabled', 'terminating', 'deleting'");
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets state_transition_time
     * @return \DateTime
     */
    public function getStateTransitionTime()
    {
        return $this->container['state_transition_time'];
    }

    /**
     * Sets state_transition_time
     * @param \DateTime $state_transition_time
     * @return $this
     */
    public function setStateTransitionTime($state_transition_time)
    {
        $this->container['state_transition_time'] = $state_transition_time;

        return $this;
    }

    /**
     * Gets previous_state
     * @return string
     */
    public function getPreviousState()
    {
        return $this->container['previous_state'];
    }

    /**
     * Sets previous_state
     * @param string $previous_state This property is not present if the job schedule is in its initial active state.
     * @return $this
     */
    public function setPreviousState($previous_state)
    {
        $allowed_values = array('active', 'completed', 'disabled', 'terminating', 'deleting');
        if (!is_null($previous_state) && (!in_array($previous_state, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'previous_state', must be one of 'active', 'completed', 'disabled', 'terminating', 'deleting'");
        }
        $this->container['previous_state'] = $previous_state;

        return $this;
    }

    /**
     * Gets previous_state_transition_time
     * @return \DateTime
     */
    public function getPreviousStateTransitionTime()
    {
        return $this->container['previous_state_transition_time'];
    }

    /**
     * Sets previous_state_transition_time
     * @param \DateTime $previous_state_transition_time This property is not present if the job schedule is in its initial active state.
     * @return $this
     */
    public function setPreviousStateTransitionTime($previous_state_transition_time)
    {
        $this->container['previous_state_transition_time'] = $previous_state_transition_time;

        return $this;
    }

    /**
     * Gets schedule
     * @return \Progrupa\Azure\Model\Schedule
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     * @param \Progrupa\Azure\Model\Schedule $schedule
     * @return $this
     */
    public function setSchedule($schedule)
    {
        $this->container['schedule'] = $schedule;

        return $this;
    }

    /**
     * Gets job_specification
     * @return \Progrupa\Azure\Model\JobSpecification
     */
    public function getJobSpecification()
    {
        return $this->container['job_specification'];
    }

    /**
     * Sets job_specification
     * @param \Progrupa\Azure\Model\JobSpecification $job_specification
     * @return $this
     */
    public function setJobSpecification($job_specification)
    {
        $this->container['job_specification'] = $job_specification;

        return $this;
    }

    /**
     * Gets execution_info
     * @return \Progrupa\Azure\Model\JobScheduleExecutionInformation
     */
    public function getExecutionInfo()
    {
        return $this->container['execution_info'];
    }

    /**
     * Sets execution_info
     * @param \Progrupa\Azure\Model\JobScheduleExecutionInformation $execution_info
     * @return $this
     */
    public function setExecutionInfo($execution_info)
    {
        $this->container['execution_info'] = $execution_info;

        return $this;
    }

    /**
     * Gets metadata
     * @return \Progrupa\Azure\Model\MetadataItem[]
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     * @param \Progrupa\Azure\Model\MetadataItem[] $metadata The Batch service does not assign any meaning to metadata; it is solely for the use of user code.
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets stats
     * @return \Progrupa\Azure\Model\JobScheduleStatistics
     */
    public function getStats()
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     * @param \Progrupa\Azure\Model\JobScheduleStatistics $stats
     * @return $this
     */
    public function setStats($stats)
    {
        $this->container['stats'] = $stats;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this));
    }
}


