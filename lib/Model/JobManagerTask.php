<?php
/**
 * JobManagerTask
 *
 * PHP version 5
 *
 * @category Class
 * @package  Progrupa\Azure
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BatchService
 *
 * A client for issuing REST requests to the Azure Batch service.
 *
 * OpenAPI spec version: 2016-07-01.3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Progrupa\Azure\Model;

use \ArrayAccess;

/**
 * JobManagerTask Class Doc Comment
 *
 * @category    Class
 * @package     Progrupa\Azure
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class JobManagerTask implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'JobManagerTask';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'display_name' => 'string',
        'command_line' => 'string',
        'resource_files' => '\Progrupa\Azure\Model\ResourceFile[]',
        'environment_settings' => '\Progrupa\Azure\Model\EnvironmentSetting[]',
        'constraints' => '\Progrupa\Azure\Model\TaskConstraints',
        'kill_job_on_completion' => 'bool',
        'run_elevated' => 'bool',
        'run_exclusive' => 'bool',
        'application_package_references' => '\Progrupa\Azure\Model\ApplicationPackageReference[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'display_name' => 'displayName',
        'command_line' => 'commandLine',
        'resource_files' => 'resourceFiles',
        'environment_settings' => 'environmentSettings',
        'constraints' => 'constraints',
        'kill_job_on_completion' => 'killJobOnCompletion',
        'run_elevated' => 'runElevated',
        'run_exclusive' => 'runExclusive',
        'application_package_references' => 'applicationPackageReferences'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'display_name' => 'setDisplayName',
        'command_line' => 'setCommandLine',
        'resource_files' => 'setResourceFiles',
        'environment_settings' => 'setEnvironmentSettings',
        'constraints' => 'setConstraints',
        'kill_job_on_completion' => 'setKillJobOnCompletion',
        'run_elevated' => 'setRunElevated',
        'run_exclusive' => 'setRunExclusive',
        'application_package_references' => 'setApplicationPackageReferences'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'display_name' => 'getDisplayName',
        'command_line' => 'getCommandLine',
        'resource_files' => 'getResourceFiles',
        'environment_settings' => 'getEnvironmentSettings',
        'constraints' => 'getConstraints',
        'kill_job_on_completion' => 'getKillJobOnCompletion',
        'run_elevated' => 'getRunElevated',
        'run_exclusive' => 'getRunExclusive',
        'application_package_references' => 'getApplicationPackageReferences'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['command_line'] = isset($data['command_line']) ? $data['command_line'] : null;
        $this->container['resource_files'] = isset($data['resource_files']) ? $data['resource_files'] : null;
        $this->container['environment_settings'] = isset($data['environment_settings']) ? $data['environment_settings'] : null;
        $this->container['constraints'] = isset($data['constraints']) ? $data['constraints'] : null;
        $this->container['kill_job_on_completion'] = isset($data['kill_job_on_completion']) ? $data['kill_job_on_completion'] : null;
        $this->container['run_elevated'] = isset($data['run_elevated']) ? $data['run_elevated'] : null;
        $this->container['run_exclusive'] = isset($data['run_exclusive']) ? $data['run_exclusive'] : null;
        $this->container['application_package_references'] = isset($data['application_package_references']) ? $data['application_package_references'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['command_line'] === null) {
            $invalid_properties[] = "'command_line' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['command_line'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id The id can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets display_name
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     * @param string $display_name It need not be unique and can contain any Unicode characters up to a maximum length of 1024.
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets command_line
     * @return string
     */
    public function getCommandLine()
    {
        return $this->container['command_line'];
    }

    /**
     * Sets command_line
     * @param string $command_line The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux.
     * @return $this
     */
    public function setCommandLine($command_line)
    {
        $this->container['command_line'] = $command_line;

        return $this;
    }

    /**
     * Gets resource_files
     * @return \Progrupa\Azure\Model\ResourceFile[]
     */
    public function getResourceFiles()
    {
        return $this->container['resource_files'];
    }

    /**
     * Sets resource_files
     * @param \Progrupa\Azure\Model\ResourceFile[] $resource_files Files listed under this element are located in the task's working directory.
     * @return $this
     */
    public function setResourceFiles($resource_files)
    {
        $this->container['resource_files'] = $resource_files;

        return $this;
    }

    /**
     * Gets environment_settings
     * @return \Progrupa\Azure\Model\EnvironmentSetting[]
     */
    public function getEnvironmentSettings()
    {
        return $this->container['environment_settings'];
    }

    /**
     * Sets environment_settings
     * @param \Progrupa\Azure\Model\EnvironmentSetting[] $environment_settings
     * @return $this
     */
    public function setEnvironmentSettings($environment_settings)
    {
        $this->container['environment_settings'] = $environment_settings;

        return $this;
    }

    /**
     * Gets constraints
     * @return \Progrupa\Azure\Model\TaskConstraints
     */
    public function getConstraints()
    {
        return $this->container['constraints'];
    }

    /**
     * Sets constraints
     * @param \Progrupa\Azure\Model\TaskConstraints $constraints
     * @return $this
     */
    public function setConstraints($constraints)
    {
        $this->container['constraints'] = $constraints;

        return $this;
    }

    /**
     * Gets kill_job_on_completion
     * @return bool
     */
    public function getKillJobOnCompletion()
    {
        return $this->container['kill_job_on_completion'];
    }

    /**
     * Sets kill_job_on_completion
     * @param bool $kill_job_on_completion If true, when the Job Manager task completes, the Batch service marks the job as complete. If any tasks are still running at this time (other than Job Release), those tasks are terminated. If false, the completion of the Job Manager task does not affect the job status. In this case, you should either use the onAllTasksComplete attribute to terminate the job, or have a client or user terminate the job explicitly. An example of this is if the Job Manager creates a set of tasks but then takes no further role in their execution. The default value is true. If you are using the onAllTasksComplete and onTaskFailure attributes to control job lifetime, and using the job manager task only to create the tasks for the job (not to monitor progress), then it is important to set killJobOnCompletion to false.
     * @return $this
     */
    public function setKillJobOnCompletion($kill_job_on_completion)
    {
        $this->container['kill_job_on_completion'] = $kill_job_on_completion;

        return $this;
    }

    /**
     * Gets run_elevated
     * @return bool
     */
    public function getRunElevated()
    {
        return $this->container['run_elevated'];
    }

    /**
     * Sets run_elevated
     * @param bool $run_elevated
     * @return $this
     */
    public function setRunElevated($run_elevated)
    {
        $this->container['run_elevated'] = $run_elevated;

        return $this;
    }

    /**
     * Gets run_exclusive
     * @return bool
     */
    public function getRunExclusive()
    {
        return $this->container['run_exclusive'];
    }

    /**
     * Sets run_exclusive
     * @param bool $run_exclusive If true, no other tasks will run on the same compute node for as long as the Job Manager is running. If false, other tasks can run simultaneously with the Job Manager on a compute node. The Job Manager task counts normally against the node's concurrent task limit, so this is only relevant if the node allows multiple concurrent tasks. The default value is true.
     * @return $this
     */
    public function setRunExclusive($run_exclusive)
    {
        $this->container['run_exclusive'] = $run_exclusive;

        return $this;
    }

    /**
     * Gets application_package_references
     * @return \Progrupa\Azure\Model\ApplicationPackageReference[]
     */
    public function getApplicationPackageReferences()
    {
        return $this->container['application_package_references'];
    }

    /**
     * Sets application_package_references
     * @param \Progrupa\Azure\Model\ApplicationPackageReference[] $application_package_references Application packages are downloaded and deployed to a shared directory, not the task directory. Therefore, if a referenced package is already on the compute node, and is up to date, then it is not re-downloaded; the existing copy on the compute node is used. If a referenced application package cannot be installed, for example because the package has been deleted or because download failed, the task fails with a scheduling error. This property is currently not supported on jobs running on pools created using the virtualMachineConfiguration (IaaS) property. If a task specifying applicationPackageReferences runs on such a pool, it fails with a scheduling error with code TaskSchedulingConstraintFailed.
     * @return $this
     */
    public function setApplicationPackageReferences($application_package_references)
    {
        $this->container['application_package_references'] = $application_package_references;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this));
    }
}


