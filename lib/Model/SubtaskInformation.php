<?php
/**
 * SubtaskInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Progrupa\Azure
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BatchService
 *
 * A client for issuing REST requests to the Azure Batch service.
 *
 * OpenAPI spec version: 2016-07-01.3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Progrupa\Azure\Model;

use \ArrayAccess;

/**
 * SubtaskInformation Class Doc Comment
 *
 * @category    Class
 * @package     Progrupa\Azure
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SubtaskInformation implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SubtaskInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'node_info' => '\Progrupa\Azure\Model\ComputeNodeInformation',
        'start_time' => '\DateTime',
        'end_time' => '\DateTime',
        'exit_code' => 'int',
        'scheduling_error' => '\Progrupa\Azure\Model\TaskSchedulingError',
        'state' => 'string',
        'state_transition_time' => '\DateTime',
        'previous_state' => 'string',
        'previous_state_transition_time' => '\DateTime'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'node_info' => 'nodeInfo',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'exit_code' => 'exitCode',
        'scheduling_error' => 'schedulingError',
        'state' => 'state',
        'state_transition_time' => 'stateTransitionTime',
        'previous_state' => 'previousState',
        'previous_state_transition_time' => 'previousStateTransitionTime'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'node_info' => 'setNodeInfo',
        'start_time' => 'setStartTime',
        'end_time' => 'setEndTime',
        'exit_code' => 'setExitCode',
        'scheduling_error' => 'setSchedulingError',
        'state' => 'setState',
        'state_transition_time' => 'setStateTransitionTime',
        'previous_state' => 'setPreviousState',
        'previous_state_transition_time' => 'setPreviousStateTransitionTime'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'node_info' => 'getNodeInfo',
        'start_time' => 'getStartTime',
        'end_time' => 'getEndTime',
        'exit_code' => 'getExitCode',
        'scheduling_error' => 'getSchedulingError',
        'state' => 'getState',
        'state_transition_time' => 'getStateTransitionTime',
        'previous_state' => 'getPreviousState',
        'previous_state_transition_time' => 'getPreviousStateTransitionTime'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const STATE_ACTIVE = 'active';
    const STATE_PREPARING = 'preparing';
    const STATE_RUNNING = 'running';
    const STATE_COMPLETED = 'completed';
    const PREVIOUS_STATE_ACTIVE = 'active';
    const PREVIOUS_STATE_PREPARING = 'preparing';
    const PREVIOUS_STATE_RUNNING = 'running';
    const PREVIOUS_STATE_COMPLETED = 'completed';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_ACTIVE,
            self::STATE_PREPARING,
            self::STATE_RUNNING,
            self::STATE_COMPLETED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPreviousStateAllowableValues()
    {
        return [
            self::PREVIOUS_STATE_ACTIVE,
            self::PREVIOUS_STATE_PREPARING,
            self::PREVIOUS_STATE_RUNNING,
            self::PREVIOUS_STATE_COMPLETED,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['node_info'] = isset($data['node_info']) ? $data['node_info'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['end_time'] = isset($data['end_time']) ? $data['end_time'] : null;
        $this->container['exit_code'] = isset($data['exit_code']) ? $data['exit_code'] : null;
        $this->container['scheduling_error'] = isset($data['scheduling_error']) ? $data['scheduling_error'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['state_transition_time'] = isset($data['state_transition_time']) ? $data['state_transition_time'] : null;
        $this->container['previous_state'] = isset($data['previous_state']) ? $data['previous_state'] : null;
        $this->container['previous_state_transition_time'] = isset($data['previous_state_transition_time']) ? $data['previous_state_transition_time'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["active", "preparing", "running", "completed"];
        if (!in_array($this->container['state'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'state', must be one of 'active', 'preparing', 'running', 'completed'.";
        }

        $allowed_values = ["active", "preparing", "running", "completed"];
        if (!in_array($this->container['previous_state'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'previous_state', must be one of 'active', 'preparing', 'running', 'completed'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["active", "preparing", "running", "completed"];
        if (!in_array($this->container['state'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["active", "preparing", "running", "completed"];
        if (!in_array($this->container['previous_state'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets node_info
     * @return \Progrupa\Azure\Model\ComputeNodeInformation
     */
    public function getNodeInfo()
    {
        return $this->container['node_info'];
    }

    /**
     * Sets node_info
     * @param \Progrupa\Azure\Model\ComputeNodeInformation $node_info
     * @return $this
     */
    public function setNodeInfo($node_info)
    {
        $this->container['node_info'] = $node_info;

        return $this;
    }

    /**
     * Gets start_time
     * @return \DateTime
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     * @param \DateTime $start_time
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets end_time
     * @return \DateTime
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     * @param \DateTime $end_time This property is set only if the subtask is in the Completed state.
     * @return $this
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets exit_code
     * @return int
     */
    public function getExitCode()
    {
        return $this->container['exit_code'];
    }

    /**
     * Sets exit_code
     * @param int $exit_code This property is set only if the subtask is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the subtask (due to timeout, or user termination via the API) you may see an operating system-defined exit code.
     * @return $this
     */
    public function setExitCode($exit_code)
    {
        $this->container['exit_code'] = $exit_code;

        return $this;
    }

    /**
     * Gets scheduling_error
     * @return \Progrupa\Azure\Model\TaskSchedulingError
     */
    public function getSchedulingError()
    {
        return $this->container['scheduling_error'];
    }

    /**
     * Sets scheduling_error
     * @param \Progrupa\Azure\Model\TaskSchedulingError $scheduling_error
     * @return $this
     */
    public function setSchedulingError($scheduling_error)
    {
        $this->container['scheduling_error'] = $scheduling_error;

        return $this;
    }

    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param string $state
     * @return $this
     */
    public function setState($state)
    {
        $allowed_values = array('active', 'preparing', 'running', 'completed');
        if (!is_null($state) && (!in_array($state, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'state', must be one of 'active', 'preparing', 'running', 'completed'");
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets state_transition_time
     * @return \DateTime
     */
    public function getStateTransitionTime()
    {
        return $this->container['state_transition_time'];
    }

    /**
     * Sets state_transition_time
     * @param \DateTime $state_transition_time
     * @return $this
     */
    public function setStateTransitionTime($state_transition_time)
    {
        $this->container['state_transition_time'] = $state_transition_time;

        return $this;
    }

    /**
     * Gets previous_state
     * @return string
     */
    public function getPreviousState()
    {
        return $this->container['previous_state'];
    }

    /**
     * Sets previous_state
     * @param string $previous_state This property is not set if the subtask is in its initial running state.
     * @return $this
     */
    public function setPreviousState($previous_state)
    {
        $allowed_values = array('active', 'preparing', 'running', 'completed');
        if (!is_null($previous_state) && (!in_array($previous_state, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'previous_state', must be one of 'active', 'preparing', 'running', 'completed'");
        }
        $this->container['previous_state'] = $previous_state;

        return $this;
    }

    /**
     * Gets previous_state_transition_time
     * @return \DateTime
     */
    public function getPreviousStateTransitionTime()
    {
        return $this->container['previous_state_transition_time'];
    }

    /**
     * Sets previous_state_transition_time
     * @param \DateTime $previous_state_transition_time This property is not set if the subtask is in its initial running state.
     * @return $this
     */
    public function setPreviousStateTransitionTime($previous_state_transition_time)
    {
        $this->container['previous_state_transition_time'] = $previous_state_transition_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this));
    }
}


