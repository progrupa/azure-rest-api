<?php
/**
 * CertificateAddParameter
 *
 * PHP version 5
 *
 * @category Class
 * @package  Progrupa\Azure
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BatchService
 *
 * A client for issuing REST requests to the Azure Batch service.
 *
 * OpenAPI spec version: 2016-07-01.3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Progrupa\Azure\Model;

use \ArrayAccess;

/**
 * CertificateAddParameter Class Doc Comment
 *
 * @category    Class
 * @package     Progrupa\Azure
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CertificateAddParameter implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CertificateAddParameter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'thumbprint' => 'string',
        'thumbprint_algorithm' => 'string',
        'data' => 'string',
        'certificate_format' => 'string',
        'password' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'thumbprint' => 'thumbprint',
        'thumbprint_algorithm' => 'thumbprintAlgorithm',
        'data' => 'data',
        'certificate_format' => 'certificateFormat',
        'password' => 'password'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'thumbprint' => 'setThumbprint',
        'thumbprint_algorithm' => 'setThumbprintAlgorithm',
        'data' => 'setData',
        'certificate_format' => 'setCertificateFormat',
        'password' => 'setPassword'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'thumbprint' => 'getThumbprint',
        'thumbprint_algorithm' => 'getThumbprintAlgorithm',
        'data' => 'getData',
        'certificate_format' => 'getCertificateFormat',
        'password' => 'getPassword'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const CERTIFICATE_FORMAT_PFX = 'pfx';
    const CERTIFICATE_FORMAT_CER = 'cer';
    const CERTIFICATE_FORMAT_UNMAPPED = 'unmapped';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCertificateFormatAllowableValues()
    {
        return [
            self::CERTIFICATE_FORMAT_PFX,
            self::CERTIFICATE_FORMAT_CER,
            self::CERTIFICATE_FORMAT_UNMAPPED,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['thumbprint'] = isset($data['thumbprint']) ? $data['thumbprint'] : null;
        $this->container['thumbprint_algorithm'] = isset($data['thumbprint_algorithm']) ? $data['thumbprint_algorithm'] : null;
        $this->container['data'] = isset($data['data']) ? $data['data'] : null;
        $this->container['certificate_format'] = isset($data['certificate_format']) ? $data['certificate_format'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['thumbprint'] === null) {
            $invalid_properties[] = "'thumbprint' can't be null";
        }
        if ($this->container['thumbprint_algorithm'] === null) {
            $invalid_properties[] = "'thumbprint_algorithm' can't be null";
        }
        if ($this->container['data'] === null) {
            $invalid_properties[] = "'data' can't be null";
        }
        $allowed_values = ["pfx", "cer", "unmapped"];
        if (!in_array($this->container['certificate_format'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'certificate_format', must be one of 'pfx', 'cer', 'unmapped'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['thumbprint'] === null) {
            return false;
        }
        if ($this->container['thumbprint_algorithm'] === null) {
            return false;
        }
        if ($this->container['data'] === null) {
            return false;
        }
        $allowed_values = ["pfx", "cer", "unmapped"];
        if (!in_array($this->container['certificate_format'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets thumbprint
     * @return string
     */
    public function getThumbprint()
    {
        return $this->container['thumbprint'];
    }

    /**
     * Sets thumbprint
     * @param string $thumbprint
     * @return $this
     */
    public function setThumbprint($thumbprint)
    {
        $this->container['thumbprint'] = $thumbprint;

        return $this;
    }

    /**
     * Gets thumbprint_algorithm
     * @return string
     */
    public function getThumbprintAlgorithm()
    {
        return $this->container['thumbprint_algorithm'];
    }

    /**
     * Sets thumbprint_algorithm
     * @param string $thumbprint_algorithm
     * @return $this
     */
    public function setThumbprintAlgorithm($thumbprint_algorithm)
    {
        $this->container['thumbprint_algorithm'] = $thumbprint_algorithm;

        return $this;
    }

    /**
     * Gets data
     * @return string
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     * @param string $data
     * @return $this
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets certificate_format
     * @return string
     */
    public function getCertificateFormat()
    {
        return $this->container['certificate_format'];
    }

    /**
     * Sets certificate_format
     * @param string $certificate_format
     * @return $this
     */
    public function setCertificateFormat($certificate_format)
    {
        $allowed_values = array('pfx', 'cer', 'unmapped');
        if (!is_null($certificate_format) && (!in_array($certificate_format, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'certificate_format', must be one of 'pfx', 'cer', 'unmapped'");
        }
        $this->container['certificate_format'] = $certificate_format;

        return $this;
    }

    /**
     * Gets password
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     * @param string $password This is required if the certificate format is pfx. It should be omitted if the certificate format is cer.
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this));
    }
}


