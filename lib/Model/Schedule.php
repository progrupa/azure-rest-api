<?php
/**
 * Schedule
 *
 * PHP version 5
 *
 * @category Class
 * @package  Progrupa\Azure
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BatchService
 *
 * A client for issuing REST requests to the Azure Batch service.
 *
 * OpenAPI spec version: 2016-07-01.3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Progrupa\Azure\Model;

use \ArrayAccess;

/**
 * Schedule Class Doc Comment
 *
 * @category    Class
 * @package     Progrupa\Azure
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Schedule implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Schedule';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'do_not_run_until' => '\DateTime',
        'do_not_run_after' => '\DateTime',
        'start_window' => 'string',
        'recurrence_interval' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'do_not_run_until' => 'doNotRunUntil',
        'do_not_run_after' => 'doNotRunAfter',
        'start_window' => 'startWindow',
        'recurrence_interval' => 'recurrenceInterval'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'do_not_run_until' => 'setDoNotRunUntil',
        'do_not_run_after' => 'setDoNotRunAfter',
        'start_window' => 'setStartWindow',
        'recurrence_interval' => 'setRecurrenceInterval'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'do_not_run_until' => 'getDoNotRunUntil',
        'do_not_run_after' => 'getDoNotRunAfter',
        'start_window' => 'getStartWindow',
        'recurrence_interval' => 'getRecurrenceInterval'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['do_not_run_until'] = isset($data['do_not_run_until']) ? $data['do_not_run_until'] : null;
        $this->container['do_not_run_after'] = isset($data['do_not_run_after']) ? $data['do_not_run_after'] : null;
        $this->container['start_window'] = isset($data['start_window']) ? $data['start_window'] : null;
        $this->container['recurrence_interval'] = isset($data['recurrence_interval']) ? $data['recurrence_interval'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets do_not_run_until
     * @return \DateTime
     */
    public function getDoNotRunUntil()
    {
        return $this->container['do_not_run_until'];
    }

    /**
     * Sets do_not_run_until
     * @param \DateTime $do_not_run_until If you do not specify a doNotRunUntil time, the schedule becomes ready to create jobs immediately.
     * @return $this
     */
    public function setDoNotRunUntil($do_not_run_until)
    {
        $this->container['do_not_run_until'] = $do_not_run_until;

        return $this;
    }

    /**
     * Gets do_not_run_after
     * @return \DateTime
     */
    public function getDoNotRunAfter()
    {
        return $this->container['do_not_run_after'];
    }

    /**
     * Sets do_not_run_after
     * @param \DateTime $do_not_run_after If you do not specify a doNotRunAfter time, and you are creating a recurring job schedule, the job schedule will remain active until you explicitly terminate it.
     * @return $this
     */
    public function setDoNotRunAfter($do_not_run_after)
    {
        $this->container['do_not_run_after'] = $do_not_run_after;

        return $this;
    }

    /**
     * Gets start_window
     * @return string
     */
    public function getStartWindow()
    {
        return $this->container['start_window'];
    }

    /**
     * Sets start_window
     * @param string $start_window If a job is not created within the startWindow interval, then the 'opportunity' is lost; no job will be created until the next recurrence of the schedule. If the schedule is recurring, and the startWindow is longer than the recurrence interval, then this is equivalent to an infinite startWindow, because the job that is 'due' in one recurrenceInterval is not carried forward into the next recurrence interval. The default is infinite. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
     * @return $this
     */
    public function setStartWindow($start_window)
    {
        $this->container['start_window'] = $start_window;

        return $this;
    }

    /**
     * Gets recurrence_interval
     * @return string
     */
    public function getRecurrenceInterval()
    {
        return $this->container['recurrence_interval'];
    }

    /**
     * Sets recurrence_interval
     * @param string $recurrence_interval Because a job schedule can have at most one active job under it at any given time, if it is time to create a new job under a job schedule, but the previous job is still running, the Batch service will not create the new job until the previous job finishes. If the previous job does not finish within the startWindow period of the new recurrenceInterval, then no new job will be scheduled for that interval. For recurring jobs, you should normally specify a jobManagerTask in the jobSpecification. If you do not use jobManagerTask, you will need an external process to monitor when jobs are created, add tasks to the jobs and terminate the jobs ready for the next recurrence. The default is that the schedule does not recur: one job is created, within the startWindow after the doNotRunUntil time, and the schedule is complete as soon as that job finishes. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
     * @return $this
     */
    public function setRecurrenceInterval($recurrence_interval)
    {
        $this->container['recurrence_interval'] = $recurrence_interval;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this));
    }
}


