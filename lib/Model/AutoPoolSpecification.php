<?php
/**
 * AutoPoolSpecification
 *
 * PHP version 5
 *
 * @category Class
 * @package  Progrupa\Azure
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BatchService
 *
 * A client for issuing REST requests to the Azure Batch service.
 *
 * OpenAPI spec version: 2016-07-01.3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Progrupa\Azure\Model;

use \ArrayAccess;

/**
 * AutoPoolSpecification Class Doc Comment
 *
 * @category    Class
 * @package     Progrupa\Azure
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AutoPoolSpecification implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'AutoPoolSpecification';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'auto_pool_id_prefix' => 'string',
        'pool_lifetime_option' => 'string',
        'keep_alive' => 'bool',
        'pool' => '\Progrupa\Azure\Model\PoolSpecification'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'auto_pool_id_prefix' => 'autoPoolIdPrefix',
        'pool_lifetime_option' => 'poolLifetimeOption',
        'keep_alive' => 'keepAlive',
        'pool' => 'pool'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'auto_pool_id_prefix' => 'setAutoPoolIdPrefix',
        'pool_lifetime_option' => 'setPoolLifetimeOption',
        'keep_alive' => 'setKeepAlive',
        'pool' => 'setPool'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'auto_pool_id_prefix' => 'getAutoPoolIdPrefix',
        'pool_lifetime_option' => 'getPoolLifetimeOption',
        'keep_alive' => 'getKeepAlive',
        'pool' => 'getPool'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const POOL_LIFETIME_OPTION_JOBSCHEDULE = 'jobschedule';
    const POOL_LIFETIME_OPTION_JOB = 'job';
    const POOL_LIFETIME_OPTION_UNMAPPED = 'unmapped';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPoolLifetimeOptionAllowableValues()
    {
        return [
            self::POOL_LIFETIME_OPTION_JOBSCHEDULE,
            self::POOL_LIFETIME_OPTION_JOB,
            self::POOL_LIFETIME_OPTION_UNMAPPED,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auto_pool_id_prefix'] = isset($data['auto_pool_id_prefix']) ? $data['auto_pool_id_prefix'] : null;
        $this->container['pool_lifetime_option'] = isset($data['pool_lifetime_option']) ? $data['pool_lifetime_option'] : null;
        $this->container['keep_alive'] = isset($data['keep_alive']) ? $data['keep_alive'] : null;
        $this->container['pool'] = isset($data['pool']) ? $data['pool'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['pool_lifetime_option'] === null) {
            $invalid_properties[] = "'pool_lifetime_option' can't be null";
        }
        $allowed_values = ["jobschedule", "job", "unmapped"];
        if (!in_array($this->container['pool_lifetime_option'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'pool_lifetime_option', must be one of 'jobschedule', 'job', 'unmapped'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['pool_lifetime_option'] === null) {
            return false;
        }
        $allowed_values = ["jobschedule", "job", "unmapped"];
        if (!in_array($this->container['pool_lifetime_option'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets auto_pool_id_prefix
     * @return string
     */
    public function getAutoPoolIdPrefix()
    {
        return $this->container['auto_pool_id_prefix'];
    }

    /**
     * Sets auto_pool_id_prefix
     * @param string $auto_pool_id_prefix The Batch service assigns each auto pool a unique identifier on creation. To distinguish between pools created for different purposes, you can specify this element to add a prefix to the id that is assigned. The prefix can be up to 20 characters long.
     * @return $this
     */
    public function setAutoPoolIdPrefix($auto_pool_id_prefix)
    {
        $this->container['auto_pool_id_prefix'] = $auto_pool_id_prefix;

        return $this;
    }

    /**
     * Gets pool_lifetime_option
     * @return string
     */
    public function getPoolLifetimeOption()
    {
        return $this->container['pool_lifetime_option'];
    }

    /**
     * Sets pool_lifetime_option
     * @param string $pool_lifetime_option When the pool lifetime scope is jobschedule level, the Batch service keeps track of the last autopool created for the jobschedule, and deletes that pool when the jobschedule completes. Batch will also delete this pool if the user updates the auto pool specification in a way that changes this lifetime.
     * @return $this
     */
    public function setPoolLifetimeOption($pool_lifetime_option)
    {
        $allowed_values = array('jobschedule', 'job', 'unmapped');
        if ((!in_array($pool_lifetime_option, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'pool_lifetime_option', must be one of 'jobschedule', 'job', 'unmapped'");
        }
        $this->container['pool_lifetime_option'] = $pool_lifetime_option;

        return $this;
    }

    /**
     * Gets keep_alive
     * @return bool
     */
    public function getKeepAlive()
    {
        return $this->container['keep_alive'];
    }

    /**
     * Sets keep_alive
     * @param bool $keep_alive If false, the Batch service deletes the pool once its lifetime (as determined by the poolLifetimeOption setting) expires; that is, when the job or job schedule completes. If true, the Batch service does not delete the pool automatically. It is up to the user to delete auto pools created with this option.
     * @return $this
     */
    public function setKeepAlive($keep_alive)
    {
        $this->container['keep_alive'] = $keep_alive;

        return $this;
    }

    /**
     * Gets pool
     * @return \Progrupa\Azure\Model\PoolSpecification
     */
    public function getPool()
    {
        return $this->container['pool'];
    }

    /**
     * Sets pool
     * @param \Progrupa\Azure\Model\PoolSpecification $pool
     * @return $this
     */
    public function setPool($pool)
    {
        $this->container['pool'] = $pool;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this));
    }
}


