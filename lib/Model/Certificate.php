<?php
/**
 * Certificate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Progrupa\Azure
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BatchService
 *
 * A client for issuing REST requests to the Azure Batch service.
 *
 * OpenAPI spec version: 2016-07-01.3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Progrupa\Azure\Model;

use \ArrayAccess;

/**
 * Certificate Class Doc Comment
 *
 * @category    Class
 * @description A certificate that can be installed on compute nodes and can be used to authenticate operations on the machine.
 * @package     Progrupa\Azure
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Certificate implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Certificate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'thumbprint' => 'string',
        'thumbprint_algorithm' => 'string',
        'url' => 'string',
        'state' => 'string',
        'state_transition_time' => '\DateTime',
        'previous_state' => 'string',
        'previous_state_transition_time' => '\DateTime',
        'public_data' => 'string',
        'delete_certificate_error' => '\Progrupa\Azure\Model\DeleteCertificateError'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'thumbprint' => 'thumbprint',
        'thumbprint_algorithm' => 'thumbprintAlgorithm',
        'url' => 'url',
        'state' => 'state',
        'state_transition_time' => 'stateTransitionTime',
        'previous_state' => 'previousState',
        'previous_state_transition_time' => 'previousStateTransitionTime',
        'public_data' => 'publicData',
        'delete_certificate_error' => 'deleteCertificateError'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'thumbprint' => 'setThumbprint',
        'thumbprint_algorithm' => 'setThumbprintAlgorithm',
        'url' => 'setUrl',
        'state' => 'setState',
        'state_transition_time' => 'setStateTransitionTime',
        'previous_state' => 'setPreviousState',
        'previous_state_transition_time' => 'setPreviousStateTransitionTime',
        'public_data' => 'setPublicData',
        'delete_certificate_error' => 'setDeleteCertificateError'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'thumbprint' => 'getThumbprint',
        'thumbprint_algorithm' => 'getThumbprintAlgorithm',
        'url' => 'getUrl',
        'state' => 'getState',
        'state_transition_time' => 'getStateTransitionTime',
        'previous_state' => 'getPreviousState',
        'previous_state_transition_time' => 'getPreviousStateTransitionTime',
        'public_data' => 'getPublicData',
        'delete_certificate_error' => 'getDeleteCertificateError'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const STATE_ACTIVE = 'active';
    const STATE_DELETING = 'deleting';
    const STATE_DELETEFAILED = 'deletefailed';
    const PREVIOUS_STATE_ACTIVE = 'active';
    const PREVIOUS_STATE_DELETING = 'deleting';
    const PREVIOUS_STATE_DELETEFAILED = 'deletefailed';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_ACTIVE,
            self::STATE_DELETING,
            self::STATE_DELETEFAILED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPreviousStateAllowableValues()
    {
        return [
            self::PREVIOUS_STATE_ACTIVE,
            self::PREVIOUS_STATE_DELETING,
            self::PREVIOUS_STATE_DELETEFAILED,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['thumbprint'] = isset($data['thumbprint']) ? $data['thumbprint'] : null;
        $this->container['thumbprint_algorithm'] = isset($data['thumbprint_algorithm']) ? $data['thumbprint_algorithm'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['state_transition_time'] = isset($data['state_transition_time']) ? $data['state_transition_time'] : null;
        $this->container['previous_state'] = isset($data['previous_state']) ? $data['previous_state'] : null;
        $this->container['previous_state_transition_time'] = isset($data['previous_state_transition_time']) ? $data['previous_state_transition_time'] : null;
        $this->container['public_data'] = isset($data['public_data']) ? $data['public_data'] : null;
        $this->container['delete_certificate_error'] = isset($data['delete_certificate_error']) ? $data['delete_certificate_error'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["active", "deleting", "deletefailed"];
        if (!in_array($this->container['state'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'state', must be one of 'active', 'deleting', 'deletefailed'.";
        }

        $allowed_values = ["active", "deleting", "deletefailed"];
        if (!in_array($this->container['previous_state'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'previous_state', must be one of 'active', 'deleting', 'deletefailed'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["active", "deleting", "deletefailed"];
        if (!in_array($this->container['state'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["active", "deleting", "deletefailed"];
        if (!in_array($this->container['previous_state'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets thumbprint
     * @return string
     */
    public function getThumbprint()
    {
        return $this->container['thumbprint'];
    }

    /**
     * Sets thumbprint
     * @param string $thumbprint
     * @return $this
     */
    public function setThumbprint($thumbprint)
    {
        $this->container['thumbprint'] = $thumbprint;

        return $this;
    }

    /**
     * Gets thumbprint_algorithm
     * @return string
     */
    public function getThumbprintAlgorithm()
    {
        return $this->container['thumbprint_algorithm'];
    }

    /**
     * Sets thumbprint_algorithm
     * @param string $thumbprint_algorithm
     * @return $this
     */
    public function setThumbprintAlgorithm($thumbprint_algorithm)
    {
        $this->container['thumbprint_algorithm'] = $thumbprint_algorithm;

        return $this;
    }

    /**
     * Gets url
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     * @param string $url
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param string $state
     * @return $this
     */
    public function setState($state)
    {
        $allowed_values = array('active', 'deleting', 'deletefailed');
        if (!is_null($state) && (!in_array($state, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'state', must be one of 'active', 'deleting', 'deletefailed'");
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets state_transition_time
     * @return \DateTime
     */
    public function getStateTransitionTime()
    {
        return $this->container['state_transition_time'];
    }

    /**
     * Sets state_transition_time
     * @param \DateTime $state_transition_time
     * @return $this
     */
    public function setStateTransitionTime($state_transition_time)
    {
        $this->container['state_transition_time'] = $state_transition_time;

        return $this;
    }

    /**
     * Gets previous_state
     * @return string
     */
    public function getPreviousState()
    {
        return $this->container['previous_state'];
    }

    /**
     * Sets previous_state
     * @param string $previous_state This property is not set if the certificate is in its initial Active state.
     * @return $this
     */
    public function setPreviousState($previous_state)
    {
        $allowed_values = array('active', 'deleting', 'deletefailed');
        if (!is_null($previous_state) && (!in_array($previous_state, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'previous_state', must be one of 'active', 'deleting', 'deletefailed'");
        }
        $this->container['previous_state'] = $previous_state;

        return $this;
    }

    /**
     * Gets previous_state_transition_time
     * @return \DateTime
     */
    public function getPreviousStateTransitionTime()
    {
        return $this->container['previous_state_transition_time'];
    }

    /**
     * Sets previous_state_transition_time
     * @param \DateTime $previous_state_transition_time This property is not set if the certificate is in its initial Active state.
     * @return $this
     */
    public function setPreviousStateTransitionTime($previous_state_transition_time)
    {
        $this->container['previous_state_transition_time'] = $previous_state_transition_time;

        return $this;
    }

    /**
     * Gets public_data
     * @return string
     */
    public function getPublicData()
    {
        return $this->container['public_data'];
    }

    /**
     * Sets public_data
     * @param string $public_data
     * @return $this
     */
    public function setPublicData($public_data)
    {
        $this->container['public_data'] = $public_data;

        return $this;
    }

    /**
     * Gets delete_certificate_error
     * @return \Progrupa\Azure\Model\DeleteCertificateError
     */
    public function getDeleteCertificateError()
    {
        return $this->container['delete_certificate_error'];
    }

    /**
     * Sets delete_certificate_error
     * @param \Progrupa\Azure\Model\DeleteCertificateError $delete_certificate_error This property is set only if the certificate is in the DeleteFailed state.
     * @return $this
     */
    public function setDeleteCertificateError($delete_certificate_error)
    {
        $this->container['delete_certificate_error'] = $delete_certificate_error;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this));
    }
}


