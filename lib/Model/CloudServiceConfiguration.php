<?php
/**
 * CloudServiceConfiguration
 *
 * PHP version 5
 *
 * @category Class
 * @package  Progrupa\Azure
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BatchService
 *
 * A client for issuing REST requests to the Azure Batch service.
 *
 * OpenAPI spec version: 2016-07-01.3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Progrupa\Azure\Model;

use \ArrayAccess;

/**
 * CloudServiceConfiguration Class Doc Comment
 *
 * @category    Class
 * @package     Progrupa\Azure
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CloudServiceConfiguration implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CloudServiceConfiguration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'os_family' => 'string',
        'target_os_version' => 'string',
        'current_os_version' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'os_family' => 'osFamily',
        'target_os_version' => 'targetOSVersion',
        'current_os_version' => 'currentOSVersion'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'os_family' => 'setOsFamily',
        'target_os_version' => 'setTargetOsVersion',
        'current_os_version' => 'setCurrentOsVersion'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'os_family' => 'getOsFamily',
        'target_os_version' => 'getTargetOsVersion',
        'current_os_version' => 'getCurrentOsVersion'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['os_family'] = isset($data['os_family']) ? $data['os_family'] : null;
        $this->container['target_os_version'] = isset($data['target_os_version']) ? $data['target_os_version'] : null;
        $this->container['current_os_version'] = isset($data['current_os_version']) ? $data['current_os_version'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['os_family'] === null) {
            $invalid_properties[] = "'os_family' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['os_family'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets os_family
     * @return string
     */
    public function getOsFamily()
    {
        return $this->container['os_family'];
    }

    /**
     * Sets os_family
     * @param string $os_family Possible values are: 2 – OS Family 2, equivalent to Windows Server 2008 R2 SP1. 3 – OS Family 3, equivalent to Windows Server 2012. 4 – OS Family 4, equivalent to Windows Server 2012 R2. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
     * @return $this
     */
    public function setOsFamily($os_family)
    {
        $this->container['os_family'] = $os_family;

        return $this;
    }

    /**
     * Gets target_os_version
     * @return string
     */
    public function getTargetOsVersion()
    {
        return $this->container['target_os_version'];
    }

    /**
     * Sets target_os_version
     * @param string $target_os_version The default value is * which specifies the latest operating system version for the specified OS family.
     * @return $this
     */
    public function setTargetOsVersion($target_os_version)
    {
        $this->container['target_os_version'] = $target_os_version;

        return $this;
    }

    /**
     * Gets current_os_version
     * @return string
     */
    public function getCurrentOsVersion()
    {
        return $this->container['current_os_version'];
    }

    /**
     * Sets current_os_version
     * @param string $current_os_version This may differ from targetOSVersion if the pool state is Upgrading. In this case some virtual machines may be on the targetOSVersion and some may be on the currentOSVersion during the upgrade process. Once all virtual machines have upgraded, currentOSVersion is updated to be the same as targetOSVersion.
     * @return $this
     */
    public function setCurrentOsVersion($current_os_version)
    {
        $this->container['current_os_version'] = $current_os_version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this));
    }
}


