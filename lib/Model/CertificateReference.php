<?php
/**
 * CertificateReference
 *
 * PHP version 5
 *
 * @category Class
 * @package  Progrupa\Azure
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BatchService
 *
 * A client for issuing REST requests to the Azure Batch service.
 *
 * OpenAPI spec version: 2016-07-01.3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Progrupa\Azure\Model;

use \ArrayAccess;

/**
 * CertificateReference Class Doc Comment
 *
 * @category    Class
 * @package     Progrupa\Azure
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CertificateReference implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CertificateReference';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'thumbprint' => 'string',
        'thumbprint_algorithm' => 'string',
        'store_location' => 'string',
        'store_name' => 'string',
        'visibility' => 'string[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'thumbprint' => 'thumbprint',
        'thumbprint_algorithm' => 'thumbprintAlgorithm',
        'store_location' => 'storeLocation',
        'store_name' => 'storeName',
        'visibility' => 'visibility'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'thumbprint' => 'setThumbprint',
        'thumbprint_algorithm' => 'setThumbprintAlgorithm',
        'store_location' => 'setStoreLocation',
        'store_name' => 'setStoreName',
        'visibility' => 'setVisibility'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'thumbprint' => 'getThumbprint',
        'thumbprint_algorithm' => 'getThumbprintAlgorithm',
        'store_location' => 'getStoreLocation',
        'store_name' => 'getStoreName',
        'visibility' => 'getVisibility'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const STORE_LOCATION_CURRENTUSER = 'currentuser';
    const STORE_LOCATION_LOCALMACHINE = 'localmachine';
    const STORE_LOCATION_UNMAPPED = 'unmapped';
    const VISIBILITY_STARTTASK = 'starttask';
    const VISIBILITY_TASK = 'task';
    const VISIBILITY_REMOTEUSER = 'remoteuser';
    const VISIBILITY_UNMAPPED = 'unmapped';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStoreLocationAllowableValues()
    {
        return [
            self::STORE_LOCATION_CURRENTUSER,
            self::STORE_LOCATION_LOCALMACHINE,
            self::STORE_LOCATION_UNMAPPED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getVisibilityAllowableValues()
    {
        return [
            self::VISIBILITY_STARTTASK,
            self::VISIBILITY_TASK,
            self::VISIBILITY_REMOTEUSER,
            self::VISIBILITY_UNMAPPED,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['thumbprint'] = isset($data['thumbprint']) ? $data['thumbprint'] : null;
        $this->container['thumbprint_algorithm'] = isset($data['thumbprint_algorithm']) ? $data['thumbprint_algorithm'] : null;
        $this->container['store_location'] = isset($data['store_location']) ? $data['store_location'] : null;
        $this->container['store_name'] = isset($data['store_name']) ? $data['store_name'] : null;
        $this->container['visibility'] = isset($data['visibility']) ? $data['visibility'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['thumbprint'] === null) {
            $invalid_properties[] = "'thumbprint' can't be null";
        }
        if ($this->container['thumbprint_algorithm'] === null) {
            $invalid_properties[] = "'thumbprint_algorithm' can't be null";
        }
        $allowed_values = ["currentuser", "localmachine", "unmapped"];
        if (!in_array($this->container['store_location'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'store_location', must be one of 'currentuser', 'localmachine', 'unmapped'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['thumbprint'] === null) {
            return false;
        }
        if ($this->container['thumbprint_algorithm'] === null) {
            return false;
        }
        $allowed_values = ["currentuser", "localmachine", "unmapped"];
        if (!in_array($this->container['store_location'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets thumbprint
     * @return string
     */
    public function getThumbprint()
    {
        return $this->container['thumbprint'];
    }

    /**
     * Sets thumbprint
     * @param string $thumbprint
     * @return $this
     */
    public function setThumbprint($thumbprint)
    {
        $this->container['thumbprint'] = $thumbprint;

        return $this;
    }

    /**
     * Gets thumbprint_algorithm
     * @return string
     */
    public function getThumbprintAlgorithm()
    {
        return $this->container['thumbprint_algorithm'];
    }

    /**
     * Sets thumbprint_algorithm
     * @param string $thumbprint_algorithm
     * @return $this
     */
    public function setThumbprintAlgorithm($thumbprint_algorithm)
    {
        $this->container['thumbprint_algorithm'] = $thumbprint_algorithm;

        return $this;
    }

    /**
     * Gets store_location
     * @return string
     */
    public function getStoreLocation()
    {
        return $this->container['store_location'];
    }

    /**
     * Sets store_location
     * @param string $store_location The default value is CurrentUser. This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of remoteuser, a certs directory is created in the user's home directory (e.g., /home/<user-name>/certs) where certificates are placed.
     * @return $this
     */
    public function setStoreLocation($store_location)
    {
        $allowed_values = array('currentuser', 'localmachine', 'unmapped');
        if (!is_null($store_location) && (!in_array($store_location, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'store_location', must be one of 'currentuser', 'localmachine', 'unmapped'");
        }
        $this->container['store_location'] = $store_location;

        return $this;
    }

    /**
     * Gets store_name
     * @return string
     */
    public function getStoreName()
    {
        return $this->container['store_name'];
    }

    /**
     * Sets store_name
     * @param string $store_name The default value is My. This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference).
     * @return $this
     */
    public function setStoreName($store_name)
    {
        $this->container['store_name'] = $store_name;

        return $this;
    }

    /**
     * Gets visibility
     * @return string[]
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     * @param string[] $visibility The default is all accounts.
     * @return $this
     */
    public function setVisibility($visibility)
    {
        $allowed_values = array('starttask', 'task', 'remoteuser', 'unmapped');
        if (!is_null($visibility) && (array_diff($visibility, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'visibility', must be one of 'starttask', 'task', 'remoteuser', 'unmapped'");
        }
        $this->container['visibility'] = $visibility;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this));
    }
}


