<?php
/**
 * JobPreparationAndReleaseTaskExecutionInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Progrupa\Azure
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BatchService
 *
 * A client for issuing REST requests to the Azure Batch service.
 *
 * OpenAPI spec version: 2016-07-01.3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Progrupa\Azure\Model;

use \ArrayAccess;

/**
 * JobPreparationAndReleaseTaskExecutionInformation Class Doc Comment
 *
 * @category    Class
 * @package     Progrupa\Azure
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class JobPreparationAndReleaseTaskExecutionInformation implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'JobPreparationAndReleaseTaskExecutionInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'pool_id' => 'string',
        'node_id' => 'string',
        'node_url' => 'string',
        'job_preparation_task_execution_info' => '\Progrupa\Azure\Model\JobPreparationTaskExecutionInformation',
        'job_release_task_execution_info' => '\Progrupa\Azure\Model\JobReleaseTaskExecutionInformation'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'pool_id' => 'poolId',
        'node_id' => 'nodeId',
        'node_url' => 'nodeUrl',
        'job_preparation_task_execution_info' => 'jobPreparationTaskExecutionInfo',
        'job_release_task_execution_info' => 'jobReleaseTaskExecutionInfo'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'pool_id' => 'setPoolId',
        'node_id' => 'setNodeId',
        'node_url' => 'setNodeUrl',
        'job_preparation_task_execution_info' => 'setJobPreparationTaskExecutionInfo',
        'job_release_task_execution_info' => 'setJobReleaseTaskExecutionInfo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'pool_id' => 'getPoolId',
        'node_id' => 'getNodeId',
        'node_url' => 'getNodeUrl',
        'job_preparation_task_execution_info' => 'getJobPreparationTaskExecutionInfo',
        'job_release_task_execution_info' => 'getJobReleaseTaskExecutionInfo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['pool_id'] = isset($data['pool_id']) ? $data['pool_id'] : null;
        $this->container['node_id'] = isset($data['node_id']) ? $data['node_id'] : null;
        $this->container['node_url'] = isset($data['node_url']) ? $data['node_url'] : null;
        $this->container['job_preparation_task_execution_info'] = isset($data['job_preparation_task_execution_info']) ? $data['job_preparation_task_execution_info'] : null;
        $this->container['job_release_task_execution_info'] = isset($data['job_release_task_execution_info']) ? $data['job_release_task_execution_info'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets pool_id
     * @return string
     */
    public function getPoolId()
    {
        return $this->container['pool_id'];
    }

    /**
     * Sets pool_id
     * @param string $pool_id
     * @return $this
     */
    public function setPoolId($pool_id)
    {
        $this->container['pool_id'] = $pool_id;

        return $this;
    }

    /**
     * Gets node_id
     * @return string
     */
    public function getNodeId()
    {
        return $this->container['node_id'];
    }

    /**
     * Sets node_id
     * @param string $node_id
     * @return $this
     */
    public function setNodeId($node_id)
    {
        $this->container['node_id'] = $node_id;

        return $this;
    }

    /**
     * Gets node_url
     * @return string
     */
    public function getNodeUrl()
    {
        return $this->container['node_url'];
    }

    /**
     * Sets node_url
     * @param string $node_url
     * @return $this
     */
    public function setNodeUrl($node_url)
    {
        $this->container['node_url'] = $node_url;

        return $this;
    }

    /**
     * Gets job_preparation_task_execution_info
     * @return \Progrupa\Azure\Model\JobPreparationTaskExecutionInformation
     */
    public function getJobPreparationTaskExecutionInfo()
    {
        return $this->container['job_preparation_task_execution_info'];
    }

    /**
     * Sets job_preparation_task_execution_info
     * @param \Progrupa\Azure\Model\JobPreparationTaskExecutionInformation $job_preparation_task_execution_info
     * @return $this
     */
    public function setJobPreparationTaskExecutionInfo($job_preparation_task_execution_info)
    {
        $this->container['job_preparation_task_execution_info'] = $job_preparation_task_execution_info;

        return $this;
    }

    /**
     * Gets job_release_task_execution_info
     * @return \Progrupa\Azure\Model\JobReleaseTaskExecutionInformation
     */
    public function getJobReleaseTaskExecutionInfo()
    {
        return $this->container['job_release_task_execution_info'];
    }

    /**
     * Sets job_release_task_execution_info
     * @param \Progrupa\Azure\Model\JobReleaseTaskExecutionInformation $job_release_task_execution_info This property is set only if the Job Release task has run on the node.
     * @return $this
     */
    public function setJobReleaseTaskExecutionInfo($job_release_task_execution_info)
    {
        $this->container['job_release_task_execution_info'] = $job_release_task_execution_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this));
    }
}


