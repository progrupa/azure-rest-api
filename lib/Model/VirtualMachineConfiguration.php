<?php
/**
 * VirtualMachineConfiguration
 *
 * PHP version 5
 *
 * @category Class
 * @package  Progrupa\Azure
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BatchService
 *
 * A client for issuing REST requests to the Azure Batch service.
 *
 * OpenAPI spec version: 2016-07-01.3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Progrupa\Azure\Model;

use \ArrayAccess;

/**
 * VirtualMachineConfiguration Class Doc Comment
 *
 * @category    Class
 * @package     Progrupa\Azure
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class VirtualMachineConfiguration implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'VirtualMachineConfiguration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'image_reference' => '\Progrupa\Azure\Model\ImageReference',
        'node_agent_sku_id' => 'string',
        'windows_configuration' => '\Progrupa\Azure\Model\WindowsConfiguration'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'image_reference' => 'imageReference',
        'node_agent_sku_id' => 'nodeAgentSKUId',
        'windows_configuration' => 'windowsConfiguration'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'image_reference' => 'setImageReference',
        'node_agent_sku_id' => 'setNodeAgentSkuId',
        'windows_configuration' => 'setWindowsConfiguration'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'image_reference' => 'getImageReference',
        'node_agent_sku_id' => 'getNodeAgentSkuId',
        'windows_configuration' => 'getWindowsConfiguration'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['image_reference'] = isset($data['image_reference']) ? $data['image_reference'] : null;
        $this->container['node_agent_sku_id'] = isset($data['node_agent_sku_id']) ? $data['node_agent_sku_id'] : null;
        $this->container['windows_configuration'] = isset($data['windows_configuration']) ? $data['windows_configuration'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['image_reference'] === null) {
            $invalid_properties[] = "'image_reference' can't be null";
        }
        if ($this->container['node_agent_sku_id'] === null) {
            $invalid_properties[] = "'node_agent_sku_id' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['image_reference'] === null) {
            return false;
        }
        if ($this->container['node_agent_sku_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets image_reference
     * @return \Progrupa\Azure\Model\ImageReference
     */
    public function getImageReference()
    {
        return $this->container['image_reference'];
    }

    /**
     * Sets image_reference
     * @param \Progrupa\Azure\Model\ImageReference $image_reference
     * @return $this
     */
    public function setImageReference($image_reference)
    {
        $this->container['image_reference'] = $image_reference;

        return $this;
    }

    /**
     * Gets node_agent_sku_id
     * @return string
     */
    public function getNodeAgentSkuId()
    {
        return $this->container['node_agent_sku_id'];
    }

    /**
     * Sets node_agent_sku_id
     * @param string $node_agent_sku_id The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the 'List supported node agent SKUs' operation.
     * @return $this
     */
    public function setNodeAgentSkuId($node_agent_sku_id)
    {
        $this->container['node_agent_sku_id'] = $node_agent_sku_id;

        return $this;
    }

    /**
     * Gets windows_configuration
     * @return \Progrupa\Azure\Model\WindowsConfiguration
     */
    public function getWindowsConfiguration()
    {
        return $this->container['windows_configuration'];
    }

    /**
     * Sets windows_configuration
     * @param \Progrupa\Azure\Model\WindowsConfiguration $windows_configuration This property must not be specified if the imageReference property specifies a Linux OS image.
     * @return $this
     */
    public function setWindowsConfiguration($windows_configuration)
    {
        $this->container['windows_configuration'] = $windows_configuration;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this));
    }
}


