<?php
/**
 * MultiInstanceSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Progrupa\Azure
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BatchService
 *
 * A client for issuing REST requests to the Azure Batch service.
 *
 * OpenAPI spec version: 2016-07-01.3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Progrupa\Azure\Model;

use \ArrayAccess;

/**
 * MultiInstanceSettings Class Doc Comment
 *
 * @category    Class
 * @description Multi-instance tasks are commonly used to support MPI tasks.
 * @package     Progrupa\Azure
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class MultiInstanceSettings implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'MultiInstanceSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'number_of_instances' => 'int',
        'coordination_command_line' => 'string',
        'common_resource_files' => '\Progrupa\Azure\Model\ResourceFile[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'number_of_instances' => 'numberOfInstances',
        'coordination_command_line' => 'coordinationCommandLine',
        'common_resource_files' => 'commonResourceFiles'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'number_of_instances' => 'setNumberOfInstances',
        'coordination_command_line' => 'setCoordinationCommandLine',
        'common_resource_files' => 'setCommonResourceFiles'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'number_of_instances' => 'getNumberOfInstances',
        'coordination_command_line' => 'getCoordinationCommandLine',
        'common_resource_files' => 'getCommonResourceFiles'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['number_of_instances'] = isset($data['number_of_instances']) ? $data['number_of_instances'] : null;
        $this->container['coordination_command_line'] = isset($data['coordination_command_line']) ? $data['coordination_command_line'] : null;
        $this->container['common_resource_files'] = isset($data['common_resource_files']) ? $data['common_resource_files'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['number_of_instances'] === null) {
            $invalid_properties[] = "'number_of_instances' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['number_of_instances'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets number_of_instances
     * @return int
     */
    public function getNumberOfInstances()
    {
        return $this->container['number_of_instances'];
    }

    /**
     * Sets number_of_instances
     * @param int $number_of_instances
     * @return $this
     */
    public function setNumberOfInstances($number_of_instances)
    {
        $this->container['number_of_instances'] = $number_of_instances;

        return $this;
    }

    /**
     * Gets coordination_command_line
     * @return string
     */
    public function getCoordinationCommandLine()
    {
        return $this->container['coordination_command_line'];
    }

    /**
     * Sets coordination_command_line
     * @param string $coordination_command_line A typical coordination command line launches a background service and verifies that the service is ready to process inter-node messages.
     * @return $this
     */
    public function setCoordinationCommandLine($coordination_command_line)
    {
        $this->container['coordination_command_line'] = $coordination_command_line;

        return $this;
    }

    /**
     * Gets common_resource_files
     * @return \Progrupa\Azure\Model\ResourceFile[]
     */
    public function getCommonResourceFiles()
    {
        return $this->container['common_resource_files'];
    }

    /**
     * Sets common_resource_files
     * @param \Progrupa\Azure\Model\ResourceFile[] $common_resource_files The difference between common resource files and task resource files is that common resource files are downloaded for all subtasks including the primary, whereas task resource files are downloaded only for the primary.
     * @return $this
     */
    public function setCommonResourceFiles($common_resource_files)
    {
        $this->container['common_resource_files'] = $common_resource_files;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this));
    }
}


