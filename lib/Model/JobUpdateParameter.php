<?php
/**
 * JobUpdateParameter
 *
 * PHP version 5
 *
 * @category Class
 * @package  Progrupa\Azure
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BatchService
 *
 * A client for issuing REST requests to the Azure Batch service.
 *
 * OpenAPI spec version: 2016-07-01.3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Progrupa\Azure\Model;

use \ArrayAccess;

/**
 * JobUpdateParameter Class Doc Comment
 *
 * @category    Class
 * @package     Progrupa\Azure
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class JobUpdateParameter implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'JobUpdateParameter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'priority' => 'int',
        'constraints' => '\Progrupa\Azure\Model\JobConstraints',
        'pool_info' => '\Progrupa\Azure\Model\PoolInformation',
        'metadata' => '\Progrupa\Azure\Model\MetadataItem[]',
        'on_all_tasks_complete' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'priority' => 'priority',
        'constraints' => 'constraints',
        'pool_info' => 'poolInfo',
        'metadata' => 'metadata',
        'on_all_tasks_complete' => 'onAllTasksComplete'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'priority' => 'setPriority',
        'constraints' => 'setConstraints',
        'pool_info' => 'setPoolInfo',
        'metadata' => 'setMetadata',
        'on_all_tasks_complete' => 'setOnAllTasksComplete'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'priority' => 'getPriority',
        'constraints' => 'getConstraints',
        'pool_info' => 'getPoolInfo',
        'metadata' => 'getMetadata',
        'on_all_tasks_complete' => 'getOnAllTasksComplete'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const ON_ALL_TASKS_COMPLETE_NO_ACTION = 'noAction';
    const ON_ALL_TASKS_COMPLETE_TERMINATE_JOB = 'terminateJob';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getOnAllTasksCompleteAllowableValues()
    {
        return [
            self::ON_ALL_TASKS_COMPLETE_NO_ACTION,
            self::ON_ALL_TASKS_COMPLETE_TERMINATE_JOB,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['constraints'] = isset($data['constraints']) ? $data['constraints'] : null;
        $this->container['pool_info'] = isset($data['pool_info']) ? $data['pool_info'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['on_all_tasks_complete'] = isset($data['on_all_tasks_complete']) ? $data['on_all_tasks_complete'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['pool_info'] === null) {
            $invalid_properties[] = "'pool_info' can't be null";
        }
        $allowed_values = ["noAction", "terminateJob"];
        if (!in_array($this->container['on_all_tasks_complete'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'on_all_tasks_complete', must be one of 'noAction', 'terminateJob'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['pool_info'] === null) {
            return false;
        }
        $allowed_values = ["noAction", "terminateJob"];
        if (!in_array($this->container['on_all_tasks_complete'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets priority
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     * @param int $priority Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. If omitted, it is set to the default value 0.
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets constraints
     * @return \Progrupa\Azure\Model\JobConstraints
     */
    public function getConstraints()
    {
        return $this->container['constraints'];
    }

    /**
     * Sets constraints
     * @param \Progrupa\Azure\Model\JobConstraints $constraints If omitted, the constraints are cleared.
     * @return $this
     */
    public function setConstraints($constraints)
    {
        $this->container['constraints'] = $constraints;

        return $this;
    }

    /**
     * Gets pool_info
     * @return \Progrupa\Azure\Model\PoolInformation
     */
    public function getPoolInfo()
    {
        return $this->container['pool_info'];
    }

    /**
     * Sets pool_info
     * @param \Progrupa\Azure\Model\PoolInformation $pool_info You may change the pool for a job only when the job is disabled. The Update Job call will fail if you include the poolInfo element and the job is not disabled. If you specify an autoPoolSpecification specification in the poolInfo, only the keepAlive property can be updated, and then only if the auto pool has a poolLifetimeOption of job.
     * @return $this
     */
    public function setPoolInfo($pool_info)
    {
        $this->container['pool_info'] = $pool_info;

        return $this;
    }

    /**
     * Gets metadata
     * @return \Progrupa\Azure\Model\MetadataItem[]
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     * @param \Progrupa\Azure\Model\MetadataItem[] $metadata If omitted, it takes the default value of an empty list; in effect, any existing metadata is deleted.
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets on_all_tasks_complete
     * @return string
     */
    public function getOnAllTasksComplete()
    {
        return $this->container['on_all_tasks_complete'];
    }

    /**
     * Sets on_all_tasks_complete
     * @param string $on_all_tasks_complete If omitted, the completion behavior is set to noaction. If the current value is terminatejob, this is an error because a job's completion behavior may not be changed from terminatejob to noaction.
     * @return $this
     */
    public function setOnAllTasksComplete($on_all_tasks_complete)
    {
        $allowed_values = array('noAction', 'terminateJob');
        if (!is_null($on_all_tasks_complete) && (!in_array($on_all_tasks_complete, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'on_all_tasks_complete', must be one of 'noAction', 'terminateJob'");
        }
        $this->container['on_all_tasks_complete'] = $on_all_tasks_complete;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Progrupa\Azure\ObjectSerializer::sanitizeForSerialization($this));
    }
}


